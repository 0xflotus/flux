package dependenciestest

import (
	"io/ioutil"
	"net/http"

	"go.uber.org/zap"

	"github.com/influxdata/flux/dependencies"
	"github.com/influxdata/flux/memory"
	"github.com/influxdata/flux/mock"
)

type RoundTripFunc func(req *http.Request) *http.Response

func (f RoundTripFunc) RoundTrip(req *http.Request) (*http.Response, error) {
	return f(req), nil
}

var StatusOK int = 200

func defaultTestFunction(req *http.Request) *http.Response {
	body := (*req).Body
	// Test request parameters
	return &http.Response{
		StatusCode: StatusOK,
		Status:     "Body generated by test client",

		// Send response to be tested
		Body: ioutil.NopCloser(body),

		// Must be set to non-nil value or it panics
		Header: make(http.Header),
	}
}

func Default() *dependencies.Dependencies {
	var deps dependencies.Dependencies
	deps.Deps.HTTPClient = &http.Client{
		Transport: RoundTripFunc(defaultTestFunction),
	}
	deps.Deps.SecretService = &mock.SecretService{
		"password": "mysecretpassword",
		"token":    "mysecrettoken",
	}
	deps.Deps.Allocator = new(memory.Allocator)
	deps.Deps.Logger = zap.NewNop()
	return &deps
}
