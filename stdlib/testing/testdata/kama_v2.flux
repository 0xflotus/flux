package testdata_test

import "testing"

option now = () => (2030-01-01T00:00:00Z)

inData = "
#datatype,string,long,dateTime:RFC3339,double
#group,false,false,false,false
#default,_result,,,
,result,table,_time,_value
,,0,2018-05-22T00:00:00Z,110.46
,,0,2018-05-22T00:00:10Z,109.80
,,0,2018-05-22T00:00:20Z,110.17
,,0,2018-05-22T00:00:30Z,109.82
,,0,2018-05-22T00:00:40Z,110.15
,,0,2018-05-22T00:00:50Z,109.31
,,0,2018-05-22T00:01:00Z,109.05
,,0,2018-05-22T00:01:10Z,107.94
,,0,2018-05-22T00:01:20Z,107.76
,,0,2018-05-22T00:01:30Z,109.24
,,0,2018-05-22T00:01:40Z,109.40
,,0,2018-05-22T00:01:50Z,108.50
,,0,2018-05-22T00:02:00Z,107.96
,,0,2018-05-22T00:02:10Z,108.55
,,0,2018-05-22T00:02:20Z,108.85
,,0,2018-05-22T00:02:30Z,110.44
,,0,2018-05-22T00:02:40Z,109.89
,,0,2018-05-22T00:02:50Z,110.70
,,0,2018-05-22T00:03:00Z,110.79
,,0,2018-05-22T00:03:10Z,110.22
,,0,2018-05-22T00:03:20Z,110.00
,,0,2018-05-22T00:03:30Z,109.27
,,0,2018-05-22T00:03:40Z,106.69
,,0,2018-05-22T00:03:50Z,107.07
,,0,2018-05-22T00:04:00Z,107.92
,,0,2018-05-22T00:04:10Z,107.95
,,0,2018-05-22T00:04:20Z,107.70
,,0,2018-05-22T00:04:30Z,107.97
,,0,2018-05-22T00:04:40Z,106.09
"

outData = "
#datatype,string,long,dateTime:RFC3339,double
#group,false,false,false,false
#default,_result,,,
,result,table,_time,_value
,,0,2018-05-22T00:01:40Z,109.24
,,0,2018-05-22T00:01:50Z,109.22
,,0,2018-05-22T00:02:00Z,109.12
,,0,2018-05-22T00:02:10Z,109.10
,,0,2018-05-22T00:02:20Z,109.09
,,0,2018-05-22T00:02:30Z,109.12
,,0,2018-05-22T00:02:40Z,109.14
,,0,2018-05-22T00:02:50Z,109.28
,,0,2018-05-22T00:03:00Z,109.44
,,0,2018-05-22T00:03:10Z,109.46
,,0,2018-05-22T00:03:20Z,109.47
,,0,2018-05-22T00:03:30Z,109.46
,,0,2018-05-22T00:03:40Z,109.39
,,0,2018-05-22T00:03:50Z,109.32
,,0,2018-05-22T00:04:00Z,109.29
,,0,2018-05-22T00:04:10Z,109.18
,,0,2018-05-22T00:04:20Z,109.08
,,0,2018-05-22T00:04:30Z,108.95
,,0,2018-05-22T00:04:40Z,108.42
"

kama = (table=<-) =>
    (table
        |> range(start:2018-05-22T00:00:00Z)
        |> drop(columns: ["_start", "_stop"])
        |> kaufmansAMA(n: 10, columns: ["_value"])
        |> map(fn: (r) => ({r with _value: (math.round(x: r._value*100.0)/100.0)}))
    )

test _kama = () =>
    ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: kama})