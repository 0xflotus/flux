// DO NOT EDIT: This file is autogenerated via the builtin command.

package testing

import (
	ast "github.com/influxdata/flux/ast"
	parser "github.com/influxdata/flux/internal/parser"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   44,
				},
				File:   "testing.flux",
				Source: "package testing\n\n\nimport c \"csv\"\n\nbuiltin assertEquals : (name: string, <-got: [A], want: [A]) => [A]\nbuiltin assertEmpty : (<-tables: [A]) => [A]\nbuiltin diff : (<-got: [A], want: [A], ?verbose: bool, ?epsilon: float) => [{A with _diff: string}]\n\nvalidate = (tables=<-) => tables\n    |> range(start: 1800-01-01T00:00:00Z, stop: 2200-12-31T11:59:59Z)\n    |> map(\n        fn: (r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        }),\n    )\n\noption load = (tables=<-) => tables |> validate()\noption loadStorage = (csv) => c.from(csv: csv) |> validate()\noption loadMem = (csv) => c.from(csv: csv)\n\ninspect = (case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n\n    return {\n        fn: tc.fn,\n        input: tc.input,\n        want: tc.want |> yield(name: \"want\"),\n        got: got |> yield(name: \"got\"),\n        diff: dif |> yield(name: \"diff\"),\n    }\n}\nrun = (case) => {\n    return inspect(case: case).diff |> assertEmpty()\n}\nbenchmark = (case) => {\n    tc = case()\n\n    return tc.input |> tc.fn()\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   6,
					},
					File:   "testing.flux",
					Source: "builtin assertEquals",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   6,
						},
						File:   "testing.flux",
						Source: "assertEquals",
						Start: ast.Position{
							Column: 9,
							Line:   6,
						},
					},
				},
				Name: "assertEquals",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   6,
						},
						File:   "testing.flux",
						Source: "(name: string, <-got: [A], want: [A]) => [A]",
						Start: ast.Position{
							Column: 24,
							Line:   6,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   6,
							},
							File:   "testing.flux",
							Source: "(name: string, <-got: [A], want: [A]) => [A]",
							Start: ast.Position{
								Column: 24,
								Line:   6,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   6,
								},
								File:   "testing.flux",
								Source: "name: string",
								Start: ast.Position{
									Column: 25,
									Line:   6,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   6,
									},
									File:   "testing.flux",
									Source: "name",
									Start: ast.Position{
										Column: 25,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   6,
									},
									File:   "testing.flux",
									Source: "string",
									Start: ast.Position{
										Column: 31,
										Line:   6,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   6,
										},
										File:   "testing.flux",
										Source: "string",
										Start: ast.Position{
											Column: 31,
											Line:   6,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   6,
								},
								File:   "testing.flux",
								Source: "<-got: [A]",
								Start: ast.Position{
									Column: 39,
									Line:   6,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   6,
									},
									File:   "testing.flux",
									Source: "got",
									Start: ast.Position{
										Column: 41,
										Line:   6,
									},
								},
							},
							Name: "got",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   6,
									},
									File:   "testing.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 46,
										Line:   6,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   6,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 47,
											Line:   6,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   6,
											},
											File:   "testing.flux",
											Source: "A",
											Start: ast.Position{
												Column: 47,
												Line:   6,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   6,
								},
								File:   "testing.flux",
								Source: "want: [A]",
								Start: ast.Position{
									Column: 51,
									Line:   6,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   6,
									},
									File:   "testing.flux",
									Source: "want",
									Start: ast.Position{
										Column: 51,
										Line:   6,
									},
								},
							},
							Name: "want",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   6,
									},
									File:   "testing.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 57,
										Line:   6,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   6,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 58,
											Line:   6,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   6,
											},
											File:   "testing.flux",
											Source: "A",
											Start: ast.Position{
												Column: 58,
												Line:   6,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   6,
								},
								File:   "testing.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 65,
									Line:   6,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   6,
									},
									File:   "testing.flux",
									Source: "A",
									Start: ast.Position{
										Column: 66,
										Line:   6,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   6,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 66,
											Line:   6,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   7,
					},
					File:   "testing.flux",
					Source: "builtin assertEmpty",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   7,
						},
						File:   "testing.flux",
						Source: "assertEmpty",
						Start: ast.Position{
							Column: 9,
							Line:   7,
						},
					},
				},
				Name: "assertEmpty",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 45,
							Line:   7,
						},
						File:   "testing.flux",
						Source: "(<-tables: [A]) => [A]",
						Start: ast.Position{
							Column: 23,
							Line:   7,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 45,
								Line:   7,
							},
							File:   "testing.flux",
							Source: "(<-tables: [A]) => [A]",
							Start: ast.Position{
								Column: 23,
								Line:   7,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   7,
								},
								File:   "testing.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 24,
									Line:   7,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   7,
									},
									File:   "testing.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 26,
										Line:   7,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   7,
									},
									File:   "testing.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 34,
										Line:   7,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   7,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 35,
											Line:   7,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   7,
											},
											File:   "testing.flux",
											Source: "A",
											Start: ast.Position{
												Column: 35,
												Line:   7,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   7,
								},
								File:   "testing.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 42,
									Line:   7,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   7,
									},
									File:   "testing.flux",
									Source: "A",
									Start: ast.Position{
										Column: 43,
										Line:   7,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   7,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 43,
											Line:   7,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   8,
					},
					File:   "testing.flux",
					Source: "builtin diff",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   8,
						},
						File:   "testing.flux",
						Source: "diff",
						Start: ast.Position{
							Column: 9,
							Line:   8,
						},
					},
				},
				Name: "diff",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 100,
							Line:   8,
						},
						File:   "testing.flux",
						Source: "(<-got: [A], want: [A], ?verbose: bool, ?epsilon: float) => [{A with _diff: string}]",
						Start: ast.Position{
							Column: 16,
							Line:   8,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 100,
								Line:   8,
							},
							File:   "testing.flux",
							Source: "(<-got: [A], want: [A], ?verbose: bool, ?epsilon: float) => [{A with _diff: string}]",
							Start: ast.Position{
								Column: 16,
								Line:   8,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   8,
								},
								File:   "testing.flux",
								Source: "<-got: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   8,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "got",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Name: "got",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 24,
										Line:   8,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   8,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 25,
											Line:   8,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   8,
											},
											File:   "testing.flux",
											Source: "A",
											Start: ast.Position{
												Column: 25,
												Line:   8,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   8,
								},
								File:   "testing.flux",
								Source: "want: [A]",
								Start: ast.Position{
									Column: 29,
									Line:   8,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "want",
									Start: ast.Position{
										Column: 29,
										Line:   8,
									},
								},
							},
							Name: "want",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 35,
										Line:   8,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   8,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 36,
											Line:   8,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   8,
											},
											File:   "testing.flux",
											Source: "A",
											Start: ast.Position{
												Column: 36,
												Line:   8,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   8,
								},
								File:   "testing.flux",
								Source: "?verbose: bool",
								Start: ast.Position{
									Column: 40,
									Line:   8,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "verbose",
									Start: ast.Position{
										Column: 41,
										Line:   8,
									},
								},
							},
							Name: "verbose",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 50,
										Line:   8,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   8,
										},
										File:   "testing.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 50,
											Line:   8,
										},
									},
								},
								Name: "bool",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   8,
								},
								File:   "testing.flux",
								Source: "?epsilon: float",
								Start: ast.Position{
									Column: 56,
									Line:   8,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "epsilon",
									Start: ast.Position{
										Column: 57,
										Line:   8,
									},
								},
							},
							Name: "epsilon",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "float",
									Start: ast.Position{
										Column: 66,
										Line:   8,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   8,
										},
										File:   "testing.flux",
										Source: "float",
										Start: ast.Position{
											Column: 66,
											Line:   8,
										},
									},
								},
								Name: "float",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 100,
									Line:   8,
								},
								File:   "testing.flux",
								Source: "[{A with _diff: string}]",
								Start: ast.Position{
									Column: 76,
									Line:   8,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   8,
									},
									File:   "testing.flux",
									Source: "{A with _diff: string}",
									Start: ast.Position{
										Column: 77,
										Line:   8,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 98,
											Line:   8,
										},
										File:   "testing.flux",
										Source: "_diff: string",
										Start: ast.Position{
											Column: 85,
											Line:   8,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 90,
												Line:   8,
											},
											File:   "testing.flux",
											Source: "_diff",
											Start: ast.Position{
												Column: 85,
												Line:   8,
											},
										},
									},
									Name: "_diff",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 98,
												Line:   8,
											},
											File:   "testing.flux",
											Source: "string",
											Start: ast.Position{
												Column: 92,
												Line:   8,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 98,
													Line:   8,
												},
												File:   "testing.flux",
												Source: "string",
												Start: ast.Position{
													Column: 92,
													Line:   8,
												},
											},
										},
										Name: "string",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 79,
											Line:   8,
										},
										File:   "testing.flux",
										Source: "A",
										Start: ast.Position{
											Column: 78,
											Line:   8,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 6,
						Line:   18,
					},
					File:   "testing.flux",
					Source: "validate = (tables=<-) => tables\n    |> range(start: 1800-01-01T00:00:00Z, stop: 2200-12-31T11:59:59Z)\n    |> map(\n        fn: (r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        }),\n    )",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   10,
						},
						File:   "testing.flux",
						Source: "validate",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Name: "validate",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   18,
						},
						File:   "testing.flux",
						Source: "(tables=<-) => tables\n    |> range(start: 1800-01-01T00:00:00Z, stop: 2200-12-31T11:59:59Z)\n    |> map(\n        fn: (r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        }),\n    )",
						Start: ast.Position{
							Column: 12,
							Line:   10,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   10,
									},
									File:   "testing.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 27,
										Line:   10,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   11,
								},
								File:   "testing.flux",
								Source: "tables\n    |> range(start: 1800-01-01T00:00:00Z, stop: 2200-12-31T11:59:59Z)",
								Start: ast.Position{
									Column: 27,
									Line:   10,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   11,
										},
										File:   "testing.flux",
										Source: "start: 1800-01-01T00:00:00Z, stop: 2200-12-31T11:59:59Z",
										Start: ast.Position{
											Column: 14,
											Line:   11,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   11,
											},
											File:   "testing.flux",
											Source: "start: 1800-01-01T00:00:00Z",
											Start: ast.Position{
												Column: 14,
												Line:   11,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   11,
												},
												File:   "testing.flux",
												Source: "start",
												Start: ast.Position{
													Column: 14,
													Line:   11,
												},
											},
										},
										Name: "start",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   11,
												},
												File:   "testing.flux",
												Source: "1800-01-01T00:00:00Z",
												Start: ast.Position{
													Column: 21,
													Line:   11,
												},
											},
										},
										Value: parser.MustParseTime("1800-01-01T00:00:00Z"),
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   11,
											},
											File:   "testing.flux",
											Source: "stop: 2200-12-31T11:59:59Z",
											Start: ast.Position{
												Column: 43,
												Line:   11,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   11,
												},
												File:   "testing.flux",
												Source: "stop",
												Start: ast.Position{
													Column: 43,
													Line:   11,
												},
											},
										},
										Name: "stop",
									},
									Value: &ast.DateTimeLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   11,
												},
												File:   "testing.flux",
												Source: "2200-12-31T11:59:59Z",
												Start: ast.Position{
													Column: 49,
													Line:   11,
												},
											},
										},
										Value: parser.MustParseTime("2200-12-31T11:59:59Z"),
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   11,
									},
									File:   "testing.flux",
									Source: "range(start: 1800-01-01T00:00:00Z, stop: 2200-12-31T11:59:59Z)",
									Start: ast.Position{
										Column: 8,
										Line:   11,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   11,
										},
										File:   "testing.flux",
										Source: "range",
										Start: ast.Position{
											Column: 8,
											Line:   11,
										},
									},
								},
								Name: "range",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 6,
								Line:   18,
							},
							File:   "testing.flux",
							Source: "tables\n    |> range(start: 1800-01-01T00:00:00Z, stop: 2200-12-31T11:59:59Z)\n    |> map(\n        fn: (r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        }),\n    )",
							Start: ast.Position{
								Column: 27,
								Line:   10,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   17,
									},
									File:   "testing.flux",
									Source: "fn: (r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        })",
									Start: ast.Position{
										Column: 9,
										Line:   13,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   17,
										},
										File:   "testing.flux",
										Source: "fn: (r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        })",
										Start: ast.Position{
											Column: 9,
											Line:   13,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   13,
											},
											File:   "testing.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 9,
												Line:   13,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   17,
											},
											File:   "testing.flux",
											Source: "(r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        })",
											Start: ast.Position{
												Column: 13,
												Line:   13,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   17,
												},
												File:   "testing.flux",
												Source: "({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        })",
												Start: ast.Position{
													Column: 20,
													Line:   13,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   17,
													},
													File:   "testing.flux",
													Source: "{r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        }",
													Start: ast.Position{
														Column: 21,
														Line:   13,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 115,
															Line:   14,
														},
														File:   "testing.flux",
														Source: "_field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\")",
														Start: ast.Position{
															Column: 13,
															Line:   14,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   14,
															},
															File:   "testing.flux",
															Source: "_field",
															Start: ast.Position{
																Column: 13,
																Line:   14,
															},
														},
													},
													Name: "_field",
												},
												Value: &ast.ConditionalExpression{
													Alternate: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 114,
																		Line:   14,
																	},
																	File:   "testing.flux",
																	Source: "msg: \"test input table does not have _field column\"",
																	Start: ast.Position{
																		Column: 63,
																		Line:   14,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 114,
																			Line:   14,
																		},
																		File:   "testing.flux",
																		Source: "msg: \"test input table does not have _field column\"",
																		Start: ast.Position{
																			Column: 63,
																			Line:   14,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 66,
																				Line:   14,
																			},
																			File:   "testing.flux",
																			Source: "msg",
																			Start: ast.Position{
																				Column: 63,
																				Line:   14,
																			},
																		},
																	},
																	Name: "msg",
																},
																Value: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 114,
																				Line:   14,
																			},
																			File:   "testing.flux",
																			Source: "\"test input table does not have _field column\"",
																			Start: ast.Position{
																				Column: 68,
																				Line:   14,
																			},
																		},
																	},
																	Value: "test input table does not have _field column",
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 115,
																	Line:   14,
																},
																File:   "testing.flux",
																Source: "die(msg: \"test input table does not have _field column\")",
																Start: ast.Position{
																	Column: 59,
																	Line:   14,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 62,
																		Line:   14,
																	},
																	File:   "testing.flux",
																	Source: "die",
																	Start: ast.Position{
																		Column: 59,
																		Line:   14,
																	},
																},
															},
															Name: "die",
														},
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 115,
																Line:   14,
															},
															File:   "testing.flux",
															Source: "if exists r._field then r._field else die(msg: \"test input table does not have _field column\")",
															Start: ast.Position{
																Column: 21,
																Line:   14,
															},
														},
													},
													Consequent: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   14,
																},
																File:   "testing.flux",
																Source: "r._field",
																Start: ast.Position{
																	Column: 45,
																	Line:   14,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   14,
																	},
																	File:   "testing.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 45,
																		Line:   14,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 53,
																		Line:   14,
																	},
																	File:   "testing.flux",
																	Source: "_field",
																	Start: ast.Position{
																		Column: 47,
																		Line:   14,
																	},
																},
															},
															Name: "_field",
														},
													},
													Test: &ast.UnaryExpression{
														Argument: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   14,
																	},
																	File:   "testing.flux",
																	Source: "r._field",
																	Start: ast.Position{
																		Column: 31,
																		Line:   14,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   14,
																		},
																		File:   "testing.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 31,
																			Line:   14,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   14,
																		},
																		File:   "testing.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 33,
																			Line:   14,
																		},
																	},
																},
																Name: "_field",
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   14,
																},
																File:   "testing.flux",
																Source: "exists r._field",
																Start: ast.Position{
																	Column: 24,
																	Line:   14,
																},
															},
														},
														Operator: 14,
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 139,
															Line:   15,
														},
														File:   "testing.flux",
														Source: "_measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\")",
														Start: ast.Position{
															Column: 13,
															Line:   15,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   15,
															},
															File:   "testing.flux",
															Source: "_measurement",
															Start: ast.Position{
																Column: 13,
																Line:   15,
															},
														},
													},
													Name: "_measurement",
												},
												Value: &ast.ConditionalExpression{
													Alternate: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 138,
																		Line:   15,
																	},
																	File:   "testing.flux",
																	Source: "msg: \"test input table does not have _measurement column\"",
																	Start: ast.Position{
																		Column: 81,
																		Line:   15,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 138,
																			Line:   15,
																		},
																		File:   "testing.flux",
																		Source: "msg: \"test input table does not have _measurement column\"",
																		Start: ast.Position{
																			Column: 81,
																			Line:   15,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 84,
																				Line:   15,
																			},
																			File:   "testing.flux",
																			Source: "msg",
																			Start: ast.Position{
																				Column: 81,
																				Line:   15,
																			},
																		},
																	},
																	Name: "msg",
																},
																Value: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 138,
																				Line:   15,
																			},
																			File:   "testing.flux",
																			Source: "\"test input table does not have _measurement column\"",
																			Start: ast.Position{
																				Column: 86,
																				Line:   15,
																			},
																		},
																	},
																	Value: "test input table does not have _measurement column",
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 139,
																	Line:   15,
																},
																File:   "testing.flux",
																Source: "die(msg: \"test input table does not have _measurement column\")",
																Start: ast.Position{
																	Column: 77,
																	Line:   15,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 80,
																		Line:   15,
																	},
																	File:   "testing.flux",
																	Source: "die",
																	Start: ast.Position{
																		Column: 77,
																		Line:   15,
																	},
																},
															},
															Name: "die",
														},
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 139,
																Line:   15,
															},
															File:   "testing.flux",
															Source: "if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\")",
															Start: ast.Position{
																Column: 27,
																Line:   15,
															},
														},
													},
													Consequent: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   15,
																},
																File:   "testing.flux",
																Source: "r._measurement",
																Start: ast.Position{
																	Column: 57,
																	Line:   15,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 58,
																		Line:   15,
																	},
																	File:   "testing.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 57,
																		Line:   15,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 71,
																		Line:   15,
																	},
																	File:   "testing.flux",
																	Source: "_measurement",
																	Start: ast.Position{
																		Column: 59,
																		Line:   15,
																	},
																},
															},
															Name: "_measurement",
														},
													},
													Test: &ast.UnaryExpression{
														Argument: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   15,
																	},
																	File:   "testing.flux",
																	Source: "r._measurement",
																	Start: ast.Position{
																		Column: 37,
																		Line:   15,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   15,
																		},
																		File:   "testing.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 37,
																			Line:   15,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   15,
																		},
																		File:   "testing.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 39,
																			Line:   15,
																		},
																	},
																},
																Name: "_measurement",
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 51,
																	Line:   15,
																},
																File:   "testing.flux",
																Source: "exists r._measurement",
																Start: ast.Position{
																	Column: 30,
																	Line:   15,
																},
															},
														},
														Operator: 14,
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 111,
															Line:   16,
														},
														File:   "testing.flux",
														Source: "_time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")",
														Start: ast.Position{
															Column: 13,
															Line:   16,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   16,
															},
															File:   "testing.flux",
															Source: "_time",
															Start: ast.Position{
																Column: 13,
																Line:   16,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.ConditionalExpression{
													Alternate: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 110,
																		Line:   16,
																	},
																	File:   "testing.flux",
																	Source: "msg: \"test input table does not have _time column\"",
																	Start: ast.Position{
																		Column: 60,
																		Line:   16,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 110,
																			Line:   16,
																		},
																		File:   "testing.flux",
																		Source: "msg: \"test input table does not have _time column\"",
																		Start: ast.Position{
																			Column: 60,
																			Line:   16,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 63,
																				Line:   16,
																			},
																			File:   "testing.flux",
																			Source: "msg",
																			Start: ast.Position{
																				Column: 60,
																				Line:   16,
																			},
																		},
																	},
																	Name: "msg",
																},
																Value: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 110,
																				Line:   16,
																			},
																			File:   "testing.flux",
																			Source: "\"test input table does not have _time column\"",
																			Start: ast.Position{
																				Column: 65,
																				Line:   16,
																			},
																		},
																	},
																	Value: "test input table does not have _time column",
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 111,
																	Line:   16,
																},
																File:   "testing.flux",
																Source: "die(msg: \"test input table does not have _time column\")",
																Start: ast.Position{
																	Column: 56,
																	Line:   16,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   16,
																	},
																	File:   "testing.flux",
																	Source: "die",
																	Start: ast.Position{
																		Column: 56,
																		Line:   16,
																	},
																},
															},
															Name: "die",
														},
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 111,
																Line:   16,
															},
															File:   "testing.flux",
															Source: "if exists r._time then r._time else die(msg: \"test input table does not have _time column\")",
															Start: ast.Position{
																Column: 20,
																Line:   16,
															},
														},
													},
													Consequent: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   16,
																},
																File:   "testing.flux",
																Source: "r._time",
																Start: ast.Position{
																	Column: 43,
																	Line:   16,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   16,
																	},
																	File:   "testing.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 43,
																		Line:   16,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   16,
																	},
																	File:   "testing.flux",
																	Source: "_time",
																	Start: ast.Position{
																		Column: 45,
																		Line:   16,
																	},
																},
															},
															Name: "_time",
														},
													},
													Test: &ast.UnaryExpression{
														Argument: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   16,
																	},
																	File:   "testing.flux",
																	Source: "r._time",
																	Start: ast.Position{
																		Column: 30,
																		Line:   16,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   16,
																		},
																		File:   "testing.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 30,
																			Line:   16,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   16,
																		},
																		File:   "testing.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 32,
																			Line:   16,
																		},
																	},
																},
																Name: "_time",
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   16,
																},
																File:   "testing.flux",
																Source: "exists r._time",
																Start: ast.Position{
																	Column: 23,
																	Line:   16,
																},
															},
														},
														Operator: 14,
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   13,
														},
														File:   "testing.flux",
														Source: "r",
														Start: ast.Position{
															Column: 22,
															Line:   13,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   13,
												},
												File:   "testing.flux",
												Source: "r",
												Start: ast.Position{
													Column: 14,
													Line:   13,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   13,
													},
													File:   "testing.flux",
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   13,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   18,
								},
								File:   "testing.flux",
								Source: "map(\n        fn: (r) => ({r with\n            _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n            _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n            _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\"),\n        }),\n    )",
								Start: ast.Position{
									Column: 8,
									Line:   12,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   12,
									},
									File:   "testing.flux",
									Source: "map",
									Start: ast.Position{
										Column: 8,
										Line:   12,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   10,
							},
							File:   "testing.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 13,
								Line:   10,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   10,
								},
								File:   "testing.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 13,
									Line:   10,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   10,
							},
							File:   "testing.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 20,
								Line:   10,
							},
						},
					}},
				}},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   20,
						},
						File:   "testing.flux",
						Source: "load = (tables=<-) => tables |> validate()",
						Start: ast.Position{
							Column: 8,
							Line:   20,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   20,
							},
							File:   "testing.flux",
							Source: "load",
							Start: ast.Position{
								Column: 8,
								Line:   20,
							},
						},
					},
					Name: "load",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   20,
							},
							File:   "testing.flux",
							Source: "(tables=<-) => tables |> validate()",
							Start: ast.Position{
								Column: 15,
								Line:   20,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   20,
									},
									File:   "testing.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 30,
										Line:   20,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   20,
								},
								File:   "testing.flux",
								Source: "tables |> validate()",
								Start: ast.Position{
									Column: 30,
									Line:   20,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   20,
									},
									File:   "testing.flux",
									Source: "validate()",
									Start: ast.Position{
										Column: 40,
										Line:   20,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   20,
										},
										File:   "testing.flux",
										Source: "validate",
										Start: ast.Position{
											Column: 40,
											Line:   20,
										},
									},
								},
								Name: "validate",
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   20,
								},
								File:   "testing.flux",
								Source: "tables=<-",
								Start: ast.Position{
									Column: 16,
									Line:   20,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   20,
									},
									File:   "testing.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 16,
										Line:   20,
									},
								},
							},
							Name: "tables",
						},
						Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   20,
								},
								File:   "testing.flux",
								Source: "<-",
								Start: ast.Position{
									Column: 23,
									Line:   20,
								},
							},
						}},
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 50,
						Line:   20,
					},
					File:   "testing.flux",
					Source: "option load = (tables=<-) => tables |> validate()",
					Start: ast.Position{
						Column: 1,
						Line:   20,
					},
				},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 61,
							Line:   21,
						},
						File:   "testing.flux",
						Source: "loadStorage = (csv) => c.from(csv: csv) |> validate()",
						Start: ast.Position{
							Column: 8,
							Line:   21,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   21,
							},
							File:   "testing.flux",
							Source: "loadStorage",
							Start: ast.Position{
								Column: 8,
								Line:   21,
							},
						},
					},
					Name: "loadStorage",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   21,
							},
							File:   "testing.flux",
							Source: "(csv) => c.from(csv: csv) |> validate()",
							Start: ast.Position{
								Column: 22,
								Line:   21,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   21,
										},
										File:   "testing.flux",
										Source: "csv: csv",
										Start: ast.Position{
											Column: 38,
											Line:   21,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   21,
											},
											File:   "testing.flux",
											Source: "csv: csv",
											Start: ast.Position{
												Column: 38,
												Line:   21,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   21,
												},
												File:   "testing.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 38,
													Line:   21,
												},
											},
										},
										Name: "csv",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   21,
												},
												File:   "testing.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 43,
													Line:   21,
												},
											},
										},
										Name: "csv",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   21,
									},
									File:   "testing.flux",
									Source: "c.from(csv: csv)",
									Start: ast.Position{
										Column: 31,
										Line:   21,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   21,
										},
										File:   "testing.flux",
										Source: "c.from",
										Start: ast.Position{
											Column: 31,
											Line:   21,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   21,
											},
											File:   "testing.flux",
											Source: "c",
											Start: ast.Position{
												Column: 31,
												Line:   21,
											},
										},
									},
									Name: "c",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   21,
											},
											File:   "testing.flux",
											Source: "from",
											Start: ast.Position{
												Column: 33,
												Line:   21,
											},
										},
									},
									Name: "from",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   21,
								},
								File:   "testing.flux",
								Source: "c.from(csv: csv) |> validate()",
								Start: ast.Position{
									Column: 31,
									Line:   21,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   21,
									},
									File:   "testing.flux",
									Source: "validate()",
									Start: ast.Position{
										Column: 51,
										Line:   21,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   21,
										},
										File:   "testing.flux",
										Source: "validate",
										Start: ast.Position{
											Column: 51,
											Line:   21,
										},
									},
								},
								Name: "validate",
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   21,
								},
								File:   "testing.flux",
								Source: "csv",
								Start: ast.Position{
									Column: 23,
									Line:   21,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   21,
									},
									File:   "testing.flux",
									Source: "csv",
									Start: ast.Position{
										Column: 23,
										Line:   21,
									},
								},
							},
							Name: "csv",
						},
						Value: nil,
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 61,
						Line:   21,
					},
					File:   "testing.flux",
					Source: "option loadStorage = (csv) => c.from(csv: csv) |> validate()",
					Start: ast.Position{
						Column: 1,
						Line:   21,
					},
				},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 43,
							Line:   22,
						},
						File:   "testing.flux",
						Source: "loadMem = (csv) => c.from(csv: csv)",
						Start: ast.Position{
							Column: 8,
							Line:   22,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   22,
							},
							File:   "testing.flux",
							Source: "loadMem",
							Start: ast.Position{
								Column: 8,
								Line:   22,
							},
						},
					},
					Name: "loadMem",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   22,
							},
							File:   "testing.flux",
							Source: "(csv) => c.from(csv: csv)",
							Start: ast.Position{
								Column: 18,
								Line:   22,
							},
						},
					},
					Body: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   22,
									},
									File:   "testing.flux",
									Source: "csv: csv",
									Start: ast.Position{
										Column: 34,
										Line:   22,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   22,
										},
										File:   "testing.flux",
										Source: "csv: csv",
										Start: ast.Position{
											Column: 34,
											Line:   22,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   22,
											},
											File:   "testing.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 34,
												Line:   22,
											},
										},
									},
									Name: "csv",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   22,
											},
											File:   "testing.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 39,
												Line:   22,
											},
										},
									},
									Name: "csv",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   22,
								},
								File:   "testing.flux",
								Source: "c.from(csv: csv)",
								Start: ast.Position{
									Column: 27,
									Line:   22,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   22,
									},
									File:   "testing.flux",
									Source: "c.from",
									Start: ast.Position{
										Column: 27,
										Line:   22,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   22,
										},
										File:   "testing.flux",
										Source: "c",
										Start: ast.Position{
											Column: 27,
											Line:   22,
										},
									},
								},
								Name: "c",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   22,
										},
										File:   "testing.flux",
										Source: "from",
										Start: ast.Position{
											Column: 29,
											Line:   22,
										},
									},
								},
								Name: "from",
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   22,
								},
								File:   "testing.flux",
								Source: "csv",
								Start: ast.Position{
									Column: 19,
									Line:   22,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   22,
									},
									File:   "testing.flux",
									Source: "csv",
									Start: ast.Position{
										Column: 19,
										Line:   22,
									},
								},
							},
							Name: "csv",
						},
						Value: nil,
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 43,
						Line:   22,
					},
					File:   "testing.flux",
					Source: "option loadMem = (csv) => c.from(csv: csv)",
					Start: ast.Position{
						Column: 1,
						Line:   22,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   36,
					},
					File:   "testing.flux",
					Source: "inspect = (case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n\n    return {\n        fn: tc.fn,\n        input: tc.input,\n        want: tc.want |> yield(name: \"want\"),\n        got: got |> yield(name: \"got\"),\n        diff: dif |> yield(name: \"diff\"),\n    }\n}",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   24,
						},
						File:   "testing.flux",
						Source: "inspect",
						Start: ast.Position{
							Column: 1,
							Line:   24,
						},
					},
				},
				Name: "inspect",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   36,
						},
						File:   "testing.flux",
						Source: "(case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n\n    return {\n        fn: tc.fn,\n        input: tc.input,\n        want: tc.want |> yield(name: \"want\"),\n        got: got |> yield(name: \"got\"),\n        diff: dif |> yield(name: \"diff\"),\n    }\n}",
						Start: ast.Position{
							Column: 11,
							Line:   24,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   36,
							},
							File:   "testing.flux",
							Source: "{\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n\n    return {\n        fn: tc.fn,\n        input: tc.input,\n        want: tc.want |> yield(name: \"want\"),\n        got: got |> yield(name: \"got\"),\n        diff: dif |> yield(name: \"diff\"),\n    }\n}",
							Start: ast.Position{
								Column: 21,
								Line:   24,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   25,
								},
								File:   "testing.flux",
								Source: "tc = case()",
								Start: ast.Position{
									Column: 5,
									Line:   25,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   25,
									},
									File:   "testing.flux",
									Source: "tc",
									Start: ast.Position{
										Column: 5,
										Line:   25,
									},
								},
							},
							Name: "tc",
						},
						Init: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   25,
									},
									File:   "testing.flux",
									Source: "case()",
									Start: ast.Position{
										Column: 10,
										Line:   25,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   25,
										},
										File:   "testing.flux",
										Source: "case",
										Start: ast.Position{
											Column: 10,
											Line:   25,
										},
									},
								},
								Name: "case",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   26,
								},
								File:   "testing.flux",
								Source: "got = tc.input |> tc.fn()",
								Start: ast.Position{
									Column: 5,
									Line:   26,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   26,
									},
									File:   "testing.flux",
									Source: "got",
									Start: ast.Position{
										Column: 5,
										Line:   26,
									},
								},
							},
							Name: "got",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   26,
										},
										File:   "testing.flux",
										Source: "tc.input",
										Start: ast.Position{
											Column: 11,
											Line:   26,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   26,
											},
											File:   "testing.flux",
											Source: "tc",
											Start: ast.Position{
												Column: 11,
												Line:   26,
											},
										},
									},
									Name: "tc",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   26,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 14,
												Line:   26,
											},
										},
									},
									Name: "input",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   26,
									},
									File:   "testing.flux",
									Source: "tc.input |> tc.fn()",
									Start: ast.Position{
										Column: 11,
										Line:   26,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   26,
										},
										File:   "testing.flux",
										Source: "tc.fn()",
										Start: ast.Position{
											Column: 23,
											Line:   26,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   26,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 23,
												Line:   26,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   26,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 23,
													Line:   26,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   26,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 26,
													Line:   26,
												},
											},
										},
										Name: "fn",
									},
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   27,
								},
								File:   "testing.flux",
								Source: "dif = got |> diff(want: tc.want)",
								Start: ast.Position{
									Column: 5,
									Line:   27,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   27,
									},
									File:   "testing.flux",
									Source: "dif",
									Start: ast.Position{
										Column: 5,
										Line:   27,
									},
								},
							},
							Name: "dif",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   27,
										},
										File:   "testing.flux",
										Source: "got",
										Start: ast.Position{
											Column: 11,
											Line:   27,
										},
									},
								},
								Name: "got",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   27,
									},
									File:   "testing.flux",
									Source: "got |> diff(want: tc.want)",
									Start: ast.Position{
										Column: 11,
										Line:   27,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   27,
											},
											File:   "testing.flux",
											Source: "want: tc.want",
											Start: ast.Position{
												Column: 23,
												Line:   27,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   27,
												},
												File:   "testing.flux",
												Source: "want: tc.want",
												Start: ast.Position{
													Column: 23,
													Line:   27,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   27,
													},
													File:   "testing.flux",
													Source: "want",
													Start: ast.Position{
														Column: 23,
														Line:   27,
													},
												},
											},
											Name: "want",
										},
										Value: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   27,
													},
													File:   "testing.flux",
													Source: "tc.want",
													Start: ast.Position{
														Column: 29,
														Line:   27,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   27,
														},
														File:   "testing.flux",
														Source: "tc",
														Start: ast.Position{
															Column: 29,
															Line:   27,
														},
													},
												},
												Name: "tc",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   27,
														},
														File:   "testing.flux",
														Source: "want",
														Start: ast.Position{
															Column: 32,
															Line:   27,
														},
													},
												},
												Name: "want",
											},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   27,
										},
										File:   "testing.flux",
										Source: "diff(want: tc.want)",
										Start: ast.Position{
											Column: 18,
											Line:   27,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   27,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 18,
												Line:   27,
											},
										},
									},
									Name: "diff",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   35,
									},
									File:   "testing.flux",
									Source: "{\n        fn: tc.fn,\n        input: tc.input,\n        want: tc.want |> yield(name: \"want\"),\n        got: got |> yield(name: \"got\"),\n        diff: dif |> yield(name: \"diff\"),\n    }",
									Start: ast.Position{
										Column: 12,
										Line:   29,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   30,
										},
										File:   "testing.flux",
										Source: "fn: tc.fn",
										Start: ast.Position{
											Column: 9,
											Line:   30,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   30,
											},
											File:   "testing.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 9,
												Line:   30,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   30,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 13,
												Line:   30,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   30,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 13,
													Line:   30,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   30,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 16,
													Line:   30,
												},
											},
										},
										Name: "fn",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   31,
										},
										File:   "testing.flux",
										Source: "input: tc.input",
										Start: ast.Position{
											Column: 9,
											Line:   31,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   31,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 9,
												Line:   31,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   31,
											},
											File:   "testing.flux",
											Source: "tc.input",
											Start: ast.Position{
												Column: 16,
												Line:   31,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   31,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 16,
													Line:   31,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   31,
												},
												File:   "testing.flux",
												Source: "input",
												Start: ast.Position{
													Column: 19,
													Line:   31,
												},
											},
										},
										Name: "input",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   32,
										},
										File:   "testing.flux",
										Source: "want: tc.want |> yield(name: \"want\")",
										Start: ast.Position{
											Column: 9,
											Line:   32,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   32,
											},
											File:   "testing.flux",
											Source: "want",
											Start: ast.Position{
												Column: 9,
												Line:   32,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.PipeExpression{
									Argument: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   32,
												},
												File:   "testing.flux",
												Source: "tc.want",
												Start: ast.Position{
													Column: 15,
													Line:   32,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   32,
													},
													File:   "testing.flux",
													Source: "tc",
													Start: ast.Position{
														Column: 15,
														Line:   32,
													},
												},
											},
											Name: "tc",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   32,
													},
													File:   "testing.flux",
													Source: "want",
													Start: ast.Position{
														Column: 18,
														Line:   32,
													},
												},
											},
											Name: "want",
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   32,
											},
											File:   "testing.flux",
											Source: "tc.want |> yield(name: \"want\")",
											Start: ast.Position{
												Column: 15,
												Line:   32,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   32,
													},
													File:   "testing.flux",
													Source: "name: \"want\"",
													Start: ast.Position{
														Column: 32,
														Line:   32,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   32,
														},
														File:   "testing.flux",
														Source: "name: \"want\"",
														Start: ast.Position{
															Column: 32,
															Line:   32,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   32,
															},
															File:   "testing.flux",
															Source: "name",
															Start: ast.Position{
																Column: 32,
																Line:   32,
															},
														},
													},
													Name: "name",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   32,
															},
															File:   "testing.flux",
															Source: "\"want\"",
															Start: ast.Position{
																Column: 38,
																Line:   32,
															},
														},
													},
													Value: "want",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   32,
												},
												File:   "testing.flux",
												Source: "yield(name: \"want\")",
												Start: ast.Position{
													Column: 26,
													Line:   32,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   32,
													},
													File:   "testing.flux",
													Source: "yield",
													Start: ast.Position{
														Column: 26,
														Line:   32,
													},
												},
											},
											Name: "yield",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   33,
										},
										File:   "testing.flux",
										Source: "got: got |> yield(name: \"got\")",
										Start: ast.Position{
											Column: 9,
											Line:   33,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   33,
											},
											File:   "testing.flux",
											Source: "got",
											Start: ast.Position{
												Column: 9,
												Line:   33,
											},
										},
									},
									Name: "got",
								},
								Value: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   33,
												},
												File:   "testing.flux",
												Source: "got",
												Start: ast.Position{
													Column: 14,
													Line:   33,
												},
											},
										},
										Name: "got",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   33,
											},
											File:   "testing.flux",
											Source: "got |> yield(name: \"got\")",
											Start: ast.Position{
												Column: 14,
												Line:   33,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   33,
													},
													File:   "testing.flux",
													Source: "name: \"got\"",
													Start: ast.Position{
														Column: 27,
														Line:   33,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   33,
														},
														File:   "testing.flux",
														Source: "name: \"got\"",
														Start: ast.Position{
															Column: 27,
															Line:   33,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   33,
															},
															File:   "testing.flux",
															Source: "name",
															Start: ast.Position{
																Column: 27,
																Line:   33,
															},
														},
													},
													Name: "name",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   33,
															},
															File:   "testing.flux",
															Source: "\"got\"",
															Start: ast.Position{
																Column: 33,
																Line:   33,
															},
														},
													},
													Value: "got",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   33,
												},
												File:   "testing.flux",
												Source: "yield(name: \"got\")",
												Start: ast.Position{
													Column: 21,
													Line:   33,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   33,
													},
													File:   "testing.flux",
													Source: "yield",
													Start: ast.Position{
														Column: 21,
														Line:   33,
													},
												},
											},
											Name: "yield",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   34,
										},
										File:   "testing.flux",
										Source: "diff: dif |> yield(name: \"diff\")",
										Start: ast.Position{
											Column: 9,
											Line:   34,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   34,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 9,
												Line:   34,
											},
										},
									},
									Name: "diff",
								},
								Value: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   34,
												},
												File:   "testing.flux",
												Source: "dif",
												Start: ast.Position{
													Column: 15,
													Line:   34,
												},
											},
										},
										Name: "dif",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   34,
											},
											File:   "testing.flux",
											Source: "dif |> yield(name: \"diff\")",
											Start: ast.Position{
												Column: 15,
												Line:   34,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   34,
													},
													File:   "testing.flux",
													Source: "name: \"diff\"",
													Start: ast.Position{
														Column: 28,
														Line:   34,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   34,
														},
														File:   "testing.flux",
														Source: "name: \"diff\"",
														Start: ast.Position{
															Column: 28,
															Line:   34,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   34,
															},
															File:   "testing.flux",
															Source: "name",
															Start: ast.Position{
																Column: 28,
																Line:   34,
															},
														},
													},
													Name: "name",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   34,
															},
															File:   "testing.flux",
															Source: "\"diff\"",
															Start: ast.Position{
																Column: 34,
																Line:   34,
															},
														},
													},
													Value: "diff",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   34,
												},
												File:   "testing.flux",
												Source: "yield(name: \"diff\")",
												Start: ast.Position{
													Column: 22,
													Line:   34,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   34,
													},
													File:   "testing.flux",
													Source: "yield",
													Start: ast.Position{
														Column: 22,
														Line:   34,
													},
												},
											},
											Name: "yield",
										},
									},
								},
							}},
							With: nil,
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   35,
								},
								File:   "testing.flux",
								Source: "return {\n        fn: tc.fn,\n        input: tc.input,\n        want: tc.want |> yield(name: \"want\"),\n        got: got |> yield(name: \"got\"),\n        diff: dif |> yield(name: \"diff\"),\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   29,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   24,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 12,
								Line:   24,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   24,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 12,
									Line:   24,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   39,
					},
					File:   "testing.flux",
					Source: "run = (case) => {\n    return inspect(case: case).diff |> assertEmpty()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   37,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   37,
						},
						File:   "testing.flux",
						Source: "run",
						Start: ast.Position{
							Column: 1,
							Line:   37,
						},
					},
				},
				Name: "run",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   39,
						},
						File:   "testing.flux",
						Source: "(case) => {\n    return inspect(case: case).diff |> assertEmpty()\n}",
						Start: ast.Position{
							Column: 7,
							Line:   37,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   39,
							},
							File:   "testing.flux",
							Source: "{\n    return inspect(case: case).diff |> assertEmpty()\n}",
							Start: ast.Position{
								Column: 17,
								Line:   37,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   38,
										},
										File:   "testing.flux",
										Source: "inspect(case: case).diff",
										Start: ast.Position{
											Column: 12,
											Line:   38,
										},
									},
								},
								Object: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   38,
												},
												File:   "testing.flux",
												Source: "case: case",
												Start: ast.Position{
													Column: 20,
													Line:   38,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   38,
													},
													File:   "testing.flux",
													Source: "case: case",
													Start: ast.Position{
														Column: 20,
														Line:   38,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   38,
														},
														File:   "testing.flux",
														Source: "case",
														Start: ast.Position{
															Column: 20,
															Line:   38,
														},
													},
												},
												Name: "case",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   38,
														},
														File:   "testing.flux",
														Source: "case",
														Start: ast.Position{
															Column: 26,
															Line:   38,
														},
													},
												},
												Name: "case",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   38,
											},
											File:   "testing.flux",
											Source: "inspect(case: case)",
											Start: ast.Position{
												Column: 12,
												Line:   38,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   38,
												},
												File:   "testing.flux",
												Source: "inspect",
												Start: ast.Position{
													Column: 12,
													Line:   38,
												},
											},
										},
										Name: "inspect",
									},
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   38,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 32,
												Line:   38,
											},
										},
									},
									Name: "diff",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   38,
									},
									File:   "testing.flux",
									Source: "inspect(case: case).diff |> assertEmpty()",
									Start: ast.Position{
										Column: 12,
										Line:   38,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   38,
										},
										File:   "testing.flux",
										Source: "assertEmpty()",
										Start: ast.Position{
											Column: 40,
											Line:   38,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   38,
											},
											File:   "testing.flux",
											Source: "assertEmpty",
											Start: ast.Position{
												Column: 40,
												Line:   38,
											},
										},
									},
									Name: "assertEmpty",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   38,
								},
								File:   "testing.flux",
								Source: "return inspect(case: case).diff |> assertEmpty()",
								Start: ast.Position{
									Column: 5,
									Line:   38,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   37,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 8,
								Line:   37,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   37,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 8,
									Line:   37,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   44,
					},
					File:   "testing.flux",
					Source: "benchmark = (case) => {\n    tc = case()\n\n    return tc.input |> tc.fn()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   40,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   40,
						},
						File:   "testing.flux",
						Source: "benchmark",
						Start: ast.Position{
							Column: 1,
							Line:   40,
						},
					},
				},
				Name: "benchmark",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   44,
						},
						File:   "testing.flux",
						Source: "(case) => {\n    tc = case()\n\n    return tc.input |> tc.fn()\n}",
						Start: ast.Position{
							Column: 13,
							Line:   40,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   44,
							},
							File:   "testing.flux",
							Source: "{\n    tc = case()\n\n    return tc.input |> tc.fn()\n}",
							Start: ast.Position{
								Column: 23,
								Line:   40,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   41,
								},
								File:   "testing.flux",
								Source: "tc = case()",
								Start: ast.Position{
									Column: 5,
									Line:   41,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   41,
									},
									File:   "testing.flux",
									Source: "tc",
									Start: ast.Position{
										Column: 5,
										Line:   41,
									},
								},
							},
							Name: "tc",
						},
						Init: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   41,
									},
									File:   "testing.flux",
									Source: "case()",
									Start: ast.Position{
										Column: 10,
										Line:   41,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   41,
										},
										File:   "testing.flux",
										Source: "case",
										Start: ast.Position{
											Column: 10,
											Line:   41,
										},
									},
								},
								Name: "case",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   43,
										},
										File:   "testing.flux",
										Source: "tc.input",
										Start: ast.Position{
											Column: 12,
											Line:   43,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   43,
											},
											File:   "testing.flux",
											Source: "tc",
											Start: ast.Position{
												Column: 12,
												Line:   43,
											},
										},
									},
									Name: "tc",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   43,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 15,
												Line:   43,
											},
										},
									},
									Name: "input",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   43,
									},
									File:   "testing.flux",
									Source: "tc.input |> tc.fn()",
									Start: ast.Position{
										Column: 12,
										Line:   43,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   43,
										},
										File:   "testing.flux",
										Source: "tc.fn()",
										Start: ast.Position{
											Column: 24,
											Line:   43,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   43,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 24,
												Line:   43,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   43,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 24,
													Line:   43,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   43,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 27,
													Line:   43,
												},
											},
										},
										Name: "fn",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   43,
								},
								File:   "testing.flux",
								Source: "return tc.input |> tc.fn()",
								Start: ast.Position{
									Column: 5,
									Line:   43,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   40,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 14,
								Line:   40,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   40,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 14,
									Line:   40,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   4,
						},
						File:   "testing.flux",
						Source: "c",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Name: "c",
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   4,
					},
					File:   "testing.flux",
					Source: "import c \"csv\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   4,
						},
						File:   "testing.flux",
						Source: "\"csv\"",
						Start: ast.Position{
							Column: 10,
							Line:   4,
						},
					},
				},
				Value: "csv",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "testing.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   1,
					},
					File:   "testing.flux",
					Source: "package testing",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						File:   "testing.flux",
						Source: "testing",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "testing",
			},
		},
	}},
	Package: "testing",
	Path:    "testing",
}
