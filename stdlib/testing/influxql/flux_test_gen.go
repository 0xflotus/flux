// DO NOT EDIT: This file is autogenerated via the builtin command.

package influxql

import (
	ast "github.com/influxdata/flux/ast"
	parser "github.com/influxdata/flux/internal/parser"
	"regexp"
)

var FluxTestPackages = []*ast.Package{&ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   106,
				},
				File:   "aggregate_count_group_by_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n\"\n\n// SELECT count(\"value\") FROM cpu WHERE time >= now() - 1m GROUP BY t0\nt_aggregate_count_group_by = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count_group_by = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   6,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   6,
							},
							File:   "aggregate_count_group_by_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   6,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   6,
							},
							File:   "aggregate_count_group_by_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   6,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   6,
								},
								File:   "aggregate_count_group_by_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   6,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   6,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   73,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   8,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   73,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   90,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   75,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   75,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   75,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   90,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   75,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   100,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "t_aggregate_count_group_by = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   93,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   93,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "t_aggregate_count_group_by",
						Start: ast.Position{
							Column: 1,
							Line:   93,
						},
					},
				},
				Name: "t_aggregate_count_group_by",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   100,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 30,
							Line:   93,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   93,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 45,
															Line:   93,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   94,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "tables\n\t|> range(start: -1m)",
													Start: ast.Position{
														Column: 45,
														Line:   93,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   94,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "start: -1m",
															Start: ast.Position{
																Column: 11,
																Line:   94,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   94,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "start: -1m",
																Start: ast.Position{
																	Column: 11,
																	Line:   94,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 16,
																		Line:   94,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "start",
																	Start: ast.Position{
																		Column: 11,
																		Line:   94,
																	},
																},
															},
															Name: "start",
														},
														Value: &ast.UnaryExpression{
															Argument: &ast.DurationLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   94,
																		},
																		File:   "aggregate_count_group_by_test.flux",
																		Source: "1m",
																		Start: ast.Position{
																			Column: 19,
																			Line:   94,
																		},
																	},
																},
																Values: []ast.Duration{ast.Duration{
																	Magnitude: int64(1),
																	Unit:      "m",
																}},
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   94,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "-1m",
																	Start: ast.Position{
																		Column: 18,
																		Line:   94,
																	},
																},
															},
															Operator: 6,
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   94,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "range(start: -1m)",
														Start: ast.Position{
															Column: 5,
															Line:   94,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   94,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "range",
															Start: ast.Position{
																Column: 5,
																Line:   94,
															},
														},
													},
													Name: "range",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   95,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
												Start: ast.Position{
													Column: 45,
													Line:   93,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   95,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "fn: (r) => r._measurement == \"cpu\"",
														Start: ast.Position{
															Column: 12,
															Line:   95,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   95,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "fn: (r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 12,
																Line:   95,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   95,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 12,
																	Line:   95,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   95,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "(r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 16,
																	Line:   95,
																},
															},
														},
														Body: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   95,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 23,
																		Line:   95,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   95,
																		},
																		File:   "aggregate_count_group_by_test.flux",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 23,
																			Line:   95,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   95,
																			},
																			File:   "aggregate_count_group_by_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 23,
																				Line:   95,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   95,
																			},
																			File:   "aggregate_count_group_by_test.flux",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 25,
																				Line:   95,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
															Operator: 17,
															Right: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   95,
																		},
																		File:   "aggregate_count_group_by_test.flux",
																		Source: "\"cpu\"",
																		Start: ast.Position{
																			Column: 41,
																			Line:   95,
																		},
																	},
																},
																Value: "cpu",
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   95,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   95,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   95,
																		},
																		File:   "aggregate_count_group_by_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   95,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   95,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "filter(fn: (r) => r._measurement == \"cpu\")",
													Start: ast.Position{
														Column: 5,
														Line:   95,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   95,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "filter",
														Start: ast.Position{
															Column: 5,
															Line:   95,
														},
													},
												},
												Name: "filter",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   96,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")",
											Start: ast.Position{
												Column: 45,
												Line:   93,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   96,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "fn: (r) => r._field == \"value\"",
													Start: ast.Position{
														Column: 12,
														Line:   96,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   96,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "fn: (r) => r._field == \"value\"",
														Start: ast.Position{
															Column: 12,
															Line:   96,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   96,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   96,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   96,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "(r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 16,
																Line:   96,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   96,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "r._field == \"value\"",
																Start: ast.Position{
																	Column: 23,
																	Line:   96,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   96,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "r._field",
																	Start: ast.Position{
																		Column: 23,
																		Line:   96,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   96,
																		},
																		File:   "aggregate_count_group_by_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 23,
																			Line:   96,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   96,
																		},
																		File:   "aggregate_count_group_by_test.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 25,
																			Line:   96,
																		},
																	},
																},
																Name: "_field",
															},
														},
														Operator: 17,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   96,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "\"value\"",
																	Start: ast.Position{
																		Column: 35,
																		Line:   96,
																	},
																},
															},
															Value: "value",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   96,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   96,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   96,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   96,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   96,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "filter(fn: (r) => r._field == \"value\")",
												Start: ast.Position{
													Column: 5,
													Line:   96,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   96,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 5,
														Line:   96,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   97,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")",
										Start: ast.Position{
											Column: 45,
											Line:   93,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   97,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\"",
												Start: ast.Position{
													Column: 11,
													Line:   97,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   97,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"]",
													Start: ast.Position{
														Column: 11,
														Line:   97,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   97,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 11,
															Line:   97,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   97,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "[\"_measurement\", \"_field\", \"_start\", \"t0\"]",
														Start: ast.Position{
															Column: 20,
															Line:   97,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   97,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 21,
																Line:   97,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   97,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 37,
																Line:   97,
															},
														},
													},
													Value: "_field",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   97,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "\"_start\"",
															Start: ast.Position{
																Column: 47,
																Line:   97,
															},
														},
													},
													Value: "_start",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 61,
																Line:   97,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "\"t0\"",
															Start: ast.Position{
																Column: 57,
																Line:   97,
															},
														},
													},
													Value: "t0",
												}},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   97,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "mode: \"by\"",
													Start: ast.Position{
														Column: 64,
														Line:   97,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 68,
															Line:   97,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "mode",
														Start: ast.Position{
															Column: 64,
															Line:   97,
														},
													},
												},
												Name: "mode",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   97,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "\"by\"",
														Start: ast.Position{
															Column: 70,
															Line:   97,
														},
													},
												},
												Value: "by",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 75,
												Line:   97,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")",
											Start: ast.Position{
												Column: 5,
												Line:   97,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   97,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "group",
												Start: ast.Position{
													Column: 5,
													Line:   97,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   98,
									},
									File:   "aggregate_count_group_by_test.flux",
									Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")\n\t|> count()",
									Start: ast.Position{
										Column: 45,
										Line:   93,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   98,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "count()",
										Start: ast.Position{
											Column: 5,
											Line:   98,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   98,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "count",
											Start: ast.Position{
												Column: 5,
												Line:   98,
											},
										},
									},
									Name: "count",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   99,
								},
								File:   "aggregate_count_group_by_test.flux",
								Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))",
								Start: ast.Position{
									Column: 45,
									Line:   93,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   99,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "fn: (r) => ({r with time: r._start, count: r._value})",
										Start: ast.Position{
											Column: 9,
											Line:   99,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   99,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "fn: (r) => ({r with time: r._start, count: r._value})",
											Start: ast.Position{
												Column: 9,
												Line:   99,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   99,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 9,
													Line:   99,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   99,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "(r) => ({r with time: r._start, count: r._value})",
												Start: ast.Position{
													Column: 13,
													Line:   99,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   99,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "({r with time: r._start, count: r._value})",
													Start: ast.Position{
														Column: 20,
														Line:   99,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   99,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "{r with time: r._start, count: r._value}",
														Start: ast.Position{
															Column: 21,
															Line:   99,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   99,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "time: r._start",
															Start: ast.Position{
																Column: 29,
																Line:   99,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   99,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "time",
																Start: ast.Position{
																	Column: 29,
																	Line:   99,
																},
															},
														},
														Name: "time",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   99,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "r._start",
																Start: ast.Position{
																	Column: 35,
																	Line:   99,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   99,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 35,
																		Line:   99,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   99,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "_start",
																	Start: ast.Position{
																		Column: 37,
																		Line:   99,
																	},
																},
															},
															Name: "_start",
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   99,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "count: r._value",
															Start: ast.Position{
																Column: 45,
																Line:   99,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   99,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "count",
																Start: ast.Position{
																	Column: 45,
																	Line:   99,
																},
															},
														},
														Name: "count",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   99,
																},
																File:   "aggregate_count_group_by_test.flux",
																Source: "r._value",
																Start: ast.Position{
																	Column: 52,
																	Line:   99,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 53,
																		Line:   99,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 52,
																		Line:   99,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   99,
																	},
																	File:   "aggregate_count_group_by_test.flux",
																	Source: "_value",
																	Start: ast.Position{
																		Column: 54,
																		Line:   99,
																	},
																},
															},
															Name: "_value",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   99,
															},
															File:   "aggregate_count_group_by_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 22,
																Line:   99,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   99,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   99,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   99,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   99,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   99,
									},
									File:   "aggregate_count_group_by_test.flux",
									Source: "map(fn: (r) => ({r with time: r._start, count: r._value}))",
									Start: ast.Position{
										Column: 5,
										Line:   99,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   99,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 5,
											Line:   99,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   100,
							},
							File:   "aggregate_count_group_by_test.flux",
							Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\", \"t0\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 45,
								Line:   93,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   100,
									},
									File:   "aggregate_count_group_by_test.flux",
									Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   100,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   100,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   100,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   100,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   100,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   100,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "[\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   100,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   100,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   100,
												},
											},
										},
										Value: "_time",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   100,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 29,
													Line:   100,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   100,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 39,
													Line:   100,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   100,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 48,
													Line:   100,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   100,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 58,
													Line:   100,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   100,
								},
								File:   "aggregate_count_group_by_test.flux",
								Source: "drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   100,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   100,
									},
									File:   "aggregate_count_group_by_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   100,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   93,
							},
							File:   "aggregate_count_group_by_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 31,
								Line:   93,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   93,
								},
								File:   "aggregate_count_group_by_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 31,
									Line:   93,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   93,
							},
							File:   "aggregate_count_group_by_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 38,
								Line:   93,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   106,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "_aggregate_count_group_by = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   102,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   102,
							},
							File:   "aggregate_count_group_by_test.flux",
							Source: "_aggregate_count_group_by",
							Start: ast.Position{
								Column: 6,
								Line:   102,
							},
						},
					},
					Name: "_aggregate_count_group_by",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   106,
							},
							File:   "aggregate_count_group_by_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by,\n})",
							Start: ast.Position{
								Column: 34,
								Line:   102,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   106,
								},
								File:   "aggregate_count_group_by_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by,\n})",
								Start: ast.Position{
									Column: 40,
									Line:   102,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   106,
									},
									File:   "aggregate_count_group_by_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by,\n}",
									Start: ast.Position{
										Column: 41,
										Line:   102,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   103,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   103,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   103,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   103,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   103,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   103,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   103,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   103,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   103,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   103,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   103,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   103,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   103,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   103,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   103,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   103,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   103,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   103,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   103,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   103,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   104,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   104,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   104,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   104,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   104,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   104,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   104,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   104,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   104,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   104,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   104,
														},
														File:   "aggregate_count_group_by_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   104,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   104,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   104,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   104,
												},
												File:   "aggregate_count_group_by_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   104,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   104,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   104,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   104,
													},
													File:   "aggregate_count_group_by_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   104,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   105,
										},
										File:   "aggregate_count_group_by_test.flux",
										Source: "fn: t_aggregate_count_group_by",
										Start: ast.Position{
											Column: 2,
											Line:   105,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   105,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   105,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   105,
											},
											File:   "aggregate_count_group_by_test.flux",
											Source: "t_aggregate_count_group_by",
											Start: ast.Position{
												Column: 6,
												Line:   105,
											},
										},
									},
									Name: "t_aggregate_count_group_by",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   106,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "test _aggregate_count_group_by = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   102,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregate_count_group_by_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregate_count_group_by_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregate_count_group_by_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   105,
				},
				File:   "aggregate_count_group_by_wildcard_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n\"\n\n// SELECT count(\"value\") FROM cpu WHERE time >= now() - 1m GROUP BY *\nt_aggregate_count_group_by_wildcard = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count_group_by_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by_wildcard,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   6,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   6,
							},
							File:   "aggregate_count_group_by_wildcard_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   6,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   6,
							},
							File:   "aggregate_count_group_by_wildcard_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   6,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   6,
								},
								File:   "aggregate_count_group_by_wildcard_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   6,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   6,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   73,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   8,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   73,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   90,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   75,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   75,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   75,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   90,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   75,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,true,false,false\n#default,_result,,,,,\n,result,table,_measurement,t0,time,count\n,,0,cpu,Duzw4c,2019-10-24T19:06:30Z,6\n,,1,cpu,EmU470,2019-10-24T19:06:30Z,6\n,,2,cpu,LbQrlPU,2019-10-24T19:06:30Z,6\n,,3,cpu,PHtSS,2019-10-24T19:06:30Z,6\n,,4,cpu,b3C6Do,2019-10-24T19:06:30Z,6\n,,5,cpu,n69gsUs,2019-10-24T19:06:30Z,6\n,,6,cpu,pMA,2019-10-24T19:06:30Z,6\n,,7,cpu,sDjZtMO,2019-10-24T19:06:30Z,6\n,,8,cpu,unBUUi,2019-10-24T19:06:30Z,6\n,,9,cpu,wT37nhV,2019-10-24T19:06:30Z,6\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   99,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "t_aggregate_count_group_by_wildcard = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   93,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   93,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "t_aggregate_count_group_by_wildcard",
						Start: ast.Position{
							Column: 1,
							Line:   93,
						},
					},
				},
				Name: "t_aggregate_count_group_by_wildcard",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   99,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 39,
							Line:   93,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   93,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 54,
														Line:   93,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   94,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "tables\n\t|> range(start: -1m)",
												Start: ast.Position{
													Column: 54,
													Line:   93,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   94,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "start: -1m",
														Start: ast.Position{
															Column: 11,
															Line:   94,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   94,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "start: -1m",
															Start: ast.Position{
																Column: 11,
																Line:   94,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   94,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "start",
																Start: ast.Position{
																	Column: 11,
																	Line:   94,
																},
															},
														},
														Name: "start",
													},
													Value: &ast.UnaryExpression{
														Argument: &ast.DurationLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   94,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "1m",
																	Start: ast.Position{
																		Column: 19,
																		Line:   94,
																	},
																},
															},
															Values: []ast.Duration{ast.Duration{
																Magnitude: int64(1),
																Unit:      "m",
															}},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   94,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "-1m",
																Start: ast.Position{
																	Column: 18,
																	Line:   94,
																},
															},
														},
														Operator: 6,
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   94,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "range(start: -1m)",
													Start: ast.Position{
														Column: 5,
														Line:   94,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 10,
															Line:   94,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "range",
														Start: ast.Position{
															Column: 5,
															Line:   94,
														},
													},
												},
												Name: "range",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   95,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
											Start: ast.Position{
												Column: 54,
												Line:   93,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   95,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "fn: (r) => r._measurement == \"cpu\"",
													Start: ast.Position{
														Column: 12,
														Line:   95,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   95,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "fn: (r) => r._measurement == \"cpu\"",
														Start: ast.Position{
															Column: 12,
															Line:   95,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   95,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   95,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   95,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "(r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 16,
																Line:   95,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   95,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 23,
																	Line:   95,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   95,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "r._measurement",
																	Start: ast.Position{
																		Column: 23,
																		Line:   95,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   95,
																		},
																		File:   "aggregate_count_group_by_wildcard_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 23,
																			Line:   95,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   95,
																		},
																		File:   "aggregate_count_group_by_wildcard_test.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 25,
																			Line:   95,
																		},
																	},
																},
																Name: "_measurement",
															},
														},
														Operator: 17,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   95,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "\"cpu\"",
																	Start: ast.Position{
																		Column: 41,
																		Line:   95,
																	},
																},
															},
															Value: "cpu",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   95,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   95,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   95,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   95,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   95,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "filter(fn: (r) => r._measurement == \"cpu\")",
												Start: ast.Position{
													Column: 5,
													Line:   95,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   95,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 5,
														Line:   95,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   96,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")",
										Start: ast.Position{
											Column: 54,
											Line:   93,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   96,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "fn: (r) => r._field == \"value\"",
												Start: ast.Position{
													Column: 12,
													Line:   96,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   96,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "fn: (r) => r._field == \"value\"",
													Start: ast.Position{
														Column: 12,
														Line:   96,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   96,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 12,
															Line:   96,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   96,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "(r) => r._field == \"value\"",
														Start: ast.Position{
															Column: 16,
															Line:   96,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   96,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "r._field == \"value\"",
															Start: ast.Position{
																Column: 23,
																Line:   96,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   96,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "r._field",
																Start: ast.Position{
																	Column: 23,
																	Line:   96,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   96,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 23,
																		Line:   96,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   96,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "_field",
																	Start: ast.Position{
																		Column: 25,
																		Line:   96,
																	},
																},
															},
															Name: "_field",
														},
													},
													Operator: 17,
													Right: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   96,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "\"value\"",
																Start: ast.Position{
																	Column: 35,
																	Line:   96,
																},
															},
														},
														Value: "value",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   96,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 17,
																Line:   96,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   96,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   96,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   96,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "filter(fn: (r) => r._field == \"value\")",
											Start: ast.Position{
												Column: 5,
												Line:   96,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   96,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "filter",
												Start: ast.Position{
													Column: 5,
													Line:   96,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   97,
									},
									File:   "aggregate_count_group_by_wildcard_test.flux",
									Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> count()",
									Start: ast.Position{
										Column: 54,
										Line:   93,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   97,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "count()",
										Start: ast.Position{
											Column: 5,
											Line:   97,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   97,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "count",
											Start: ast.Position{
												Column: 5,
												Line:   97,
											},
										},
									},
									Name: "count",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   98,
								},
								File:   "aggregate_count_group_by_wildcard_test.flux",
								Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))",
								Start: ast.Position{
									Column: 54,
									Line:   93,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   98,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "fn: (r) => ({r with time: r._start, count: r._value})",
										Start: ast.Position{
											Column: 9,
											Line:   98,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   98,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "fn: (r) => ({r with time: r._start, count: r._value})",
											Start: ast.Position{
												Column: 9,
												Line:   98,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   98,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 9,
													Line:   98,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   98,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "(r) => ({r with time: r._start, count: r._value})",
												Start: ast.Position{
													Column: 13,
													Line:   98,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   98,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "({r with time: r._start, count: r._value})",
													Start: ast.Position{
														Column: 20,
														Line:   98,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   98,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "{r with time: r._start, count: r._value}",
														Start: ast.Position{
															Column: 21,
															Line:   98,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   98,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "time: r._start",
															Start: ast.Position{
																Column: 29,
																Line:   98,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   98,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "time",
																Start: ast.Position{
																	Column: 29,
																	Line:   98,
																},
															},
														},
														Name: "time",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   98,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "r._start",
																Start: ast.Position{
																	Column: 35,
																	Line:   98,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   98,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 35,
																		Line:   98,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   98,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "_start",
																	Start: ast.Position{
																		Column: 37,
																		Line:   98,
																	},
																},
															},
															Name: "_start",
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   98,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "count: r._value",
															Start: ast.Position{
																Column: 45,
																Line:   98,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   98,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "count",
																Start: ast.Position{
																	Column: 45,
																	Line:   98,
																},
															},
														},
														Name: "count",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   98,
																},
																File:   "aggregate_count_group_by_wildcard_test.flux",
																Source: "r._value",
																Start: ast.Position{
																	Column: 52,
																	Line:   98,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 53,
																		Line:   98,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 52,
																		Line:   98,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   98,
																	},
																	File:   "aggregate_count_group_by_wildcard_test.flux",
																	Source: "_value",
																	Start: ast.Position{
																		Column: 54,
																		Line:   98,
																	},
																},
															},
															Name: "_value",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   98,
															},
															File:   "aggregate_count_group_by_wildcard_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 22,
																Line:   98,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   98,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   98,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   98,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   98,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   98,
									},
									File:   "aggregate_count_group_by_wildcard_test.flux",
									Source: "map(fn: (r) => ({r with time: r._start, count: r._value}))",
									Start: ast.Position{
										Column: 5,
										Line:   98,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   98,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 5,
											Line:   98,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   99,
							},
							File:   "aggregate_count_group_by_wildcard_test.flux",
							Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: r._start, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 54,
								Line:   93,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   99,
									},
									File:   "aggregate_count_group_by_wildcard_test.flux",
									Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   99,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   99,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   99,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   99,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   99,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   99,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "[\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   99,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   99,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   99,
												},
											},
										},
										Value: "_time",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   99,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 29,
													Line:   99,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   99,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 39,
													Line:   99,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   99,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 48,
													Line:   99,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   99,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 58,
													Line:   99,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   99,
								},
								File:   "aggregate_count_group_by_wildcard_test.flux",
								Source: "drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   99,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   99,
									},
									File:   "aggregate_count_group_by_wildcard_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   99,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   93,
							},
							File:   "aggregate_count_group_by_wildcard_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 40,
								Line:   93,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   93,
								},
								File:   "aggregate_count_group_by_wildcard_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 40,
									Line:   93,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   93,
							},
							File:   "aggregate_count_group_by_wildcard_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 47,
								Line:   93,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   105,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "_aggregate_count_group_by_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by_wildcard,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   101,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   101,
							},
							File:   "aggregate_count_group_by_wildcard_test.flux",
							Source: "_aggregate_count_group_by_wildcard",
							Start: ast.Position{
								Column: 6,
								Line:   101,
							},
						},
					},
					Name: "_aggregate_count_group_by_wildcard",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   105,
							},
							File:   "aggregate_count_group_by_wildcard_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by_wildcard,\n})",
							Start: ast.Position{
								Column: 43,
								Line:   101,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   105,
								},
								File:   "aggregate_count_group_by_wildcard_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by_wildcard,\n})",
								Start: ast.Position{
									Column: 49,
									Line:   101,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   105,
									},
									File:   "aggregate_count_group_by_wildcard_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by_wildcard,\n}",
									Start: ast.Position{
										Column: 50,
										Line:   101,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   102,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   102,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   102,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   102,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   102,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   102,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   102,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   102,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   102,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   102,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   102,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   102,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   102,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   102,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   102,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   102,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   102,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   102,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   102,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   102,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   103,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   103,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   103,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   103,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   103,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   103,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   103,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   103,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   103,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   103,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   103,
														},
														File:   "aggregate_count_group_by_wildcard_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   103,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   103,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   103,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   103,
												},
												File:   "aggregate_count_group_by_wildcard_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   103,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   103,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   103,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   103,
													},
													File:   "aggregate_count_group_by_wildcard_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   103,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   104,
										},
										File:   "aggregate_count_group_by_wildcard_test.flux",
										Source: "fn: t_aggregate_count_group_by_wildcard",
										Start: ast.Position{
											Column: 2,
											Line:   104,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   104,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   104,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   104,
											},
											File:   "aggregate_count_group_by_wildcard_test.flux",
											Source: "t_aggregate_count_group_by_wildcard",
											Start: ast.Position{
												Column: 6,
												Line:   104,
											},
										},
									},
									Name: "t_aggregate_count_group_by_wildcard",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   105,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "test _aggregate_count_group_by_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_group_by_wildcard,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   101,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregate_count_group_by_wildcard_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregate_count_group_by_wildcard_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregate_count_group_by_wildcard_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   100,
				},
				File:   "aggregate_count_regex_wildcard_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\nimport \"influxdata/influxdb/v1\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n\"\n\n// SELECT count(/val/) FROM cpu WHERE time >= now() - 1m\nt_aggregate_count_regex_wildcard = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count_regex_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_regex_wildcard,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   7,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   7,
							},
							File:   "aggregate_count_regex_wildcard_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   7,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   7,
							},
							File:   "aggregate_count_regex_wildcard_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   7,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   7,
								},
								File:   "aggregate_count_regex_wildcard_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   7,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   7,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   74,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   9,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   74,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   9,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   82,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   76,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   76,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   76,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   82,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   76,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 59,
						Line:   94,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "t_aggregate_count_regex_wildcard = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   85,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "t_aggregate_count_regex_wildcard",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "t_aggregate_count_regex_wildcard",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 59,
							Line:   94,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 36,
							Line:   85,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   85,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 51,
																	Line:   85,
																},
															},
														},
														Name: "tables",
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   86,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "tables\n\t|> range(start: -1m)",
															Start: ast.Position{
																Column: 51,
																Line:   85,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   86,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "start: -1m",
																	Start: ast.Position{
																		Column: 11,
																		Line:   86,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   86,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "start: -1m",
																		Start: ast.Position{
																			Column: 11,
																			Line:   86,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 16,
																				Line:   86,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "start",
																			Start: ast.Position{
																				Column: 11,
																				Line:   86,
																			},
																		},
																	},
																	Name: "start",
																},
																Value: &ast.UnaryExpression{
																	Argument: &ast.DurationLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 21,
																					Line:   86,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "1m",
																				Start: ast.Position{
																					Column: 19,
																					Line:   86,
																				},
																			},
																		},
																		Values: []ast.Duration{ast.Duration{
																			Magnitude: int64(1),
																			Unit:      "m",
																		}},
																	},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 21,
																				Line:   86,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "-1m",
																			Start: ast.Position{
																				Column: 18,
																				Line:   86,
																			},
																		},
																	},
																	Operator: 6,
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   86,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "range(start: -1m)",
																Start: ast.Position{
																	Column: 5,
																	Line:   86,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 10,
																		Line:   86,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "range",
																	Start: ast.Position{
																		Column: 5,
																		Line:   86,
																	},
																},
															},
															Name: "range",
														},
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   87,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 51,
															Line:   85,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   87,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 12,
																	Line:   87,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   87,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "fn: (r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 12,
																		Line:   87,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 14,
																			Line:   87,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 12,
																			Line:   87,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   87,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "(r) => r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 16,
																			Line:   87,
																		},
																	},
																},
																Body: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   87,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "r._measurement == \"cpu\"",
																			Start: ast.Position{
																				Column: 23,
																				Line:   87,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 37,
																					Line:   87,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "r._measurement",
																				Start: ast.Position{
																					Column: 23,
																					Line:   87,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 24,
																						Line:   87,
																					},
																					File:   "aggregate_count_regex_wildcard_test.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 23,
																						Line:   87,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 37,
																						Line:   87,
																					},
																					File:   "aggregate_count_regex_wildcard_test.flux",
																					Source: "_measurement",
																					Start: ast.Position{
																						Column: 25,
																						Line:   87,
																					},
																				},
																			},
																			Name: "_measurement",
																		},
																	},
																	Operator: 17,
																	Right: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 46,
																					Line:   87,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "\"cpu\"",
																				Start: ast.Position{
																					Column: 41,
																					Line:   87,
																				},
																			},
																		},
																		Value: "cpu",
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 18,
																				Line:   87,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 17,
																				Line:   87,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 18,
																					Line:   87,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 17,
																					Line:   87,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   87,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "filter(fn: (r) => r._measurement == \"cpu\")",
															Start: ast.Position{
																Column: 5,
																Line:   87,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 11,
																	Line:   87,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "filter",
																Start: ast.Position{
																	Column: 5,
																	Line:   87,
																},
															},
														},
														Name: "filter",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   88,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)",
													Start: ast.Position{
														Column: 51,
														Line:   85,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   88,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "fn: (r) => r._field =~ /val/",
															Start: ast.Position{
																Column: 12,
																Line:   88,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   88,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "fn: (r) => r._field =~ /val/",
																Start: ast.Position{
																	Column: 12,
																	Line:   88,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 14,
																		Line:   88,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 12,
																		Line:   88,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   88,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "(r) => r._field =~ /val/",
																	Start: ast.Position{
																		Column: 16,
																		Line:   88,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 40,
																			Line:   88,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "r._field =~ /val/",
																		Start: ast.Position{
																			Column: 23,
																			Line:   88,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 31,
																				Line:   88,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 23,
																				Line:   88,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 24,
																					Line:   88,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 23,
																					Line:   88,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 31,
																					Line:   88,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 25,
																					Line:   88,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
																Operator: 19,
																Right: &ast.RegexpLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 40,
																				Line:   88,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "/val/",
																			Start: ast.Position{
																				Column: 35,
																				Line:   88,
																			},
																		},
																	},
																	Value: regexp.MustCompile("val"),
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   88,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   88,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 18,
																				Line:   88,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 17,
																				Line:   88,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   88,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "filter(fn: (r) => r._field =~ /val/)",
														Start: ast.Position{
															Column: 5,
															Line:   88,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   88,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 5,
																Line:   88,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   89,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")",
												Start: ast.Position{
													Column: 51,
													Line:   85,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 68,
															Line:   89,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\"",
														Start: ast.Position{
															Column: 11,
															Line:   89,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   89,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "columns: [\"_measurement\", \"_field\", \"_start\"]",
															Start: ast.Position{
																Column: 11,
																Line:   89,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   89,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 11,
																	Line:   89,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   89,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "[\"_measurement\", \"_field\", \"_start\"]",
																Start: ast.Position{
																	Column: 20,
																	Line:   89,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 35,
																		Line:   89,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "\"_measurement\"",
																	Start: ast.Position{
																		Column: 21,
																		Line:   89,
																	},
																},
															},
															Value: "_measurement",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 45,
																		Line:   89,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "\"_field\"",
																	Start: ast.Position{
																		Column: 37,
																		Line:   89,
																	},
																},
															},
															Value: "_field",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 55,
																		Line:   89,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "\"_start\"",
																	Start: ast.Position{
																		Column: 47,
																		Line:   89,
																	},
																},
															},
															Value: "_start",
														}},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   89,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "mode: \"by\"",
															Start: ast.Position{
																Column: 58,
																Line:   89,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 62,
																	Line:   89,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "mode",
																Start: ast.Position{
																	Column: 58,
																	Line:   89,
																},
															},
														},
														Name: "mode",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 68,
																	Line:   89,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "\"by\"",
																Start: ast.Position{
																	Column: 64,
																	Line:   89,
																},
															},
														},
														Value: "by",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   89,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")",
													Start: ast.Position{
														Column: 5,
														Line:   89,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 10,
															Line:   89,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "group",
														Start: ast.Position{
															Column: 5,
															Line:   89,
														},
													},
												},
												Name: "group",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   90,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()",
											Start: ast.Position{
												Column: 51,
												Line:   85,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   90,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "count()",
												Start: ast.Position{
													Column: 5,
													Line:   90,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   90,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "count",
													Start: ast.Position{
														Column: 5,
														Line:   90,
													},
												},
											},
											Name: "count",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   91,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))",
										Start: ast.Position{
											Column: 51,
											Line:   85,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 75,
													Line:   91,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field})",
												Start: ast.Position{
													Column: 9,
													Line:   91,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   91,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field})",
													Start: ast.Position{
														Column: 9,
														Line:   91,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   91,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 9,
															Line:   91,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 75,
															Line:   91,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "(r) => ({r with _time: r._start, _field: \"count_\" + r._field})",
														Start: ast.Position{
															Column: 13,
															Line:   91,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 75,
																Line:   91,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "({r with _time: r._start, _field: \"count_\" + r._field})",
															Start: ast.Position{
																Column: 20,
																Line:   91,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 74,
																	Line:   91,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "{r with _time: r._start, _field: \"count_\" + r._field}",
																Start: ast.Position{
																	Column: 21,
																	Line:   91,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   91,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "_time: r._start",
																	Start: ast.Position{
																		Column: 29,
																		Line:   91,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   91,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 29,
																			Line:   91,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   91,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "r._start",
																		Start: ast.Position{
																			Column: 36,
																			Line:   91,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   91,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 36,
																				Line:   91,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 44,
																				Line:   91,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "_start",
																			Start: ast.Position{
																				Column: 38,
																				Line:   91,
																			},
																		},
																	},
																	Name: "_start",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 73,
																		Line:   91,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "_field: \"count_\" + r._field",
																	Start: ast.Position{
																		Column: 46,
																		Line:   91,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 52,
																			Line:   91,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 46,
																			Line:   91,
																		},
																	},
																},
																Name: "_field",
															},
															Value: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 73,
																			Line:   91,
																		},
																		File:   "aggregate_count_regex_wildcard_test.flux",
																		Source: "\"count_\" + r._field",
																		Start: ast.Position{
																			Column: 54,
																			Line:   91,
																		},
																	},
																},
																Left: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 62,
																				Line:   91,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "\"count_\"",
																			Start: ast.Position{
																				Column: 54,
																				Line:   91,
																			},
																		},
																	},
																	Value: "count_",
																},
																Operator: 5,
																Right: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 73,
																				Line:   91,
																			},
																			File:   "aggregate_count_regex_wildcard_test.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 65,
																				Line:   91,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 66,
																					Line:   91,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 65,
																					Line:   91,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 73,
																					Line:   91,
																				},
																				File:   "aggregate_count_regex_wildcard_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 67,
																					Line:   91,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 23,
																		Line:   91,
																	},
																	File:   "aggregate_count_regex_wildcard_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 22,
																		Line:   91,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   91,
															},
															File:   "aggregate_count_regex_wildcard_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 14,
																Line:   91,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   91,
																},
																File:   "aggregate_count_regex_wildcard_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 14,
																	Line:   91,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   91,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))",
											Start: ast.Position{
												Column: 5,
												Line:   91,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   91,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 5,
													Line:   91,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   92,
									},
									File:   "aggregate_count_regex_wildcard_test.flux",
									Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()",
									Start: ast.Position{
										Column: 51,
										Line:   85,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   92,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "v1.fieldsAsCols()",
										Start: ast.Position{
											Column: 5,
											Line:   92,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   92,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "v1.fieldsAsCols",
											Start: ast.Position{
												Column: 5,
												Line:   92,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   92,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "v1",
												Start: ast.Position{
													Column: 5,
													Line:   92,
												},
											},
										},
										Name: "v1",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   92,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "fieldsAsCols",
												Start: ast.Position{
													Column: 8,
													Line:   92,
												},
											},
										},
										Name: "fieldsAsCols",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   93,
								},
								File:   "aggregate_count_regex_wildcard_test.flux",
								Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})",
								Start: ast.Position{
									Column: 51,
									Line:   85,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   93,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "columns: {_time: \"time\"}",
										Start: ast.Position{
											Column: 12,
											Line:   93,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   93,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "columns: {_time: \"time\"}",
											Start: ast.Position{
												Column: 12,
												Line:   93,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   93,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   93,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   93,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "{_time: \"time\"}",
												Start: ast.Position{
													Column: 21,
													Line:   93,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   93,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "_time: \"time\"",
													Start: ast.Position{
														Column: 22,
														Line:   93,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   93,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "_time",
														Start: ast.Position{
															Column: 22,
															Line:   93,
														},
													},
												},
												Name: "_time",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   93,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "\"time\"",
														Start: ast.Position{
															Column: 29,
															Line:   93,
														},
													},
												},
												Value: "time",
											},
										}},
										With: nil,
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   93,
									},
									File:   "aggregate_count_regex_wildcard_test.flux",
									Source: "rename(columns: {_time: \"time\"})",
									Start: ast.Position{
										Column: 5,
										Line:   93,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   93,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   93,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   94,
							},
							File:   "aggregate_count_regex_wildcard_test.flux",
							Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field =~ /val/)\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 51,
								Line:   85,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   94,
									},
									File:   "aggregate_count_regex_wildcard_test.flux",
									Source: "columns: [\"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   94,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   94,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "columns: [\"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   94,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   94,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   94,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   94,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "[\"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   94,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   94,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 20,
													Line:   94,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   94,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 30,
													Line:   94,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   94,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 39,
													Line:   94,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   94,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 49,
													Line:   94,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   94,
								},
								File:   "aggregate_count_regex_wildcard_test.flux",
								Source: "drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   94,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   94,
									},
									File:   "aggregate_count_regex_wildcard_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   94,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   85,
							},
							File:   "aggregate_count_regex_wildcard_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 37,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   85,
								},
								File:   "aggregate_count_regex_wildcard_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 37,
									Line:   85,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   85,
							},
							File:   "aggregate_count_regex_wildcard_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 44,
								Line:   85,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   100,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "_aggregate_count_regex_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_regex_wildcard,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   96,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   96,
							},
							File:   "aggregate_count_regex_wildcard_test.flux",
							Source: "_aggregate_count_regex_wildcard",
							Start: ast.Position{
								Column: 6,
								Line:   96,
							},
						},
					},
					Name: "_aggregate_count_regex_wildcard",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   100,
							},
							File:   "aggregate_count_regex_wildcard_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_regex_wildcard,\n})",
							Start: ast.Position{
								Column: 40,
								Line:   96,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   100,
								},
								File:   "aggregate_count_regex_wildcard_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_regex_wildcard,\n})",
								Start: ast.Position{
									Column: 46,
									Line:   96,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   100,
									},
									File:   "aggregate_count_regex_wildcard_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_regex_wildcard,\n}",
									Start: ast.Position{
										Column: 47,
										Line:   96,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   97,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   97,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   97,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   97,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   97,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   97,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   97,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   97,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   97,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   97,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   97,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   97,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   97,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   97,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   97,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   97,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   97,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   97,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   97,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   97,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   98,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   98,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   98,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   98,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   98,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   98,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   98,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   98,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   98,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   98,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   98,
														},
														File:   "aggregate_count_regex_wildcard_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   98,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   98,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   98,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   98,
												},
												File:   "aggregate_count_regex_wildcard_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   98,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   98,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   98,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   98,
													},
													File:   "aggregate_count_regex_wildcard_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   98,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   99,
										},
										File:   "aggregate_count_regex_wildcard_test.flux",
										Source: "fn: t_aggregate_count_regex_wildcard",
										Start: ast.Position{
											Column: 2,
											Line:   99,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   99,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   99,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   99,
											},
											File:   "aggregate_count_regex_wildcard_test.flux",
											Source: "t_aggregate_count_regex_wildcard",
											Start: ast.Position{
												Column: 6,
												Line:   99,
											},
										},
									},
									Name: "t_aggregate_count_regex_wildcard",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   100,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "test _aggregate_count_regex_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_regex_wildcard,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   96,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   5,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "import \"influxdata/influxdb/v1\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   5,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "\"influxdata/influxdb/v1\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "influxdata/influxdb/v1",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregate_count_regex_wildcard_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregate_count_regex_wildcard_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregate_count_regex_wildcard_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   97,
				},
				File:   "aggregate_count_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,60\n\"\n\n// SELECT count(\"value\") FROM cpu\nt_aggregate_count = (tables=<-) => tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   6,
						},
						File:   "aggregate_count_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   6,
							},
							File:   "aggregate_count_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   6,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   6,
							},
							File:   "aggregate_count_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   6,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   6,
								},
								File:   "aggregate_count_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   6,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   6,
					},
					File:   "aggregate_count_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   73,
					},
					File:   "aggregate_count_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   8,
						},
						File:   "aggregate_count_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   73,
						},
						File:   "aggregate_count_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   81,
					},
					File:   "aggregate_count_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,60\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   75,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   75,
						},
						File:   "aggregate_count_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   75,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   81,
						},
						File:   "aggregate_count_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,60\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   75,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,60\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   91,
					},
					File:   "aggregate_count_test.flux",
					Source: "t_aggregate_count = (tables=<-) => tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   84,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   84,
						},
						File:   "aggregate_count_test.flux",
						Source: "t_aggregate_count",
						Start: ast.Position{
							Column: 1,
							Line:   84,
						},
					},
				},
				Name: "t_aggregate_count",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   91,
						},
						File:   "aggregate_count_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 21,
							Line:   84,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   84,
														},
														File:   "aggregate_count_test.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 36,
															Line:   84,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   85,
													},
													File:   "aggregate_count_test.flux",
													Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)",
													Start: ast.Position{
														Column: 36,
														Line:   84,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 58,
																Line:   85,
															},
															File:   "aggregate_count_test.flux",
															Source: "start: influxql.minTime, stop: influxql.maxTime",
															Start: ast.Position{
																Column: 11,
																Line:   85,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 34,
																	Line:   85,
																},
																File:   "aggregate_count_test.flux",
																Source: "start: influxql.minTime",
																Start: ast.Position{
																	Column: 11,
																	Line:   85,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 16,
																		Line:   85,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "start",
																	Start: ast.Position{
																		Column: 11,
																		Line:   85,
																	},
																},
															},
															Name: "start",
														},
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   85,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "influxql.minTime",
																	Start: ast.Position{
																		Column: 18,
																		Line:   85,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 26,
																			Line:   85,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "influxql",
																		Start: ast.Position{
																			Column: 18,
																			Line:   85,
																		},
																	},
																},
																Name: "influxql",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   85,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "minTime",
																		Start: ast.Position{
																			Column: 27,
																			Line:   85,
																		},
																	},
																},
																Name: "minTime",
															},
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   85,
																},
																File:   "aggregate_count_test.flux",
																Source: "stop: influxql.maxTime",
																Start: ast.Position{
																	Column: 36,
																	Line:   85,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   85,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "stop",
																	Start: ast.Position{
																		Column: 36,
																		Line:   85,
																	},
																},
															},
															Name: "stop",
														},
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 58,
																		Line:   85,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "influxql.maxTime",
																	Start: ast.Position{
																		Column: 42,
																		Line:   85,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   85,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "influxql",
																		Start: ast.Position{
																			Column: 42,
																			Line:   85,
																		},
																	},
																},
																Name: "influxql",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 58,
																			Line:   85,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "maxTime",
																		Start: ast.Position{
																			Column: 51,
																			Line:   85,
																		},
																	},
																},
																Name: "maxTime",
															},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   85,
														},
														File:   "aggregate_count_test.flux",
														Source: "range(start: influxql.minTime, stop: influxql.maxTime)",
														Start: ast.Position{
															Column: 5,
															Line:   85,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   85,
															},
															File:   "aggregate_count_test.flux",
															Source: "range",
															Start: ast.Position{
																Column: 5,
																Line:   85,
															},
														},
													},
													Name: "range",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   86,
												},
												File:   "aggregate_count_test.flux",
												Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
												Start: ast.Position{
													Column: 36,
													Line:   84,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   86,
														},
														File:   "aggregate_count_test.flux",
														Source: "fn: (r) => r._measurement == \"cpu\"",
														Start: ast.Position{
															Column: 12,
															Line:   86,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   86,
															},
															File:   "aggregate_count_test.flux",
															Source: "fn: (r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 12,
																Line:   86,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   86,
																},
																File:   "aggregate_count_test.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 12,
																	Line:   86,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   86,
																},
																File:   "aggregate_count_test.flux",
																Source: "(r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 16,
																	Line:   86,
																},
															},
														},
														Body: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   86,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 23,
																		Line:   86,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   86,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 23,
																			Line:   86,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   86,
																			},
																			File:   "aggregate_count_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 23,
																				Line:   86,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   86,
																			},
																			File:   "aggregate_count_test.flux",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 25,
																				Line:   86,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
															Operator: 17,
															Right: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   86,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "\"cpu\"",
																		Start: ast.Position{
																			Column: 41,
																			Line:   86,
																		},
																	},
																},
																Value: "cpu",
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   86,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   86,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   86,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   86,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   86,
													},
													File:   "aggregate_count_test.flux",
													Source: "filter(fn: (r) => r._measurement == \"cpu\")",
													Start: ast.Position{
														Column: 5,
														Line:   86,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   86,
														},
														File:   "aggregate_count_test.flux",
														Source: "filter",
														Start: ast.Position{
															Column: 5,
															Line:   86,
														},
													},
												},
												Name: "filter",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   87,
											},
											File:   "aggregate_count_test.flux",
											Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")",
											Start: ast.Position{
												Column: 36,
												Line:   84,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   87,
													},
													File:   "aggregate_count_test.flux",
													Source: "fn: (r) => r._field == \"value\"",
													Start: ast.Position{
														Column: 12,
														Line:   87,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   87,
														},
														File:   "aggregate_count_test.flux",
														Source: "fn: (r) => r._field == \"value\"",
														Start: ast.Position{
															Column: 12,
															Line:   87,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   87,
															},
															File:   "aggregate_count_test.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   87,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   87,
															},
															File:   "aggregate_count_test.flux",
															Source: "(r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 16,
																Line:   87,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   87,
																},
																File:   "aggregate_count_test.flux",
																Source: "r._field == \"value\"",
																Start: ast.Position{
																	Column: 23,
																	Line:   87,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   87,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "r._field",
																	Start: ast.Position{
																		Column: 23,
																		Line:   87,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   87,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 23,
																			Line:   87,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   87,
																		},
																		File:   "aggregate_count_test.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 25,
																			Line:   87,
																		},
																	},
																},
																Name: "_field",
															},
														},
														Operator: 17,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   87,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "\"value\"",
																	Start: ast.Position{
																		Column: 35,
																		Line:   87,
																	},
																},
															},
															Value: "value",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   87,
																},
																File:   "aggregate_count_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   87,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   87,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   87,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   87,
												},
												File:   "aggregate_count_test.flux",
												Source: "filter(fn: (r) => r._field == \"value\")",
												Start: ast.Position{
													Column: 5,
													Line:   87,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   87,
													},
													File:   "aggregate_count_test.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 5,
														Line:   87,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   88,
										},
										File:   "aggregate_count_test.flux",
										Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
										Start: ast.Position{
											Column: 36,
											Line:   84,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   88,
												},
												File:   "aggregate_count_test.flux",
												Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
												Start: ast.Position{
													Column: 11,
													Line:   88,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   88,
													},
													File:   "aggregate_count_test.flux",
													Source: "columns: [\"_measurement\", \"_field\"]",
													Start: ast.Position{
														Column: 11,
														Line:   88,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   88,
														},
														File:   "aggregate_count_test.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 11,
															Line:   88,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   88,
														},
														File:   "aggregate_count_test.flux",
														Source: "[\"_measurement\", \"_field\"]",
														Start: ast.Position{
															Column: 20,
															Line:   88,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   88,
															},
															File:   "aggregate_count_test.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 21,
																Line:   88,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   88,
															},
															File:   "aggregate_count_test.flux",
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 37,
																Line:   88,
															},
														},
													},
													Value: "_field",
												}},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   88,
													},
													File:   "aggregate_count_test.flux",
													Source: "mode: \"by\"",
													Start: ast.Position{
														Column: 48,
														Line:   88,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   88,
														},
														File:   "aggregate_count_test.flux",
														Source: "mode",
														Start: ast.Position{
															Column: 48,
															Line:   88,
														},
													},
												},
												Name: "mode",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   88,
														},
														File:   "aggregate_count_test.flux",
														Source: "\"by\"",
														Start: ast.Position{
															Column: 54,
															Line:   88,
														},
													},
												},
												Value: "by",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   88,
											},
											File:   "aggregate_count_test.flux",
											Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
											Start: ast.Position{
												Column: 5,
												Line:   88,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   88,
												},
												File:   "aggregate_count_test.flux",
												Source: "group",
												Start: ast.Position{
													Column: 5,
													Line:   88,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   89,
									},
									File:   "aggregate_count_test.flux",
									Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()",
									Start: ast.Position{
										Column: 36,
										Line:   84,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   89,
										},
										File:   "aggregate_count_test.flux",
										Source: "count()",
										Start: ast.Position{
											Column: 5,
											Line:   89,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   89,
											},
											File:   "aggregate_count_test.flux",
											Source: "count",
											Start: ast.Position{
												Column: 5,
												Line:   89,
											},
										},
									},
									Name: "count",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   90,
								},
								File:   "aggregate_count_test.flux",
								Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))",
								Start: ast.Position{
									Column: 36,
									Line:   84,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   90,
										},
										File:   "aggregate_count_test.flux",
										Source: "fn: (r) => ({r with time: influxql.epoch, count: r._value})",
										Start: ast.Position{
											Column: 9,
											Line:   90,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   90,
											},
											File:   "aggregate_count_test.flux",
											Source: "fn: (r) => ({r with time: influxql.epoch, count: r._value})",
											Start: ast.Position{
												Column: 9,
												Line:   90,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   90,
												},
												File:   "aggregate_count_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 9,
													Line:   90,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   90,
												},
												File:   "aggregate_count_test.flux",
												Source: "(r) => ({r with time: influxql.epoch, count: r._value})",
												Start: ast.Position{
													Column: 13,
													Line:   90,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 68,
														Line:   90,
													},
													File:   "aggregate_count_test.flux",
													Source: "({r with time: influxql.epoch, count: r._value})",
													Start: ast.Position{
														Column: 20,
														Line:   90,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 67,
															Line:   90,
														},
														File:   "aggregate_count_test.flux",
														Source: "{r with time: influxql.epoch, count: r._value}",
														Start: ast.Position{
															Column: 21,
															Line:   90,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   90,
															},
															File:   "aggregate_count_test.flux",
															Source: "time: influxql.epoch",
															Start: ast.Position{
																Column: 29,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   90,
																},
																File:   "aggregate_count_test.flux",
																Source: "time",
																Start: ast.Position{
																	Column: 29,
																	Line:   90,
																},
															},
														},
														Name: "time",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   90,
																},
																File:   "aggregate_count_test.flux",
																Source: "influxql.epoch",
																Start: ast.Position{
																	Column: 35,
																	Line:   90,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   90,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "influxql",
																	Start: ast.Position{
																		Column: 35,
																		Line:   90,
																	},
																},
															},
															Name: "influxql",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   90,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "epoch",
																	Start: ast.Position{
																		Column: 44,
																		Line:   90,
																	},
																},
															},
															Name: "epoch",
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 66,
																Line:   90,
															},
															File:   "aggregate_count_test.flux",
															Source: "count: r._value",
															Start: ast.Position{
																Column: 51,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   90,
																},
																File:   "aggregate_count_test.flux",
																Source: "count",
																Start: ast.Position{
																	Column: 51,
																	Line:   90,
																},
															},
														},
														Name: "count",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 66,
																	Line:   90,
																},
																File:   "aggregate_count_test.flux",
																Source: "r._value",
																Start: ast.Position{
																	Column: 58,
																	Line:   90,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   90,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 58,
																		Line:   90,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 66,
																		Line:   90,
																	},
																	File:   "aggregate_count_test.flux",
																	Source: "_value",
																	Start: ast.Position{
																		Column: 60,
																		Line:   90,
																	},
																},
															},
															Name: "_value",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   90,
															},
															File:   "aggregate_count_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 22,
																Line:   90,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   90,
													},
													File:   "aggregate_count_test.flux",
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   90,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   90,
														},
														File:   "aggregate_count_test.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   90,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   90,
									},
									File:   "aggregate_count_test.flux",
									Source: "map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))",
									Start: ast.Position{
										Column: 5,
										Line:   90,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   90,
										},
										File:   "aggregate_count_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 5,
											Line:   90,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   91,
							},
							File:   "aggregate_count_test.flux",
							Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 36,
								Line:   84,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   91,
									},
									File:   "aggregate_count_test.flux",
									Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   91,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   91,
										},
										File:   "aggregate_count_test.flux",
										Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   91,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   91,
											},
											File:   "aggregate_count_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   91,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   91,
											},
											File:   "aggregate_count_test.flux",
											Source: "[\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   91,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   91,
												},
												File:   "aggregate_count_test.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   91,
												},
											},
										},
										Value: "_time",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   91,
												},
												File:   "aggregate_count_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 29,
													Line:   91,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   91,
												},
												File:   "aggregate_count_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 39,
													Line:   91,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   91,
												},
												File:   "aggregate_count_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 48,
													Line:   91,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   91,
												},
												File:   "aggregate_count_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 58,
													Line:   91,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   91,
								},
								File:   "aggregate_count_test.flux",
								Source: "drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   91,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   91,
									},
									File:   "aggregate_count_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   91,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   84,
							},
							File:   "aggregate_count_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 22,
								Line:   84,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   84,
								},
								File:   "aggregate_count_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 22,
									Line:   84,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   84,
							},
							File:   "aggregate_count_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 29,
								Line:   84,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   97,
						},
						File:   "aggregate_count_test.flux",
						Source: "_aggregate_count = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   93,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   93,
							},
							File:   "aggregate_count_test.flux",
							Source: "_aggregate_count",
							Start: ast.Position{
								Column: 6,
								Line:   93,
							},
						},
					},
					Name: "_aggregate_count",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   97,
							},
							File:   "aggregate_count_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count,\n})",
							Start: ast.Position{
								Column: 25,
								Line:   93,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   97,
								},
								File:   "aggregate_count_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count,\n})",
								Start: ast.Position{
									Column: 31,
									Line:   93,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   97,
									},
									File:   "aggregate_count_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count,\n}",
									Start: ast.Position{
										Column: 32,
										Line:   93,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   94,
										},
										File:   "aggregate_count_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   94,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   94,
											},
											File:   "aggregate_count_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   94,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   94,
												},
												File:   "aggregate_count_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   94,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   94,
													},
													File:   "aggregate_count_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   94,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   94,
														},
														File:   "aggregate_count_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   94,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   94,
														},
														File:   "aggregate_count_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   94,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   94,
											},
											File:   "aggregate_count_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   94,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   94,
												},
												File:   "aggregate_count_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   94,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   94,
													},
													File:   "aggregate_count_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   94,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   94,
													},
													File:   "aggregate_count_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   94,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   95,
										},
										File:   "aggregate_count_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   95,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   95,
											},
											File:   "aggregate_count_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   95,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   95,
												},
												File:   "aggregate_count_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   95,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   95,
													},
													File:   "aggregate_count_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   95,
														},
														File:   "aggregate_count_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   95,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   95,
														},
														File:   "aggregate_count_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   95,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   95,
											},
											File:   "aggregate_count_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   95,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   95,
												},
												File:   "aggregate_count_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   95,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   95,
													},
													File:   "aggregate_count_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   95,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   95,
													},
													File:   "aggregate_count_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   95,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   96,
										},
										File:   "aggregate_count_test.flux",
										Source: "fn: t_aggregate_count",
										Start: ast.Position{
											Column: 2,
											Line:   96,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   96,
											},
											File:   "aggregate_count_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   96,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   96,
											},
											File:   "aggregate_count_test.flux",
											Source: "t_aggregate_count",
											Start: ast.Position{
												Column: 6,
												Line:   96,
											},
										},
									},
									Name: "t_aggregate_count",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   97,
					},
					File:   "aggregate_count_test.flux",
					Source: "test _aggregate_count = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   93,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregate_count_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregate_count_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregate_count_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregate_count_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregate_count_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregate_count_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregate_count_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   99,
				},
				File:   "aggregate_count_wildcard_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\nimport \"influxdata/influxdb/v1\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n\"\n\n// SELECT count(*) FROM cpu WHERE time >= now() - 1m\nt_aggregate_count_wildcard = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_wildcard,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   7,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   7,
							},
							File:   "aggregate_count_wildcard_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   7,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   7,
							},
							File:   "aggregate_count_wildcard_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   7,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   7,
								},
								File:   "aggregate_count_wildcard_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   7,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   7,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   74,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   9,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   74,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   9,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   82,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   76,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   76,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   76,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   82,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   76,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count_value\n,,0,cpu,2019-10-24T19:06:30Z,60\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 59,
						Line:   93,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "t_aggregate_count_wildcard = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   85,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "t_aggregate_count_wildcard",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "t_aggregate_count_wildcard",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 59,
							Line:   93,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 30,
							Line:   85,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   85,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 45,
																Line:   85,
															},
														},
													},
													Name: "tables",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   86,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "tables\n\t|> range(start: -1m)",
														Start: ast.Position{
															Column: 45,
															Line:   85,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   86,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "start: -1m",
																Start: ast.Position{
																	Column: 11,
																	Line:   86,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   86,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "start: -1m",
																	Start: ast.Position{
																		Column: 11,
																		Line:   86,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 16,
																			Line:   86,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "start",
																		Start: ast.Position{
																			Column: 11,
																			Line:   86,
																		},
																	},
																},
																Name: "start",
															},
															Value: &ast.UnaryExpression{
																Argument: &ast.DurationLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 21,
																				Line:   86,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "1m",
																			Start: ast.Position{
																				Column: 19,
																				Line:   86,
																			},
																		},
																	},
																	Values: []ast.Duration{ast.Duration{
																		Magnitude: int64(1),
																		Unit:      "m",
																	}},
																},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   86,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "-1m",
																		Start: ast.Position{
																			Column: 18,
																			Line:   86,
																		},
																	},
																},
																Operator: 6,
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   86,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "range(start: -1m)",
															Start: ast.Position{
																Column: 5,
																Line:   86,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   86,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "range",
																Start: ast.Position{
																	Column: 5,
																	Line:   86,
																},
															},
														},
														Name: "range",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   87,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
													Start: ast.Position{
														Column: 45,
														Line:   85,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   87,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "fn: (r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 12,
																Line:   87,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   87,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 12,
																	Line:   87,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 14,
																		Line:   87,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 12,
																		Line:   87,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   87,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "(r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 16,
																		Line:   87,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   87,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 23,
																			Line:   87,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   87,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "r._measurement",
																			Start: ast.Position{
																				Column: 23,
																				Line:   87,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 24,
																					Line:   87,
																				},
																				File:   "aggregate_count_wildcard_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 23,
																					Line:   87,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 37,
																					Line:   87,
																				},
																				File:   "aggregate_count_wildcard_test.flux",
																				Source: "_measurement",
																				Start: ast.Position{
																					Column: 25,
																					Line:   87,
																				},
																			},
																		},
																		Name: "_measurement",
																	},
																},
																Operator: 17,
																Right: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   87,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "\"cpu\"",
																			Start: ast.Position{
																				Column: 41,
																				Line:   87,
																			},
																		},
																	},
																	Value: "cpu",
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   87,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   87,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 18,
																				Line:   87,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 17,
																				Line:   87,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   87,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 5,
															Line:   87,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   87,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 5,
																Line:   87,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   88,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")",
												Start: ast.Position{
													Column: 45,
													Line:   85,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 68,
															Line:   88,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\"",
														Start: ast.Position{
															Column: 11,
															Line:   88,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   88,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "columns: [\"_measurement\", \"_field\", \"_start\"]",
															Start: ast.Position{
																Column: 11,
																Line:   88,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   88,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 11,
																	Line:   88,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   88,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "[\"_measurement\", \"_field\", \"_start\"]",
																Start: ast.Position{
																	Column: 20,
																	Line:   88,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 35,
																		Line:   88,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "\"_measurement\"",
																	Start: ast.Position{
																		Column: 21,
																		Line:   88,
																	},
																},
															},
															Value: "_measurement",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 45,
																		Line:   88,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "\"_field\"",
																	Start: ast.Position{
																		Column: 37,
																		Line:   88,
																	},
																},
															},
															Value: "_field",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 55,
																		Line:   88,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "\"_start\"",
																	Start: ast.Position{
																		Column: 47,
																		Line:   88,
																	},
																},
															},
															Value: "_start",
														}},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   88,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "mode: \"by\"",
															Start: ast.Position{
																Column: 58,
																Line:   88,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 62,
																	Line:   88,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "mode",
																Start: ast.Position{
																	Column: 58,
																	Line:   88,
																},
															},
														},
														Name: "mode",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 68,
																	Line:   88,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "\"by\"",
																Start: ast.Position{
																	Column: 64,
																	Line:   88,
																},
															},
														},
														Value: "by",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   88,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")",
													Start: ast.Position{
														Column: 5,
														Line:   88,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 10,
															Line:   88,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "group",
														Start: ast.Position{
															Column: 5,
															Line:   88,
														},
													},
												},
												Name: "group",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   89,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()",
											Start: ast.Position{
												Column: 45,
												Line:   85,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   89,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "count()",
												Start: ast.Position{
													Column: 5,
													Line:   89,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   89,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "count",
													Start: ast.Position{
														Column: 5,
														Line:   89,
													},
												},
											},
											Name: "count",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   90,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))",
										Start: ast.Position{
											Column: 45,
											Line:   85,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 75,
													Line:   90,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field})",
												Start: ast.Position{
													Column: 9,
													Line:   90,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   90,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field})",
													Start: ast.Position{
														Column: 9,
														Line:   90,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   90,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 9,
															Line:   90,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 75,
															Line:   90,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "(r) => ({r with _time: r._start, _field: \"count_\" + r._field})",
														Start: ast.Position{
															Column: 13,
															Line:   90,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 75,
																Line:   90,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "({r with _time: r._start, _field: \"count_\" + r._field})",
															Start: ast.Position{
																Column: 20,
																Line:   90,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 74,
																	Line:   90,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "{r with _time: r._start, _field: \"count_\" + r._field}",
																Start: ast.Position{
																	Column: 21,
																	Line:   90,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   90,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "_time: r._start",
																	Start: ast.Position{
																		Column: 29,
																		Line:   90,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   90,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 29,
																			Line:   90,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   90,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "r._start",
																		Start: ast.Position{
																			Column: 36,
																			Line:   90,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   90,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 36,
																				Line:   90,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 44,
																				Line:   90,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "_start",
																			Start: ast.Position{
																				Column: 38,
																				Line:   90,
																			},
																		},
																	},
																	Name: "_start",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 73,
																		Line:   90,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "_field: \"count_\" + r._field",
																	Start: ast.Position{
																		Column: 46,
																		Line:   90,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 52,
																			Line:   90,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 46,
																			Line:   90,
																		},
																	},
																},
																Name: "_field",
															},
															Value: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 73,
																			Line:   90,
																		},
																		File:   "aggregate_count_wildcard_test.flux",
																		Source: "\"count_\" + r._field",
																		Start: ast.Position{
																			Column: 54,
																			Line:   90,
																		},
																	},
																},
																Left: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 62,
																				Line:   90,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "\"count_\"",
																			Start: ast.Position{
																				Column: 54,
																				Line:   90,
																			},
																		},
																	},
																	Value: "count_",
																},
																Operator: 5,
																Right: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 73,
																				Line:   90,
																			},
																			File:   "aggregate_count_wildcard_test.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 65,
																				Line:   90,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 66,
																					Line:   90,
																				},
																				File:   "aggregate_count_wildcard_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 65,
																					Line:   90,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 73,
																					Line:   90,
																				},
																				File:   "aggregate_count_wildcard_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 67,
																					Line:   90,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 23,
																		Line:   90,
																	},
																	File:   "aggregate_count_wildcard_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 22,
																		Line:   90,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   90,
															},
															File:   "aggregate_count_wildcard_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 14,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   90,
																},
																File:   "aggregate_count_wildcard_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 14,
																	Line:   90,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   90,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))",
											Start: ast.Position{
												Column: 5,
												Line:   90,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   90,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 5,
													Line:   90,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   91,
									},
									File:   "aggregate_count_wildcard_test.flux",
									Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()",
									Start: ast.Position{
										Column: 45,
										Line:   85,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   91,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "v1.fieldsAsCols()",
										Start: ast.Position{
											Column: 5,
											Line:   91,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   91,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "v1.fieldsAsCols",
											Start: ast.Position{
												Column: 5,
												Line:   91,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   91,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "v1",
												Start: ast.Position{
													Column: 5,
													Line:   91,
												},
											},
										},
										Name: "v1",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   91,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "fieldsAsCols",
												Start: ast.Position{
													Column: 8,
													Line:   91,
												},
											},
										},
										Name: "fieldsAsCols",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   92,
								},
								File:   "aggregate_count_wildcard_test.flux",
								Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})",
								Start: ast.Position{
									Column: 45,
									Line:   85,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   92,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "columns: {_time: \"time\"}",
										Start: ast.Position{
											Column: 12,
											Line:   92,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   92,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "columns: {_time: \"time\"}",
											Start: ast.Position{
												Column: 12,
												Line:   92,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   92,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 12,
													Line:   92,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   92,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "{_time: \"time\"}",
												Start: ast.Position{
													Column: 21,
													Line:   92,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   92,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "_time: \"time\"",
													Start: ast.Position{
														Column: 22,
														Line:   92,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   92,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "_time",
														Start: ast.Position{
															Column: 22,
															Line:   92,
														},
													},
												},
												Name: "_time",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   92,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "\"time\"",
														Start: ast.Position{
															Column: 29,
															Line:   92,
														},
													},
												},
												Value: "time",
											},
										}},
										With: nil,
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   92,
									},
									File:   "aggregate_count_wildcard_test.flux",
									Source: "rename(columns: {_time: \"time\"})",
									Start: ast.Position{
										Column: 5,
										Line:   92,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   92,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "rename",
										Start: ast.Position{
											Column: 5,
											Line:   92,
										},
									},
								},
								Name: "rename",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   93,
							},
							File:   "aggregate_count_wildcard_test.flux",
							Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> group(columns: [\"_measurement\", \"_field\", \"_start\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with _time: r._start, _field: \"count_\" + r._field}))\n\t|> v1.fieldsAsCols()\n\t|> rename(columns: {_time: \"time\"})\n\t|> drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 45,
								Line:   85,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   93,
									},
									File:   "aggregate_count_wildcard_test.flux",
									Source: "columns: [\"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   93,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   93,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "columns: [\"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   93,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   93,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   93,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   93,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "[\"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   93,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   93,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 20,
													Line:   93,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   93,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 30,
													Line:   93,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   93,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 39,
													Line:   93,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   93,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 49,
													Line:   93,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   93,
								},
								File:   "aggregate_count_wildcard_test.flux",
								Source: "drop(columns: [\"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   93,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   93,
									},
									File:   "aggregate_count_wildcard_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   93,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   85,
							},
							File:   "aggregate_count_wildcard_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 31,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   85,
								},
								File:   "aggregate_count_wildcard_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 31,
									Line:   85,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   85,
							},
							File:   "aggregate_count_wildcard_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 38,
								Line:   85,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   99,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "_aggregate_count_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_wildcard,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   95,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   95,
							},
							File:   "aggregate_count_wildcard_test.flux",
							Source: "_aggregate_count_wildcard",
							Start: ast.Position{
								Column: 6,
								Line:   95,
							},
						},
					},
					Name: "_aggregate_count_wildcard",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   99,
							},
							File:   "aggregate_count_wildcard_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_wildcard,\n})",
							Start: ast.Position{
								Column: 34,
								Line:   95,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   99,
								},
								File:   "aggregate_count_wildcard_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_wildcard,\n})",
								Start: ast.Position{
									Column: 40,
									Line:   95,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   99,
									},
									File:   "aggregate_count_wildcard_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_wildcard,\n}",
									Start: ast.Position{
										Column: 41,
										Line:   95,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   96,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   96,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   96,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   96,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   96,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   96,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   96,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   96,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   96,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   96,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   96,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   96,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   96,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   96,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   96,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   96,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   96,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   96,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   96,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   96,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   97,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   97,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   97,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   97,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   97,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   97,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   97,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   97,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   97,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   97,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   97,
														},
														File:   "aggregate_count_wildcard_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   97,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   97,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   97,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   97,
												},
												File:   "aggregate_count_wildcard_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   97,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   97,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   97,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   97,
													},
													File:   "aggregate_count_wildcard_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   97,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   98,
										},
										File:   "aggregate_count_wildcard_test.flux",
										Source: "fn: t_aggregate_count_wildcard",
										Start: ast.Position{
											Column: 2,
											Line:   98,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   98,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   98,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   98,
											},
											File:   "aggregate_count_wildcard_test.flux",
											Source: "t_aggregate_count_wildcard",
											Start: ast.Position{
												Column: 6,
												Line:   98,
											},
										},
									},
									Name: "t_aggregate_count_wildcard",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   99,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "test _aggregate_count_wildcard = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_wildcard,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   95,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   5,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "import \"influxdata/influxdb/v1\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   5,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "\"influxdata/influxdb/v1\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "influxdata/influxdb/v1",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregate_count_wildcard_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregate_count_wildcard_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregate_count_wildcard_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   98,
				},
				File:   "aggregate_count_window_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,2019-10-24T19:06:30Z,30\n,,0,cpu,2019-10-24T19:07:00Z,30\n\"\n\n// SELECT count(\"value\") FROM cpu WHERE time >= now() - 1m GROUP BY time(30s)\nt_aggregate_count_window = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: count, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count_window = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   6,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   6,
							},
							File:   "aggregate_count_window_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   6,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   6,
							},
							File:   "aggregate_count_window_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   6,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   6,
								},
								File:   "aggregate_count_window_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   6,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   6,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   73,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   8,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   73,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   82,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,2019-10-24T19:06:30Z,30\n,,0,cpu,2019-10-24T19:07:00Z,30\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   75,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   75,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   75,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   82,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,2019-10-24T19:06:30Z,30\n,,0,cpu,2019-10-24T19:07:00Z,30\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   75,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,2019-10-24T19:06:30Z,30\n,,0,cpu,2019-10-24T19:07:00Z,30\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   92,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "t_aggregate_count_window = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: count, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   85,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "t_aggregate_count_window",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "t_aggregate_count_window",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   92,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: count, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 28,
							Line:   85,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   85,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 43,
															Line:   85,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   86,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "tables\n\t|> range(start: -1m)",
													Start: ast.Position{
														Column: 43,
														Line:   85,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   86,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "start: -1m",
															Start: ast.Position{
																Column: 11,
																Line:   86,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   86,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "start: -1m",
																Start: ast.Position{
																	Column: 11,
																	Line:   86,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 16,
																		Line:   86,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "start",
																	Start: ast.Position{
																		Column: 11,
																		Line:   86,
																	},
																},
															},
															Name: "start",
														},
														Value: &ast.UnaryExpression{
															Argument: &ast.DurationLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   86,
																		},
																		File:   "aggregate_count_window_test.flux",
																		Source: "1m",
																		Start: ast.Position{
																			Column: 19,
																			Line:   86,
																		},
																	},
																},
																Values: []ast.Duration{ast.Duration{
																	Magnitude: int64(1),
																	Unit:      "m",
																}},
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   86,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "-1m",
																	Start: ast.Position{
																		Column: 18,
																		Line:   86,
																	},
																},
															},
															Operator: 6,
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   86,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "range(start: -1m)",
														Start: ast.Position{
															Column: 5,
															Line:   86,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   86,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "range",
															Start: ast.Position{
																Column: 5,
																Line:   86,
															},
														},
													},
													Name: "range",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   87,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
												Start: ast.Position{
													Column: 43,
													Line:   85,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   87,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "fn: (r) => r._measurement == \"cpu\"",
														Start: ast.Position{
															Column: 12,
															Line:   87,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   87,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "fn: (r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 12,
																Line:   87,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   87,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 12,
																	Line:   87,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   87,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "(r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 16,
																	Line:   87,
																},
															},
														},
														Body: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   87,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 23,
																		Line:   87,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   87,
																		},
																		File:   "aggregate_count_window_test.flux",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 23,
																			Line:   87,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   87,
																			},
																			File:   "aggregate_count_window_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 23,
																				Line:   87,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   87,
																			},
																			File:   "aggregate_count_window_test.flux",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 25,
																				Line:   87,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
															Operator: 17,
															Right: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   87,
																		},
																		File:   "aggregate_count_window_test.flux",
																		Source: "\"cpu\"",
																		Start: ast.Position{
																			Column: 41,
																			Line:   87,
																		},
																	},
																},
																Value: "cpu",
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   87,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   87,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   87,
																		},
																		File:   "aggregate_count_window_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   87,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   87,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "filter(fn: (r) => r._measurement == \"cpu\")",
													Start: ast.Position{
														Column: 5,
														Line:   87,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   87,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "filter",
														Start: ast.Position{
															Column: 5,
															Line:   87,
														},
													},
												},
												Name: "filter",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   88,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")",
											Start: ast.Position{
												Column: 43,
												Line:   85,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   88,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "fn: (r) => r._field == \"value\"",
													Start: ast.Position{
														Column: 12,
														Line:   88,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   88,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "fn: (r) => r._field == \"value\"",
														Start: ast.Position{
															Column: 12,
															Line:   88,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   88,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   88,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   88,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "(r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 16,
																Line:   88,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   88,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "r._field == \"value\"",
																Start: ast.Position{
																	Column: 23,
																	Line:   88,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   88,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "r._field",
																	Start: ast.Position{
																		Column: 23,
																		Line:   88,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   88,
																		},
																		File:   "aggregate_count_window_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 23,
																			Line:   88,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   88,
																		},
																		File:   "aggregate_count_window_test.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 25,
																			Line:   88,
																		},
																	},
																},
																Name: "_field",
															},
														},
														Operator: 17,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   88,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "\"value\"",
																	Start: ast.Position{
																		Column: 35,
																		Line:   88,
																	},
																},
															},
															Value: "value",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   88,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   88,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   88,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   88,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   88,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "filter(fn: (r) => r._field == \"value\")",
												Start: ast.Position{
													Column: 5,
													Line:   88,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   88,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 5,
														Line:   88,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   89,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
										Start: ast.Position{
											Column: 43,
											Line:   85,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   89,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
												Start: ast.Position{
													Column: 11,
													Line:   89,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   89,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "columns: [\"_measurement\", \"_field\"]",
													Start: ast.Position{
														Column: 11,
														Line:   89,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   89,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 11,
															Line:   89,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   89,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "[\"_measurement\", \"_field\"]",
														Start: ast.Position{
															Column: 20,
															Line:   89,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   89,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 21,
																Line:   89,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   89,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 37,
																Line:   89,
															},
														},
													},
													Value: "_field",
												}},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   89,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "mode: \"by\"",
													Start: ast.Position{
														Column: 48,
														Line:   89,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   89,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "mode",
														Start: ast.Position{
															Column: 48,
															Line:   89,
														},
													},
												},
												Name: "mode",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   89,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "\"by\"",
														Start: ast.Position{
															Column: 54,
															Line:   89,
														},
													},
												},
												Value: "by",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   89,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
											Start: ast.Position{
												Column: 5,
												Line:   89,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   89,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "group",
												Start: ast.Position{
													Column: 5,
													Line:   89,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   90,
									},
									File:   "aggregate_count_window_test.flux",
									Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: count, timeSrc: \"_start\")",
									Start: ast.Position{
										Column: 43,
										Line:   85,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   90,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "every: 30s, fn: count, timeSrc: \"_start\"",
											Start: ast.Position{
												Column: 21,
												Line:   90,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   90,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "every: 30s",
												Start: ast.Position{
													Column: 21,
													Line:   90,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   90,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "every",
													Start: ast.Position{
														Column: 21,
														Line:   90,
													},
												},
											},
											Name: "every",
										},
										Value: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   90,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "30s",
													Start: ast.Position{
														Column: 28,
														Line:   90,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(30),
												Unit:      "s",
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   90,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "fn: count",
												Start: ast.Position{
													Column: 33,
													Line:   90,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   90,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 33,
														Line:   90,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   90,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "count",
													Start: ast.Position{
														Column: 37,
														Line:   90,
													},
												},
											},
											Name: "count",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   90,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "timeSrc: \"_start\"",
												Start: ast.Position{
													Column: 44,
													Line:   90,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   90,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "timeSrc",
													Start: ast.Position{
														Column: 44,
														Line:   90,
													},
												},
											},
											Name: "timeSrc",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   90,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 53,
														Line:   90,
													},
												},
											},
											Value: "_start",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   90,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "aggregateWindow(every: 30s, fn: count, timeSrc: \"_start\")",
										Start: ast.Position{
											Column: 5,
											Line:   90,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   90,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "aggregateWindow",
											Start: ast.Position{
												Column: 5,
												Line:   90,
											},
										},
									},
									Name: "aggregateWindow",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   91,
								},
								File:   "aggregate_count_window_test.flux",
								Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: count, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, count: r._value}))",
								Start: ast.Position{
									Column: 43,
									Line:   85,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   91,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "fn: (r) => ({r with time: r._time, count: r._value})",
										Start: ast.Position{
											Column: 9,
											Line:   91,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   91,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "fn: (r) => ({r with time: r._time, count: r._value})",
											Start: ast.Position{
												Column: 9,
												Line:   91,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   91,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 9,
													Line:   91,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   91,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "(r) => ({r with time: r._time, count: r._value})",
												Start: ast.Position{
													Column: 13,
													Line:   91,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   91,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "({r with time: r._time, count: r._value})",
													Start: ast.Position{
														Column: 20,
														Line:   91,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   91,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "{r with time: r._time, count: r._value}",
														Start: ast.Position{
															Column: 21,
															Line:   91,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   91,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "time: r._time",
															Start: ast.Position{
																Column: 29,
																Line:   91,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   91,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "time",
																Start: ast.Position{
																	Column: 29,
																	Line:   91,
																},
															},
														},
														Name: "time",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   91,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "r._time",
																Start: ast.Position{
																	Column: 35,
																	Line:   91,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   91,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 35,
																		Line:   91,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   91,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "_time",
																	Start: ast.Position{
																		Column: 37,
																		Line:   91,
																	},
																},
															},
															Name: "_time",
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   91,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "count: r._value",
															Start: ast.Position{
																Column: 44,
																Line:   91,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   91,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "count",
																Start: ast.Position{
																	Column: 44,
																	Line:   91,
																},
															},
														},
														Name: "count",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 59,
																	Line:   91,
																},
																File:   "aggregate_count_window_test.flux",
																Source: "r._value",
																Start: ast.Position{
																	Column: 51,
																	Line:   91,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 52,
																		Line:   91,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 51,
																		Line:   91,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   91,
																	},
																	File:   "aggregate_count_window_test.flux",
																	Source: "_value",
																	Start: ast.Position{
																		Column: 53,
																		Line:   91,
																	},
																},
															},
															Name: "_value",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   91,
															},
															File:   "aggregate_count_window_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 22,
																Line:   91,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   91,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   91,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   91,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   91,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   91,
									},
									File:   "aggregate_count_window_test.flux",
									Source: "map(fn: (r) => ({r with time: r._time, count: r._value}))",
									Start: ast.Position{
										Column: 5,
										Line:   91,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   91,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 5,
											Line:   91,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   92,
							},
							File:   "aggregate_count_window_test.flux",
							Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: count, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 43,
								Line:   85,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   92,
									},
									File:   "aggregate_count_window_test.flux",
									Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   92,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   92,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   92,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   92,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   92,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   92,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "[\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   92,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   92,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   92,
												},
											},
										},
										Value: "_time",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   92,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 29,
													Line:   92,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   92,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 39,
													Line:   92,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   92,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 48,
													Line:   92,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   92,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 58,
													Line:   92,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   92,
								},
								File:   "aggregate_count_window_test.flux",
								Source: "drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   92,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   92,
									},
									File:   "aggregate_count_window_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   92,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   85,
							},
							File:   "aggregate_count_window_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 29,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   85,
								},
								File:   "aggregate_count_window_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   85,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   85,
							},
							File:   "aggregate_count_window_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 36,
								Line:   85,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   98,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "_aggregate_count_window = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   94,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   94,
							},
							File:   "aggregate_count_window_test.flux",
							Source: "_aggregate_count_window",
							Start: ast.Position{
								Column: 6,
								Line:   94,
							},
						},
					},
					Name: "_aggregate_count_window",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   98,
							},
							File:   "aggregate_count_window_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
							Start: ast.Position{
								Column: 32,
								Line:   94,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   98,
								},
								File:   "aggregate_count_window_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
								Start: ast.Position{
									Column: 38,
									Line:   94,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   98,
									},
									File:   "aggregate_count_window_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n}",
									Start: ast.Position{
										Column: 39,
										Line:   94,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   95,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   95,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   95,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   95,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   95,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   95,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   95,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   95,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   95,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   95,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   95,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   95,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   95,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   95,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   95,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   95,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   95,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   95,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   95,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   96,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   96,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   96,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   96,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   96,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   96,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   96,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   96,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   96,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   96,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   96,
														},
														File:   "aggregate_count_window_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   96,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   96,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   96,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   96,
												},
												File:   "aggregate_count_window_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   96,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   96,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   96,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   96,
													},
													File:   "aggregate_count_window_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   96,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   97,
										},
										File:   "aggregate_count_window_test.flux",
										Source: "fn: t_aggregate_count_window",
										Start: ast.Position{
											Column: 2,
											Line:   97,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   97,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   97,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   97,
											},
											File:   "aggregate_count_window_test.flux",
											Source: "t_aggregate_count_window",
											Start: ast.Position{
												Column: 6,
												Line:   97,
											},
										},
									},
									Name: "t_aggregate_count_window",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   98,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "test _aggregate_count_window = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   94,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregate_count_window_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregate_count_window_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregate_count_window_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   98,
				},
				File:   "aggregate_count_with_condition_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,6\n\"\n\n// SELECT count(\"value\") FROM cpu WHERE t0 = 'wT37nhV'\nt_aggregate_count_with_condition = (tables=<-) => tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count_with_condition = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_with_condition,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   6,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   6,
							},
							File:   "aggregate_count_with_condition_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   6,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   6,
							},
							File:   "aggregate_count_with_condition_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   6,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   6,
								},
								File:   "aggregate_count_with_condition_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   6,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   6,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   73,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   8,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   73,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   81,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,6\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   75,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   75,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   75,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   81,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,6\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   75,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,long\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,count\n,,0,cpu,1970-01-01T00:00:00Z,6\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   92,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "t_aggregate_count_with_condition = (tables=<-) => tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   84,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   84,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "t_aggregate_count_with_condition",
						Start: ast.Position{
							Column: 1,
							Line:   84,
						},
					},
				},
				Name: "t_aggregate_count_with_condition",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   92,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 36,
							Line:   84,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 57,
																Line:   84,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 51,
																Line:   84,
															},
														},
													},
													Name: "tables",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   85,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)",
														Start: ast.Position{
															Column: 51,
															Line:   84,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   85,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "start: influxql.minTime, stop: influxql.maxTime",
																Start: ast.Position{
																	Column: 11,
																	Line:   85,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   85,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "start: influxql.minTime",
																	Start: ast.Position{
																		Column: 11,
																		Line:   85,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 16,
																			Line:   85,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "start",
																		Start: ast.Position{
																			Column: 11,
																			Line:   85,
																		},
																	},
																},
																Name: "start",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   85,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "influxql.minTime",
																		Start: ast.Position{
																			Column: 18,
																			Line:   85,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 26,
																				Line:   85,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 18,
																				Line:   85,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 34,
																				Line:   85,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "minTime",
																			Start: ast.Position{
																				Column: 27,
																				Line:   85,
																			},
																		},
																	},
																	Name: "minTime",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 58,
																		Line:   85,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "stop: influxql.maxTime",
																	Start: ast.Position{
																		Column: 36,
																		Line:   85,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 40,
																			Line:   85,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "stop",
																		Start: ast.Position{
																			Column: 36,
																			Line:   85,
																		},
																	},
																},
																Name: "stop",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 58,
																			Line:   85,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "influxql.maxTime",
																		Start: ast.Position{
																			Column: 42,
																			Line:   85,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   85,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 42,
																				Line:   85,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 58,
																				Line:   85,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "maxTime",
																			Start: ast.Position{
																				Column: 51,
																				Line:   85,
																			},
																		},
																	},
																	Name: "maxTime",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   85,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "range(start: influxql.minTime, stop: influxql.maxTime)",
															Start: ast.Position{
																Column: 5,
																Line:   85,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   85,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "range",
																Start: ast.Position{
																	Column: 5,
																	Line:   85,
																},
															},
														},
														Name: "range",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   86,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
													Start: ast.Position{
														Column: 51,
														Line:   84,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   86,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "fn: (r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 12,
																Line:   86,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   86,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 12,
																	Line:   86,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 14,
																		Line:   86,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 12,
																		Line:   86,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   86,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "(r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 16,
																		Line:   86,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   86,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 23,
																			Line:   86,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   86,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "r._measurement",
																			Start: ast.Position{
																				Column: 23,
																				Line:   86,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 24,
																					Line:   86,
																				},
																				File:   "aggregate_count_with_condition_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 23,
																					Line:   86,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 37,
																					Line:   86,
																				},
																				File:   "aggregate_count_with_condition_test.flux",
																				Source: "_measurement",
																				Start: ast.Position{
																					Column: 25,
																					Line:   86,
																				},
																			},
																		},
																		Name: "_measurement",
																	},
																},
																Operator: 17,
																Right: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   86,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "\"cpu\"",
																			Start: ast.Position{
																				Column: 41,
																				Line:   86,
																			},
																		},
																	},
																	Value: "cpu",
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   86,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   86,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 18,
																				Line:   86,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 17,
																				Line:   86,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   86,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 5,
															Line:   86,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   86,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 5,
																Line:   86,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   87,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")",
												Start: ast.Position{
													Column: 51,
													Line:   84,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   87,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "fn: (r) => r._field == \"value\"",
														Start: ast.Position{
															Column: 12,
															Line:   87,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   87,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "fn: (r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 12,
																Line:   87,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   87,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 12,
																	Line:   87,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   87,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "(r) => r._field == \"value\"",
																Start: ast.Position{
																	Column: 16,
																	Line:   87,
																},
															},
														},
														Body: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   87,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "r._field == \"value\"",
																	Start: ast.Position{
																		Column: 23,
																		Line:   87,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   87,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "r._field",
																		Start: ast.Position{
																			Column: 23,
																			Line:   87,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   87,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 23,
																				Line:   87,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 31,
																				Line:   87,
																			},
																			File:   "aggregate_count_with_condition_test.flux",
																			Source: "_field",
																			Start: ast.Position{
																				Column: 25,
																				Line:   87,
																			},
																		},
																	},
																	Name: "_field",
																},
															},
															Operator: 17,
															Right: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   87,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "\"value\"",
																		Start: ast.Position{
																			Column: 35,
																			Line:   87,
																		},
																	},
																},
																Value: "value",
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   87,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   87,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   87,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   87,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   87,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "filter(fn: (r) => r._field == \"value\")",
													Start: ast.Position{
														Column: 5,
														Line:   87,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   87,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "filter",
														Start: ast.Position{
															Column: 5,
															Line:   87,
														},
													},
												},
												Name: "filter",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   88,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")",
											Start: ast.Position{
												Column: 51,
												Line:   84,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   88,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "fn: (r) => r.t0 == \"wT37nhV\"",
													Start: ast.Position{
														Column: 12,
														Line:   88,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   88,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "fn: (r) => r.t0 == \"wT37nhV\"",
														Start: ast.Position{
															Column: 12,
															Line:   88,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   88,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   88,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   88,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "(r) => r.t0 == \"wT37nhV\"",
															Start: ast.Position{
																Column: 16,
																Line:   88,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   88,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "r.t0 == \"wT37nhV\"",
																Start: ast.Position{
																	Column: 23,
																	Line:   88,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 27,
																		Line:   88,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "r.t0",
																	Start: ast.Position{
																		Column: 23,
																		Line:   88,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   88,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 23,
																			Line:   88,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 27,
																			Line:   88,
																		},
																		File:   "aggregate_count_with_condition_test.flux",
																		Source: "t0",
																		Start: ast.Position{
																			Column: 25,
																			Line:   88,
																		},
																	},
																},
																Name: "t0",
															},
														},
														Operator: 17,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   88,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "\"wT37nhV\"",
																	Start: ast.Position{
																		Column: 31,
																		Line:   88,
																	},
																},
															},
															Value: "wT37nhV",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   88,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   88,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   88,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   88,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   88,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "filter(fn: (r) => r.t0 == \"wT37nhV\")",
												Start: ast.Position{
													Column: 5,
													Line:   88,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   88,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 5,
														Line:   88,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   89,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
										Start: ast.Position{
											Column: 51,
											Line:   84,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   89,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
												Start: ast.Position{
													Column: 11,
													Line:   89,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   89,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "columns: [\"_measurement\", \"_field\"]",
													Start: ast.Position{
														Column: 11,
														Line:   89,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   89,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 11,
															Line:   89,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   89,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "[\"_measurement\", \"_field\"]",
														Start: ast.Position{
															Column: 20,
															Line:   89,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   89,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 21,
																Line:   89,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   89,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 37,
																Line:   89,
															},
														},
													},
													Value: "_field",
												}},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   89,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "mode: \"by\"",
													Start: ast.Position{
														Column: 48,
														Line:   89,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   89,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "mode",
														Start: ast.Position{
															Column: 48,
															Line:   89,
														},
													},
												},
												Name: "mode",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   89,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "\"by\"",
														Start: ast.Position{
															Column: 54,
															Line:   89,
														},
													},
												},
												Value: "by",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   89,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
											Start: ast.Position{
												Column: 5,
												Line:   89,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   89,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "group",
												Start: ast.Position{
													Column: 5,
													Line:   89,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   90,
									},
									File:   "aggregate_count_with_condition_test.flux",
									Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()",
									Start: ast.Position{
										Column: 51,
										Line:   84,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   90,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "count()",
										Start: ast.Position{
											Column: 5,
											Line:   90,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   90,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "count",
											Start: ast.Position{
												Column: 5,
												Line:   90,
											},
										},
									},
									Name: "count",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   91,
								},
								File:   "aggregate_count_with_condition_test.flux",
								Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))",
								Start: ast.Position{
									Column: 51,
									Line:   84,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   91,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "fn: (r) => ({r with time: influxql.epoch, count: r._value})",
										Start: ast.Position{
											Column: 9,
											Line:   91,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   91,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "fn: (r) => ({r with time: influxql.epoch, count: r._value})",
											Start: ast.Position{
												Column: 9,
												Line:   91,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   91,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 9,
													Line:   91,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   91,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "(r) => ({r with time: influxql.epoch, count: r._value})",
												Start: ast.Position{
													Column: 13,
													Line:   91,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 68,
														Line:   91,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "({r with time: influxql.epoch, count: r._value})",
													Start: ast.Position{
														Column: 20,
														Line:   91,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 67,
															Line:   91,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "{r with time: influxql.epoch, count: r._value}",
														Start: ast.Position{
															Column: 21,
															Line:   91,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   91,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "time: influxql.epoch",
															Start: ast.Position{
																Column: 29,
																Line:   91,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   91,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "time",
																Start: ast.Position{
																	Column: 29,
																	Line:   91,
																},
															},
														},
														Name: "time",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   91,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "influxql.epoch",
																Start: ast.Position{
																	Column: 35,
																	Line:   91,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   91,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "influxql",
																	Start: ast.Position{
																		Column: 35,
																		Line:   91,
																	},
																},
															},
															Name: "influxql",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   91,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "epoch",
																	Start: ast.Position{
																		Column: 44,
																		Line:   91,
																	},
																},
															},
															Name: "epoch",
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 66,
																Line:   91,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "count: r._value",
															Start: ast.Position{
																Column: 51,
																Line:   91,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   91,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "count",
																Start: ast.Position{
																	Column: 51,
																	Line:   91,
																},
															},
														},
														Name: "count",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 66,
																	Line:   91,
																},
																File:   "aggregate_count_with_condition_test.flux",
																Source: "r._value",
																Start: ast.Position{
																	Column: 58,
																	Line:   91,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   91,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 58,
																		Line:   91,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 66,
																		Line:   91,
																	},
																	File:   "aggregate_count_with_condition_test.flux",
																	Source: "_value",
																	Start: ast.Position{
																		Column: 60,
																		Line:   91,
																	},
																},
															},
															Name: "_value",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   91,
															},
															File:   "aggregate_count_with_condition_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 22,
																Line:   91,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   91,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   91,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   91,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   91,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   91,
									},
									File:   "aggregate_count_with_condition_test.flux",
									Source: "map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))",
									Start: ast.Position{
										Column: 5,
										Line:   91,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   91,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 5,
											Line:   91,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   92,
							},
							File:   "aggregate_count_with_condition_test.flux",
							Source: "tables\n\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> filter(fn: (r) => r.t0 == \"wT37nhV\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> count()\n\t|> map(fn: (r) => ({r with time: influxql.epoch, count: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 51,
								Line:   84,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   92,
									},
									File:   "aggregate_count_with_condition_test.flux",
									Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   92,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   92,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   92,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   92,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   92,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   92,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "[\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   92,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   92,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   92,
												},
											},
										},
										Value: "_time",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   92,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 29,
													Line:   92,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   92,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 39,
													Line:   92,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   92,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 48,
													Line:   92,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   92,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 58,
													Line:   92,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   92,
								},
								File:   "aggregate_count_with_condition_test.flux",
								Source: "drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   92,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   92,
									},
									File:   "aggregate_count_with_condition_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   92,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   84,
							},
							File:   "aggregate_count_with_condition_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 37,
								Line:   84,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   84,
								},
								File:   "aggregate_count_with_condition_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 37,
									Line:   84,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   84,
							},
							File:   "aggregate_count_with_condition_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 44,
								Line:   84,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   98,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "_aggregate_count_with_condition = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_with_condition,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   94,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   94,
							},
							File:   "aggregate_count_with_condition_test.flux",
							Source: "_aggregate_count_with_condition",
							Start: ast.Position{
								Column: 6,
								Line:   94,
							},
						},
					},
					Name: "_aggregate_count_with_condition",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   98,
							},
							File:   "aggregate_count_with_condition_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_with_condition,\n})",
							Start: ast.Position{
								Column: 40,
								Line:   94,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   98,
								},
								File:   "aggregate_count_with_condition_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_with_condition,\n})",
								Start: ast.Position{
									Column: 46,
									Line:   94,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   98,
									},
									File:   "aggregate_count_with_condition_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_with_condition,\n}",
									Start: ast.Position{
										Column: 47,
										Line:   94,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   95,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   95,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   95,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   95,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   95,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   95,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   95,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   95,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   95,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   95,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   95,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   95,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   95,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   95,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   95,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   95,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   95,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   95,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   95,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   96,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   96,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   96,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   96,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   96,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   96,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   96,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   96,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   96,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   96,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   96,
														},
														File:   "aggregate_count_with_condition_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   96,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   96,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   96,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   96,
												},
												File:   "aggregate_count_with_condition_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   96,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   96,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   96,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   96,
													},
													File:   "aggregate_count_with_condition_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   96,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   97,
										},
										File:   "aggregate_count_with_condition_test.flux",
										Source: "fn: t_aggregate_count_with_condition",
										Start: ast.Position{
											Column: 2,
											Line:   97,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   97,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   97,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   97,
											},
											File:   "aggregate_count_with_condition_test.flux",
											Source: "t_aggregate_count_with_condition",
											Start: ast.Position{
												Column: 6,
												Line:   97,
											},
										},
									},
									Name: "t_aggregate_count_with_condition",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   98,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "test _aggregate_count_with_condition = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_with_condition,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   94,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregate_count_with_condition_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregate_count_with_condition_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregate_count_with_condition_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   116,
				},
				File:   "aggregates_and_selectors_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\nimport \"internal/promql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,max\n,,0,cpu,1970-01-01T00:00:00Z,60,126.51192216762033\n\"\n\n// SELECT count(\"value\"), max(\"value\") FROM cpu\nt_aggregates_and_selectors = (tables=<-) => {\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}\n\ntest _aggregates_and_selectors = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregates_and_selectors,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   7,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   7,
							},
							File:   "aggregates_and_selectors_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   7,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   7,
							},
							File:   "aggregates_and_selectors_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   7,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   7,
								},
								File:   "aggregates_and_selectors_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   7,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   7,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   74,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   9,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   74,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   9,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   82,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,max\n,,0,cpu,1970-01-01T00:00:00Z,60,126.51192216762033\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   76,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   76,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   76,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   82,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,max\n,,0,cpu,1970-01-01T00:00:00Z,60,126.51192216762033\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   76,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,max\n,,0,cpu,1970-01-01T00:00:00Z,60,126.51192216762033\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   110,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "t_aggregates_and_selectors = (tables=<-) => {\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   85,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "t_aggregates_and_selectors",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "t_aggregates_and_selectors",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   110,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "(tables=<-) => {\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}",
						Start: ast.Position{
							Column: 30,
							Line:   85,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   110,
							},
							File:   "aggregates_and_selectors_test.flux",
							Source: "{\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}",
							Start: ast.Position{
								Column: 45,
								Line:   85,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   93,
								},
								File:   "aggregates_and_selectors_test.flux",
								Source: "field0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
								Start: ast.Position{
									Column: 2,
									Line:   86,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   86,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "field0",
									Start: ast.Position{
										Column: 2,
										Line:   86,
									},
								},
							},
							Name: "field0",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   86,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 11,
																	Line:   86,
																},
															},
														},
														Name: "tables",
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   87,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)",
															Start: ast.Position{
																Column: 11,
																Line:   86,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   87,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "start: influxql.minTime, stop: influxql.maxTime",
																	Start: ast.Position{
																		Column: 12,
																		Line:   87,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   87,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "start: influxql.minTime",
																		Start: ast.Position{
																			Column: 12,
																			Line:   87,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 17,
																				Line:   87,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "start",
																			Start: ast.Position{
																				Column: 12,
																				Line:   87,
																			},
																		},
																	},
																	Name: "start",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   87,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "influxql.minTime",
																			Start: ast.Position{
																				Column: 19,
																				Line:   87,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 27,
																					Line:   87,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 19,
																					Line:   87,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   87,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "minTime",
																				Start: ast.Position{
																					Column: 28,
																					Line:   87,
																				},
																			},
																		},
																		Name: "minTime",
																	},
																},
															}, &ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 59,
																			Line:   87,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "stop: influxql.maxTime",
																		Start: ast.Position{
																			Column: 37,
																			Line:   87,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 41,
																				Line:   87,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "stop",
																			Start: ast.Position{
																				Column: 37,
																				Line:   87,
																			},
																		},
																	},
																	Name: "stop",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 59,
																				Line:   87,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "influxql.maxTime",
																			Start: ast.Position{
																				Column: 43,
																				Line:   87,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 51,
																					Line:   87,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 43,
																					Line:   87,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 59,
																					Line:   87,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "maxTime",
																				Start: ast.Position{
																					Column: 52,
																					Line:   87,
																				},
																			},
																		},
																		Name: "maxTime",
																	},
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   87,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "range(start: influxql.minTime, stop: influxql.maxTime)",
																Start: ast.Position{
																	Column: 6,
																	Line:   87,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 11,
																		Line:   87,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "range",
																	Start: ast.Position{
																		Column: 6,
																		Line:   87,
																	},
																},
															},
															Name: "range",
														},
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   88,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 11,
															Line:   86,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   88,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   88,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   88,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "fn: (r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   88,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 15,
																			Line:   88,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 13,
																			Line:   88,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   88,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "(r) => r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 17,
																			Line:   88,
																		},
																	},
																},
																Body: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 47,
																				Line:   88,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r._measurement == \"cpu\"",
																			Start: ast.Position{
																				Column: 24,
																				Line:   88,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   88,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "r._measurement",
																				Start: ast.Position{
																					Column: 24,
																					Line:   88,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 25,
																						Line:   88,
																					},
																					File:   "aggregates_and_selectors_test.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 24,
																						Line:   88,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 38,
																						Line:   88,
																					},
																					File:   "aggregates_and_selectors_test.flux",
																					Source: "_measurement",
																					Start: ast.Position{
																						Column: 26,
																						Line:   88,
																					},
																				},
																			},
																			Name: "_measurement",
																		},
																	},
																	Operator: 17,
																	Right: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   88,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "\"cpu\"",
																				Start: ast.Position{
																					Column: 42,
																					Line:   88,
																				},
																			},
																		},
																		Value: "cpu",
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   88,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   88,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 19,
																					Line:   88,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 18,
																					Line:   88,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   88,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "filter(fn: (r) => r._measurement == \"cpu\")",
															Start: ast.Position{
																Column: 6,
																Line:   88,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 12,
																	Line:   88,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "filter",
																Start: ast.Position{
																	Column: 6,
																	Line:   88,
																},
															},
														},
														Name: "filter",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   89,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")",
													Start: ast.Position{
														Column: 11,
														Line:   86,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   89,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "fn: (r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 13,
																Line:   89,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   89,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "fn: (r) => r._field == \"value\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   89,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 15,
																		Line:   89,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 13,
																		Line:   89,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   89,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "(r) => r._field == \"value\"",
																	Start: ast.Position{
																		Column: 17,
																		Line:   89,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   89,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "r._field == \"value\"",
																		Start: ast.Position{
																			Column: 24,
																			Line:   89,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 32,
																				Line:   89,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 24,
																				Line:   89,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 25,
																					Line:   89,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 24,
																					Line:   89,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 32,
																					Line:   89,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 26,
																					Line:   89,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
																Operator: 17,
																Right: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   89,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "\"value\"",
																			Start: ast.Position{
																				Column: 36,
																				Line:   89,
																			},
																		},
																	},
																	Value: "value",
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   89,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 18,
																			Line:   89,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   89,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   89,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   89,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "filter(fn: (r) => r._field == \"value\")",
														Start: ast.Position{
															Column: 6,
															Line:   89,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 12,
																Line:   89,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 6,
																Line:   89,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   90,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
												Start: ast.Position{
													Column: 11,
													Line:   86,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   90,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
														Start: ast.Position{
															Column: 12,
															Line:   90,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   90,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "columns: [\"_measurement\", \"_field\"]",
															Start: ast.Position{
																Column: 12,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   90,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 12,
																	Line:   90,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   90,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "[\"_measurement\", \"_field\"]",
																Start: ast.Position{
																	Column: 21,
																	Line:   90,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   90,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "\"_measurement\"",
																	Start: ast.Position{
																		Column: 22,
																		Line:   90,
																	},
																},
															},
															Value: "_measurement",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   90,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "\"_field\"",
																	Start: ast.Position{
																		Column: 38,
																		Line:   90,
																	},
																},
															},
															Value: "_field",
														}},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   90,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "mode: \"by\"",
															Start: ast.Position{
																Column: 49,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   90,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "mode",
																Start: ast.Position{
																	Column: 49,
																	Line:   90,
																},
															},
														},
														Name: "mode",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 59,
																	Line:   90,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "\"by\"",
																Start: ast.Position{
																	Column: 55,
																	Line:   90,
																},
															},
														},
														Value: "by",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   90,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
													Start: ast.Position{
														Column: 6,
														Line:   90,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   90,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "group",
														Start: ast.Position{
															Column: 6,
															Line:   90,
														},
													},
												},
												Name: "group",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   91,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()",
											Start: ast.Position{
												Column: 11,
												Line:   86,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   91,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "count()",
												Start: ast.Position{
													Column: 6,
													Line:   91,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   91,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "count",
													Start: ast.Position{
														Column: 6,
														Line:   91,
													},
												},
											},
											Name: "count",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   92,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))",
										Start: ast.Position{
											Column: 11,
											Line:   86,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   92,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "fn: (r) => ({r with _time: influxql.epoch})",
												Start: ast.Position{
													Column: 10,
													Line:   92,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   92,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "fn: (r) => ({r with _time: influxql.epoch})",
													Start: ast.Position{
														Column: 10,
														Line:   92,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   92,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   92,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   92,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "(r) => ({r with _time: influxql.epoch})",
														Start: ast.Position{
															Column: 14,
															Line:   92,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   92,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "({r with _time: influxql.epoch})",
															Start: ast.Position{
																Column: 21,
																Line:   92,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   92,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "{r with _time: influxql.epoch}",
																Start: ast.Position{
																	Column: 22,
																	Line:   92,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   92,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "_time: influxql.epoch",
																	Start: ast.Position{
																		Column: 30,
																		Line:   92,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   92,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 30,
																			Line:   92,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   92,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "influxql.epoch",
																		Start: ast.Position{
																			Column: 37,
																			Line:   92,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   92,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 37,
																				Line:   92,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 51,
																				Line:   92,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "epoch",
																			Start: ast.Position{
																				Column: 46,
																				Line:   92,
																			},
																		},
																	},
																	Name: "epoch",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   92,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 23,
																		Line:   92,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   92,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 15,
																Line:   92,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   92,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 15,
																	Line:   92,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   92,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "map(fn: (r) => ({r with _time: influxql.epoch}))",
											Start: ast.Position{
												Column: 6,
												Line:   92,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   92,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 6,
													Line:   92,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   93,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
									Start: ast.Position{
										Column: 11,
										Line:   86,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   93,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
											Start: ast.Position{
												Column: 11,
												Line:   93,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   93,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
												Start: ast.Position{
													Column: 11,
													Line:   93,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   93,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 11,
														Line:   93,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   93,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "[\"_start\", \"_stop\", \"_field\"]",
													Start: ast.Position{
														Column: 20,
														Line:   93,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   93,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 21,
															Line:   93,
														},
													},
												},
												Value: "_start",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   93,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_stop\"",
														Start: ast.Position{
															Column: 31,
															Line:   93,
														},
													},
												},
												Value: "_stop",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   93,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_field\"",
														Start: ast.Position{
															Column: 40,
															Line:   93,
														},
													},
												},
												Value: "_field",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   93,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "drop(columns: [\"_start\", \"_stop\", \"_field\"])",
										Start: ast.Position{
											Column: 6,
											Line:   93,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   93,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "drop",
											Start: ast.Position{
												Column: 6,
												Line:   93,
											},
										},
									},
									Name: "drop",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   102,
								},
								File:   "aggregates_and_selectors_test.flux",
								Source: "field1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
								Start: ast.Position{
									Column: 2,
									Line:   95,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   95,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "field1",
									Start: ast.Position{
										Column: 2,
										Line:   95,
									},
								},
							},
							Name: "field1",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   95,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 11,
																	Line:   95,
																},
															},
														},
														Name: "tables",
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   96,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)",
															Start: ast.Position{
																Column: 11,
																Line:   95,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   96,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "start: influxql.minTime, stop: influxql.maxTime",
																	Start: ast.Position{
																		Column: 12,
																		Line:   96,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   96,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "start: influxql.minTime",
																		Start: ast.Position{
																			Column: 12,
																			Line:   96,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 17,
																				Line:   96,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "start",
																			Start: ast.Position{
																				Column: 12,
																				Line:   96,
																			},
																		},
																	},
																	Name: "start",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   96,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "influxql.minTime",
																			Start: ast.Position{
																				Column: 19,
																				Line:   96,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 27,
																					Line:   96,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 19,
																					Line:   96,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   96,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "minTime",
																				Start: ast.Position{
																					Column: 28,
																					Line:   96,
																				},
																			},
																		},
																		Name: "minTime",
																	},
																},
															}, &ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 59,
																			Line:   96,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "stop: influxql.maxTime",
																		Start: ast.Position{
																			Column: 37,
																			Line:   96,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 41,
																				Line:   96,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "stop",
																			Start: ast.Position{
																				Column: 37,
																				Line:   96,
																			},
																		},
																	},
																	Name: "stop",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 59,
																				Line:   96,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "influxql.maxTime",
																			Start: ast.Position{
																				Column: 43,
																				Line:   96,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 51,
																					Line:   96,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 43,
																					Line:   96,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 59,
																					Line:   96,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "maxTime",
																				Start: ast.Position{
																					Column: 52,
																					Line:   96,
																				},
																			},
																		},
																		Name: "maxTime",
																	},
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   96,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "range(start: influxql.minTime, stop: influxql.maxTime)",
																Start: ast.Position{
																	Column: 6,
																	Line:   96,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 11,
																		Line:   96,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "range",
																	Start: ast.Position{
																		Column: 6,
																		Line:   96,
																	},
																},
															},
															Name: "range",
														},
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   97,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 11,
															Line:   95,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   97,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   97,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   97,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "fn: (r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   97,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 15,
																			Line:   97,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 13,
																			Line:   97,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   97,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "(r) => r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 17,
																			Line:   97,
																		},
																	},
																},
																Body: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 47,
																				Line:   97,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r._measurement == \"cpu\"",
																			Start: ast.Position{
																				Column: 24,
																				Line:   97,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   97,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "r._measurement",
																				Start: ast.Position{
																					Column: 24,
																					Line:   97,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 25,
																						Line:   97,
																					},
																					File:   "aggregates_and_selectors_test.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 24,
																						Line:   97,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 38,
																						Line:   97,
																					},
																					File:   "aggregates_and_selectors_test.flux",
																					Source: "_measurement",
																					Start: ast.Position{
																						Column: 26,
																						Line:   97,
																					},
																				},
																			},
																			Name: "_measurement",
																		},
																	},
																	Operator: 17,
																	Right: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   97,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "\"cpu\"",
																				Start: ast.Position{
																					Column: 42,
																					Line:   97,
																				},
																			},
																		},
																		Value: "cpu",
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   97,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   97,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 19,
																					Line:   97,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 18,
																					Line:   97,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   97,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "filter(fn: (r) => r._measurement == \"cpu\")",
															Start: ast.Position{
																Column: 6,
																Line:   97,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 12,
																	Line:   97,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "filter",
																Start: ast.Position{
																	Column: 6,
																	Line:   97,
																},
															},
														},
														Name: "filter",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   98,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")",
													Start: ast.Position{
														Column: 11,
														Line:   95,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   98,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "fn: (r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 13,
																Line:   98,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   98,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "fn: (r) => r._field == \"value\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   98,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 15,
																		Line:   98,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 13,
																		Line:   98,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   98,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "(r) => r._field == \"value\"",
																	Start: ast.Position{
																		Column: 17,
																		Line:   98,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   98,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "r._field == \"value\"",
																		Start: ast.Position{
																			Column: 24,
																			Line:   98,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 32,
																				Line:   98,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 24,
																				Line:   98,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 25,
																					Line:   98,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 24,
																					Line:   98,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 32,
																					Line:   98,
																				},
																				File:   "aggregates_and_selectors_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 26,
																					Line:   98,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
																Operator: 17,
																Right: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   98,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "\"value\"",
																			Start: ast.Position{
																				Column: 36,
																				Line:   98,
																			},
																		},
																	},
																	Value: "value",
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   98,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 18,
																			Line:   98,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   98,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   98,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   98,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "filter(fn: (r) => r._field == \"value\")",
														Start: ast.Position{
															Column: 6,
															Line:   98,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 12,
																Line:   98,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 6,
																Line:   98,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   99,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
												Start: ast.Position{
													Column: 11,
													Line:   95,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   99,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
														Start: ast.Position{
															Column: 12,
															Line:   99,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   99,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "columns: [\"_measurement\", \"_field\"]",
															Start: ast.Position{
																Column: 12,
																Line:   99,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   99,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 12,
																	Line:   99,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   99,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "[\"_measurement\", \"_field\"]",
																Start: ast.Position{
																	Column: 21,
																	Line:   99,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   99,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "\"_measurement\"",
																	Start: ast.Position{
																		Column: 22,
																		Line:   99,
																	},
																},
															},
															Value: "_measurement",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   99,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "\"_field\"",
																	Start: ast.Position{
																		Column: 38,
																		Line:   99,
																	},
																},
															},
															Value: "_field",
														}},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   99,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "mode: \"by\"",
															Start: ast.Position{
																Column: 49,
																Line:   99,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   99,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "mode",
																Start: ast.Position{
																	Column: 49,
																	Line:   99,
																},
															},
														},
														Name: "mode",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 59,
																	Line:   99,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "\"by\"",
																Start: ast.Position{
																	Column: 55,
																	Line:   99,
																},
															},
														},
														Value: "by",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   99,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
													Start: ast.Position{
														Column: 6,
														Line:   99,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   99,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "group",
														Start: ast.Position{
															Column: 6,
															Line:   99,
														},
													},
												},
												Name: "group",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   100,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()",
											Start: ast.Position{
												Column: 11,
												Line:   95,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   100,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "max()",
												Start: ast.Position{
													Column: 6,
													Line:   100,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 9,
														Line:   100,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "max",
													Start: ast.Position{
														Column: 6,
														Line:   100,
													},
												},
											},
											Name: "max",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   101,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))",
										Start: ast.Position{
											Column: 11,
											Line:   95,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   101,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "fn: (r) => ({r with _time: influxql.epoch})",
												Start: ast.Position{
													Column: 10,
													Line:   101,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   101,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "fn: (r) => ({r with _time: influxql.epoch})",
													Start: ast.Position{
														Column: 10,
														Line:   101,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   101,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   101,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   101,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "(r) => ({r with _time: influxql.epoch})",
														Start: ast.Position{
															Column: 14,
															Line:   101,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   101,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "({r with _time: influxql.epoch})",
															Start: ast.Position{
																Column: 21,
																Line:   101,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   101,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "{r with _time: influxql.epoch}",
																Start: ast.Position{
																	Column: 22,
																	Line:   101,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   101,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "_time: influxql.epoch",
																	Start: ast.Position{
																		Column: 30,
																		Line:   101,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   101,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 30,
																			Line:   101,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   101,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "influxql.epoch",
																		Start: ast.Position{
																			Column: 37,
																			Line:   101,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   101,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 37,
																				Line:   101,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 51,
																				Line:   101,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "epoch",
																			Start: ast.Position{
																				Column: 46,
																				Line:   101,
																			},
																		},
																	},
																	Name: "epoch",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   101,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 23,
																		Line:   101,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   101,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 15,
																Line:   101,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   101,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 15,
																	Line:   101,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   101,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "map(fn: (r) => ({r with _time: influxql.epoch}))",
											Start: ast.Position{
												Column: 6,
												Line:   101,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   101,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 6,
													Line:   101,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   102,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> max()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
									Start: ast.Position{
										Column: 11,
										Line:   95,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   102,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
											Start: ast.Position{
												Column: 11,
												Line:   102,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   102,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
												Start: ast.Position{
													Column: 11,
													Line:   102,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   102,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 11,
														Line:   102,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   102,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "[\"_start\", \"_stop\", \"_field\"]",
													Start: ast.Position{
														Column: 20,
														Line:   102,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   102,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 21,
															Line:   102,
														},
													},
												},
												Value: "_start",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   102,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_stop\"",
														Start: ast.Position{
															Column: 31,
															Line:   102,
														},
													},
												},
												Value: "_stop",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   102,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_field\"",
														Start: ast.Position{
															Column: 40,
															Line:   102,
														},
													},
												},
												Value: "_field",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   102,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "drop(columns: [\"_start\", \"_stop\", \"_field\"])",
										Start: ast.Position{
											Column: 6,
											Line:   102,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   102,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "drop",
											Start: ast.Position{
												Column: 6,
												Line:   102,
											},
										},
									},
									Name: "drop",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 4,
									Line:   106,
								},
								File:   "aggregates_and_selectors_test.flux",
								Source: "results = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t})",
								Start: ast.Position{
									Column: 2,
									Line:   104,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   104,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "results",
									Start: ast.Position{
										Column: 2,
										Line:   104,
									},
								},
							},
							Name: "results",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 3,
											Line:   106,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t}",
										Start: ast.Position{
											Column: 24,
											Line:   104,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   104,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "left: field0",
											Start: ast.Position{
												Column: 24,
												Line:   104,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   104,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "left",
												Start: ast.Position{
													Column: 24,
													Line:   104,
												},
											},
										},
										Name: "left",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   104,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "field0",
												Start: ast.Position{
													Column: 30,
													Line:   104,
												},
											},
										},
										Name: "field0",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   104,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "right: field1",
											Start: ast.Position{
												Column: 38,
												Line:   104,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   104,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "right",
												Start: ast.Position{
													Column: 38,
													Line:   104,
												},
											},
										},
										Name: "right",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   104,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "field1",
												Start: ast.Position{
													Column: 45,
													Line:   104,
												},
											},
										},
										Name: "field1",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 3,
												Line:   106,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t}",
											Start: ast.Position{
												Column: 53,
												Line:   104,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   104,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 53,
													Line:   104,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 3,
													Line:   106,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "(left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t}",
												Start: ast.Position{
													Column: 57,
													Line:   104,
												},
											},
										},
										Body: &ast.Block{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 3,
														Line:   106,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "{\n\t\treturn {left with count: left._value, max: right._value}\n\t}",
													Start: ast.Position{
														Column: 74,
														Line:   104,
													},
												},
											},
											Body: []ast.Statement{&ast.ReturnStatement{
												Argument: &ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   105,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "{left with count: left._value, max: right._value}",
															Start: ast.Position{
																Column: 10,
																Line:   105,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   105,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "count: left._value",
																Start: ast.Position{
																	Column: 21,
																	Line:   105,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 26,
																		Line:   105,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "count",
																	Start: ast.Position{
																		Column: 21,
																		Line:   105,
																	},
																},
															},
															Name: "count",
														},
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   105,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "left._value",
																	Start: ast.Position{
																		Column: 28,
																		Line:   105,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   105,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "left",
																		Start: ast.Position{
																			Column: 28,
																			Line:   105,
																		},
																	},
																},
																Name: "left",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   105,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 33,
																			Line:   105,
																		},
																	},
																},
																Name: "_value",
															},
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   105,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "max: right._value",
																Start: ast.Position{
																	Column: 41,
																	Line:   105,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   105,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "max",
																	Start: ast.Position{
																		Column: 41,
																		Line:   105,
																	},
																},
															},
															Name: "max",
														},
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 58,
																		Line:   105,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "right._value",
																	Start: ast.Position{
																		Column: 46,
																		Line:   105,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   105,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "right",
																		Start: ast.Position{
																			Column: 46,
																			Line:   105,
																		},
																	},
																},
																Name: "right",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 58,
																			Line:   105,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 52,
																			Line:   105,
																		},
																	},
																},
																Name: "_value",
															},
														},
													}},
													With: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   105,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "left",
																Start: ast.Position{
																	Column: 11,
																	Line:   105,
																},
															},
														},
														Name: "left",
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   105,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "return {left with count: left._value, max: right._value}",
														Start: ast.Position{
															Column: 3,
															Line:   105,
														},
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   104,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "left",
													Start: ast.Position{
														Column: 58,
														Line:   104,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   104,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "left",
														Start: ast.Position{
															Column: 58,
															Line:   104,
														},
													},
												},
												Name: "left",
											},
											Value: nil,
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   104,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "right",
													Start: ast.Position{
														Column: 64,
														Line:   104,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 69,
															Line:   104,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "right",
														Start: ast.Position{
															Column: 64,
															Line:   104,
														},
													},
												},
												Name: "right",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 4,
										Line:   106,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, max: right._value}\n\t})",
									Start: ast.Position{
										Column: 12,
										Line:   104,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   104,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "promql.join",
										Start: ast.Position{
											Column: 12,
											Line:   104,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   104,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "promql",
											Start: ast.Position{
												Column: 12,
												Line:   104,
											},
										},
									},
									Name: "promql",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   104,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "join",
											Start: ast.Position{
												Column: 19,
												Line:   104,
											},
										},
									},
									Name: "join",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   107,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "results",
											Start: ast.Position{
												Column: 9,
												Line:   107,
											},
										},
									},
									Name: "results",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   108,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))",
										Start: ast.Position{
											Column: 9,
											Line:   107,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   108,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "fn: (r) => ({r with time: influxql.epoch})",
												Start: ast.Position{
													Column: 10,
													Line:   108,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 52,
														Line:   108,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "fn: (r) => ({r with time: influxql.epoch})",
													Start: ast.Position{
														Column: 10,
														Line:   108,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   108,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   108,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   108,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "(r) => ({r with time: influxql.epoch})",
														Start: ast.Position{
															Column: 14,
															Line:   108,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   108,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "({r with time: influxql.epoch})",
															Start: ast.Position{
																Column: 21,
																Line:   108,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 51,
																	Line:   108,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "{r with time: influxql.epoch}",
																Start: ast.Position{
																	Column: 22,
																	Line:   108,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   108,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "time: influxql.epoch",
																	Start: ast.Position{
																		Column: 30,
																		Line:   108,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   108,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "time",
																		Start: ast.Position{
																			Column: 30,
																			Line:   108,
																		},
																	},
																},
																Name: "time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   108,
																		},
																		File:   "aggregates_and_selectors_test.flux",
																		Source: "influxql.epoch",
																		Start: ast.Position{
																			Column: 36,
																			Line:   108,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 44,
																				Line:   108,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 36,
																				Line:   108,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   108,
																			},
																			File:   "aggregates_and_selectors_test.flux",
																			Source: "epoch",
																			Start: ast.Position{
																				Column: 45,
																				Line:   108,
																			},
																		},
																	},
																	Name: "epoch",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   108,
																	},
																	File:   "aggregates_and_selectors_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 23,
																		Line:   108,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   108,
															},
															File:   "aggregates_and_selectors_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 15,
																Line:   108,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   108,
																},
																File:   "aggregates_and_selectors_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 15,
																	Line:   108,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   108,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "map(fn: (r) => ({r with time: influxql.epoch}))",
											Start: ast.Position{
												Column: 6,
												Line:   108,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   108,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 6,
													Line:   108,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   109,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])",
									Start: ast.Position{
										Column: 9,
										Line:   107,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   109,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "columns: [\"_time\", \"_value\"]",
											Start: ast.Position{
												Column: 11,
												Line:   109,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   109,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "columns: [\"_time\", \"_value\"]",
												Start: ast.Position{
													Column: 11,
													Line:   109,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   109,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 11,
														Line:   109,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   109,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "[\"_time\", \"_value\"]",
													Start: ast.Position{
														Column: 20,
														Line:   109,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   109,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 21,
															Line:   109,
														},
													},
												},
												Value: "_time",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   109,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "\"_value\"",
														Start: ast.Position{
															Column: 30,
															Line:   109,
														},
													},
												},
												Value: "_value",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   109,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "drop(columns: [\"_time\", \"_value\"])",
										Start: ast.Position{
											Column: 6,
											Line:   109,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   109,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "drop",
											Start: ast.Position{
												Column: 6,
												Line:   109,
											},
										},
									},
									Name: "drop",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   109,
								},
								File:   "aggregates_and_selectors_test.flux",
								Source: "return results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])",
								Start: ast.Position{
									Column: 2,
									Line:   107,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   85,
							},
							File:   "aggregates_and_selectors_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 31,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   85,
								},
								File:   "aggregates_and_selectors_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 31,
									Line:   85,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   85,
							},
							File:   "aggregates_and_selectors_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 38,
								Line:   85,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   116,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "_aggregates_and_selectors = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregates_and_selectors,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   112,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   112,
							},
							File:   "aggregates_and_selectors_test.flux",
							Source: "_aggregates_and_selectors",
							Start: ast.Position{
								Column: 6,
								Line:   112,
							},
						},
					},
					Name: "_aggregates_and_selectors",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   116,
							},
							File:   "aggregates_and_selectors_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregates_and_selectors,\n})",
							Start: ast.Position{
								Column: 34,
								Line:   112,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   116,
								},
								File:   "aggregates_and_selectors_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregates_and_selectors,\n})",
								Start: ast.Position{
									Column: 40,
									Line:   112,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   116,
									},
									File:   "aggregates_and_selectors_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregates_and_selectors,\n}",
									Start: ast.Position{
										Column: 41,
										Line:   112,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   113,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   113,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   113,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   113,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   113,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   113,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   113,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   113,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   113,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   113,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   113,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   113,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   113,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   113,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   113,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   113,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   113,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   113,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   113,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   113,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   114,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   114,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   114,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   114,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   114,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   114,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   114,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   114,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   114,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   114,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   114,
														},
														File:   "aggregates_and_selectors_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   114,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   114,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   114,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   114,
												},
												File:   "aggregates_and_selectors_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   114,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   114,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   114,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   114,
													},
													File:   "aggregates_and_selectors_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   114,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   115,
										},
										File:   "aggregates_and_selectors_test.flux",
										Source: "fn: t_aggregates_and_selectors",
										Start: ast.Position{
											Column: 2,
											Line:   115,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   115,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   115,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   115,
											},
											File:   "aggregates_and_selectors_test.flux",
											Source: "t_aggregates_and_selectors",
											Start: ast.Position{
												Column: 6,
												Line:   115,
											},
										},
									},
									Name: "t_aggregates_and_selectors",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   116,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "test _aggregates_and_selectors = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregates_and_selectors,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   112,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   5,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "import \"internal/promql\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   5,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "\"internal/promql\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "internal/promql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "aggregates_and_selectors_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "aggregates_and_selectors_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "aggregates_and_selectors_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   116,
				},
				File:   "multiple_aggregates_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\nimport \"internal/promql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,sum\n,,0,cpu,1970-01-01T00:00:00Z,60,-589.8118457731923\n\"\n\n// SELECT count(\"value\"), sum(\"value\") FROM cpu\nt_multiple_aggregates = (tables=<-) => {\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}\n\ntest _multiple_aggregates = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_multiple_aggregates,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   7,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   7,
							},
							File:   "multiple_aggregates_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   7,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   7,
							},
							File:   "multiple_aggregates_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   7,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   7,
								},
								File:   "multiple_aggregates_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   7,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   7,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   74,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   9,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   74,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   9,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   82,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,sum\n,,0,cpu,1970-01-01T00:00:00Z,60,-589.8118457731923\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   76,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   76,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   76,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   82,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,sum\n,,0,cpu,1970-01-01T00:00:00Z,60,-589.8118457731923\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   76,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,long,double\n#group,false,false,true,false,false,false\n#default,_result,,,,,\n,result,table,_measurement,time,count,sum\n,,0,cpu,1970-01-01T00:00:00Z,60,-589.8118457731923\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   110,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "t_multiple_aggregates = (tables=<-) => {\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   85,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "t_multiple_aggregates",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "t_multiple_aggregates",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   110,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "(tables=<-) => {\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}",
						Start: ast.Position{
							Column: 25,
							Line:   85,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   110,
							},
							File:   "multiple_aggregates_test.flux",
							Source: "{\n\tfield0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tfield1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])\n\n\tresults = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t})\n\treturn results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])\n}",
							Start: ast.Position{
								Column: 40,
								Line:   85,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   93,
								},
								File:   "multiple_aggregates_test.flux",
								Source: "field0 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
								Start: ast.Position{
									Column: 2,
									Line:   86,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   86,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "field0",
									Start: ast.Position{
										Column: 2,
										Line:   86,
									},
								},
							},
							Name: "field0",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   86,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 11,
																	Line:   86,
																},
															},
														},
														Name: "tables",
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   87,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)",
															Start: ast.Position{
																Column: 11,
																Line:   86,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   87,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "start: influxql.minTime, stop: influxql.maxTime",
																	Start: ast.Position{
																		Column: 12,
																		Line:   87,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   87,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "start: influxql.minTime",
																		Start: ast.Position{
																			Column: 12,
																			Line:   87,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 17,
																				Line:   87,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "start",
																			Start: ast.Position{
																				Column: 12,
																				Line:   87,
																			},
																		},
																	},
																	Name: "start",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   87,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "influxql.minTime",
																			Start: ast.Position{
																				Column: 19,
																				Line:   87,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 27,
																					Line:   87,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 19,
																					Line:   87,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   87,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "minTime",
																				Start: ast.Position{
																					Column: 28,
																					Line:   87,
																				},
																			},
																		},
																		Name: "minTime",
																	},
																},
															}, &ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 59,
																			Line:   87,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "stop: influxql.maxTime",
																		Start: ast.Position{
																			Column: 37,
																			Line:   87,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 41,
																				Line:   87,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "stop",
																			Start: ast.Position{
																				Column: 37,
																				Line:   87,
																			},
																		},
																	},
																	Name: "stop",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 59,
																				Line:   87,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "influxql.maxTime",
																			Start: ast.Position{
																				Column: 43,
																				Line:   87,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 51,
																					Line:   87,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 43,
																					Line:   87,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 59,
																					Line:   87,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "maxTime",
																				Start: ast.Position{
																					Column: 52,
																					Line:   87,
																				},
																			},
																		},
																		Name: "maxTime",
																	},
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   87,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "range(start: influxql.minTime, stop: influxql.maxTime)",
																Start: ast.Position{
																	Column: 6,
																	Line:   87,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 11,
																		Line:   87,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "range",
																	Start: ast.Position{
																		Column: 6,
																		Line:   87,
																	},
																},
															},
															Name: "range",
														},
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   88,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 11,
															Line:   86,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   88,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   88,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   88,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "fn: (r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   88,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 15,
																			Line:   88,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 13,
																			Line:   88,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   88,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "(r) => r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 17,
																			Line:   88,
																		},
																	},
																},
																Body: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 47,
																				Line:   88,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r._measurement == \"cpu\"",
																			Start: ast.Position{
																				Column: 24,
																				Line:   88,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   88,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "r._measurement",
																				Start: ast.Position{
																					Column: 24,
																					Line:   88,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 25,
																						Line:   88,
																					},
																					File:   "multiple_aggregates_test.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 24,
																						Line:   88,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 38,
																						Line:   88,
																					},
																					File:   "multiple_aggregates_test.flux",
																					Source: "_measurement",
																					Start: ast.Position{
																						Column: 26,
																						Line:   88,
																					},
																				},
																			},
																			Name: "_measurement",
																		},
																	},
																	Operator: 17,
																	Right: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   88,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "\"cpu\"",
																				Start: ast.Position{
																					Column: 42,
																					Line:   88,
																				},
																			},
																		},
																		Value: "cpu",
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   88,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   88,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 19,
																					Line:   88,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 18,
																					Line:   88,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   88,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "filter(fn: (r) => r._measurement == \"cpu\")",
															Start: ast.Position{
																Column: 6,
																Line:   88,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 12,
																	Line:   88,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "filter",
																Start: ast.Position{
																	Column: 6,
																	Line:   88,
																},
															},
														},
														Name: "filter",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   89,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")",
													Start: ast.Position{
														Column: 11,
														Line:   86,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   89,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "fn: (r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 13,
																Line:   89,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   89,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "fn: (r) => r._field == \"value\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   89,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 15,
																		Line:   89,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 13,
																		Line:   89,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   89,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "(r) => r._field == \"value\"",
																	Start: ast.Position{
																		Column: 17,
																		Line:   89,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   89,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "r._field == \"value\"",
																		Start: ast.Position{
																			Column: 24,
																			Line:   89,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 32,
																				Line:   89,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 24,
																				Line:   89,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 25,
																					Line:   89,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 24,
																					Line:   89,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 32,
																					Line:   89,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 26,
																					Line:   89,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
																Operator: 17,
																Right: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   89,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "\"value\"",
																			Start: ast.Position{
																				Column: 36,
																				Line:   89,
																			},
																		},
																	},
																	Value: "value",
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   89,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 18,
																			Line:   89,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   89,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   89,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   89,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "filter(fn: (r) => r._field == \"value\")",
														Start: ast.Position{
															Column: 6,
															Line:   89,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 12,
																Line:   89,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 6,
																Line:   89,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   90,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
												Start: ast.Position{
													Column: 11,
													Line:   86,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   90,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
														Start: ast.Position{
															Column: 12,
															Line:   90,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   90,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "columns: [\"_measurement\", \"_field\"]",
															Start: ast.Position{
																Column: 12,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   90,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 12,
																	Line:   90,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   90,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "[\"_measurement\", \"_field\"]",
																Start: ast.Position{
																	Column: 21,
																	Line:   90,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   90,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "\"_measurement\"",
																	Start: ast.Position{
																		Column: 22,
																		Line:   90,
																	},
																},
															},
															Value: "_measurement",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   90,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "\"_field\"",
																	Start: ast.Position{
																		Column: 38,
																		Line:   90,
																	},
																},
															},
															Value: "_field",
														}},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   90,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "mode: \"by\"",
															Start: ast.Position{
																Column: 49,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   90,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "mode",
																Start: ast.Position{
																	Column: 49,
																	Line:   90,
																},
															},
														},
														Name: "mode",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 59,
																	Line:   90,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "\"by\"",
																Start: ast.Position{
																	Column: 55,
																	Line:   90,
																},
															},
														},
														Value: "by",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   90,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
													Start: ast.Position{
														Column: 6,
														Line:   90,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   90,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "group",
														Start: ast.Position{
															Column: 6,
															Line:   90,
														},
													},
												},
												Name: "group",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   91,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()",
											Start: ast.Position{
												Column: 11,
												Line:   86,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   91,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "count()",
												Start: ast.Position{
													Column: 6,
													Line:   91,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   91,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "count",
													Start: ast.Position{
														Column: 6,
														Line:   91,
													},
												},
											},
											Name: "count",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   92,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))",
										Start: ast.Position{
											Column: 11,
											Line:   86,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   92,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "fn: (r) => ({r with _time: influxql.epoch})",
												Start: ast.Position{
													Column: 10,
													Line:   92,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   92,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "fn: (r) => ({r with _time: influxql.epoch})",
													Start: ast.Position{
														Column: 10,
														Line:   92,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   92,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   92,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   92,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "(r) => ({r with _time: influxql.epoch})",
														Start: ast.Position{
															Column: 14,
															Line:   92,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   92,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "({r with _time: influxql.epoch})",
															Start: ast.Position{
																Column: 21,
																Line:   92,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   92,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "{r with _time: influxql.epoch}",
																Start: ast.Position{
																	Column: 22,
																	Line:   92,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   92,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "_time: influxql.epoch",
																	Start: ast.Position{
																		Column: 30,
																		Line:   92,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   92,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 30,
																			Line:   92,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   92,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "influxql.epoch",
																		Start: ast.Position{
																			Column: 37,
																			Line:   92,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   92,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 37,
																				Line:   92,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 51,
																				Line:   92,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "epoch",
																			Start: ast.Position{
																				Column: 46,
																				Line:   92,
																			},
																		},
																	},
																	Name: "epoch",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   92,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 23,
																		Line:   92,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   92,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 15,
																Line:   92,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   92,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 15,
																	Line:   92,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   92,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "map(fn: (r) => ({r with _time: influxql.epoch}))",
											Start: ast.Position{
												Column: 6,
												Line:   92,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   92,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 6,
													Line:   92,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   93,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> count()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
									Start: ast.Position{
										Column: 11,
										Line:   86,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   93,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
											Start: ast.Position{
												Column: 11,
												Line:   93,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   93,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
												Start: ast.Position{
													Column: 11,
													Line:   93,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   93,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 11,
														Line:   93,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   93,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "[\"_start\", \"_stop\", \"_field\"]",
													Start: ast.Position{
														Column: 20,
														Line:   93,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   93,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 21,
															Line:   93,
														},
													},
												},
												Value: "_start",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   93,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_stop\"",
														Start: ast.Position{
															Column: 31,
															Line:   93,
														},
													},
												},
												Value: "_stop",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   93,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_field\"",
														Start: ast.Position{
															Column: 40,
															Line:   93,
														},
													},
												},
												Value: "_field",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   93,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "drop(columns: [\"_start\", \"_stop\", \"_field\"])",
										Start: ast.Position{
											Column: 6,
											Line:   93,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   93,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "drop",
											Start: ast.Position{
												Column: 6,
												Line:   93,
											},
										},
									},
									Name: "drop",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   102,
								},
								File:   "multiple_aggregates_test.flux",
								Source: "field1 = tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
								Start: ast.Position{
									Column: 2,
									Line:   95,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   95,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "field1",
									Start: ast.Position{
										Column: 2,
										Line:   95,
									},
								},
							},
							Name: "field1",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   95,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 11,
																	Line:   95,
																},
															},
														},
														Name: "tables",
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   96,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)",
															Start: ast.Position{
																Column: 11,
																Line:   95,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   96,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "start: influxql.minTime, stop: influxql.maxTime",
																	Start: ast.Position{
																		Column: 12,
																		Line:   96,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   96,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "start: influxql.minTime",
																		Start: ast.Position{
																			Column: 12,
																			Line:   96,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 17,
																				Line:   96,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "start",
																			Start: ast.Position{
																				Column: 12,
																				Line:   96,
																			},
																		},
																	},
																	Name: "start",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   96,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "influxql.minTime",
																			Start: ast.Position{
																				Column: 19,
																				Line:   96,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 27,
																					Line:   96,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 19,
																					Line:   96,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   96,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "minTime",
																				Start: ast.Position{
																					Column: 28,
																					Line:   96,
																				},
																			},
																		},
																		Name: "minTime",
																	},
																},
															}, &ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 59,
																			Line:   96,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "stop: influxql.maxTime",
																		Start: ast.Position{
																			Column: 37,
																			Line:   96,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 41,
																				Line:   96,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "stop",
																			Start: ast.Position{
																				Column: 37,
																				Line:   96,
																			},
																		},
																	},
																	Name: "stop",
																},
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 59,
																				Line:   96,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "influxql.maxTime",
																			Start: ast.Position{
																				Column: 43,
																				Line:   96,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 51,
																					Line:   96,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "influxql",
																				Start: ast.Position{
																					Column: 43,
																					Line:   96,
																				},
																			},
																		},
																		Name: "influxql",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 59,
																					Line:   96,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "maxTime",
																				Start: ast.Position{
																					Column: 52,
																					Line:   96,
																				},
																			},
																		},
																		Name: "maxTime",
																	},
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   96,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "range(start: influxql.minTime, stop: influxql.maxTime)",
																Start: ast.Position{
																	Column: 6,
																	Line:   96,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 11,
																		Line:   96,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "range",
																	Start: ast.Position{
																		Column: 6,
																		Line:   96,
																	},
																},
															},
															Name: "range",
														},
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   97,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")",
														Start: ast.Position{
															Column: 11,
															Line:   95,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   97,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "fn: (r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   97,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   97,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "fn: (r) => r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   97,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 15,
																			Line:   97,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 13,
																			Line:   97,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   97,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "(r) => r._measurement == \"cpu\"",
																		Start: ast.Position{
																			Column: 17,
																			Line:   97,
																		},
																	},
																},
																Body: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 47,
																				Line:   97,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r._measurement == \"cpu\"",
																			Start: ast.Position{
																				Column: 24,
																				Line:   97,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   97,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "r._measurement",
																				Start: ast.Position{
																					Column: 24,
																					Line:   97,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 25,
																						Line:   97,
																					},
																					File:   "multiple_aggregates_test.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 24,
																						Line:   97,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 38,
																						Line:   97,
																					},
																					File:   "multiple_aggregates_test.flux",
																					Source: "_measurement",
																					Start: ast.Position{
																						Column: 26,
																						Line:   97,
																					},
																				},
																			},
																			Name: "_measurement",
																		},
																	},
																	Operator: 17,
																	Right: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   97,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "\"cpu\"",
																				Start: ast.Position{
																					Column: 42,
																					Line:   97,
																				},
																			},
																		},
																		Value: "cpu",
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   97,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   97,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 19,
																					Line:   97,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 18,
																					Line:   97,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   97,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "filter(fn: (r) => r._measurement == \"cpu\")",
															Start: ast.Position{
																Column: 6,
																Line:   97,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 12,
																	Line:   97,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "filter",
																Start: ast.Position{
																	Column: 6,
																	Line:   97,
																},
															},
														},
														Name: "filter",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   98,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")",
													Start: ast.Position{
														Column: 11,
														Line:   95,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   98,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "fn: (r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 13,
																Line:   98,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   98,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "fn: (r) => r._field == \"value\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   98,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 15,
																		Line:   98,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 13,
																		Line:   98,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   98,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "(r) => r._field == \"value\"",
																	Start: ast.Position{
																		Column: 17,
																		Line:   98,
																	},
																},
															},
															Body: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   98,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "r._field == \"value\"",
																		Start: ast.Position{
																			Column: 24,
																			Line:   98,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 32,
																				Line:   98,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 24,
																				Line:   98,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 25,
																					Line:   98,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 24,
																					Line:   98,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 32,
																					Line:   98,
																				},
																				File:   "multiple_aggregates_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 26,
																					Line:   98,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
																Operator: 17,
																Right: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   98,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "\"value\"",
																			Start: ast.Position{
																				Column: 36,
																				Line:   98,
																			},
																		},
																	},
																	Value: "value",
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   98,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 18,
																			Line:   98,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   98,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   98,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   98,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "filter(fn: (r) => r._field == \"value\")",
														Start: ast.Position{
															Column: 6,
															Line:   98,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 12,
																Line:   98,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 6,
																Line:   98,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   99,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
												Start: ast.Position{
													Column: 11,
													Line:   95,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   99,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
														Start: ast.Position{
															Column: 12,
															Line:   99,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   99,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "columns: [\"_measurement\", \"_field\"]",
															Start: ast.Position{
																Column: 12,
																Line:   99,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   99,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 12,
																	Line:   99,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   99,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "[\"_measurement\", \"_field\"]",
																Start: ast.Position{
																	Column: 21,
																	Line:   99,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   99,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "\"_measurement\"",
																	Start: ast.Position{
																		Column: 22,
																		Line:   99,
																	},
																},
															},
															Value: "_measurement",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   99,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "\"_field\"",
																	Start: ast.Position{
																		Column: 38,
																		Line:   99,
																	},
																},
															},
															Value: "_field",
														}},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   99,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "mode: \"by\"",
															Start: ast.Position{
																Column: 49,
																Line:   99,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 53,
																	Line:   99,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "mode",
																Start: ast.Position{
																	Column: 49,
																	Line:   99,
																},
															},
														},
														Name: "mode",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 59,
																	Line:   99,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "\"by\"",
																Start: ast.Position{
																	Column: 55,
																	Line:   99,
																},
															},
														},
														Value: "by",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   99,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
													Start: ast.Position{
														Column: 6,
														Line:   99,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   99,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "group",
														Start: ast.Position{
															Column: 6,
															Line:   99,
														},
													},
												},
												Name: "group",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   100,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()",
											Start: ast.Position{
												Column: 11,
												Line:   95,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   100,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "sum()",
												Start: ast.Position{
													Column: 6,
													Line:   100,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 9,
														Line:   100,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "sum",
													Start: ast.Position{
														Column: 6,
														Line:   100,
													},
												},
											},
											Name: "sum",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   101,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))",
										Start: ast.Position{
											Column: 11,
											Line:   95,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   101,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "fn: (r) => ({r with _time: influxql.epoch})",
												Start: ast.Position{
													Column: 10,
													Line:   101,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   101,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "fn: (r) => ({r with _time: influxql.epoch})",
													Start: ast.Position{
														Column: 10,
														Line:   101,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   101,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   101,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   101,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "(r) => ({r with _time: influxql.epoch})",
														Start: ast.Position{
															Column: 14,
															Line:   101,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   101,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "({r with _time: influxql.epoch})",
															Start: ast.Position{
																Column: 21,
																Line:   101,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   101,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "{r with _time: influxql.epoch}",
																Start: ast.Position{
																	Column: 22,
																	Line:   101,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   101,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "_time: influxql.epoch",
																	Start: ast.Position{
																		Column: 30,
																		Line:   101,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   101,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 30,
																			Line:   101,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   101,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "influxql.epoch",
																		Start: ast.Position{
																			Column: 37,
																			Line:   101,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   101,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 37,
																				Line:   101,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 51,
																				Line:   101,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "epoch",
																			Start: ast.Position{
																				Column: 46,
																				Line:   101,
																			},
																		},
																	},
																	Name: "epoch",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   101,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 23,
																		Line:   101,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   101,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 15,
																Line:   101,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   101,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 15,
																	Line:   101,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   101,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "map(fn: (r) => ({r with _time: influxql.epoch}))",
											Start: ast.Position{
												Column: 6,
												Line:   101,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   101,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 6,
													Line:   101,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   102,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "tables\n\t\t|> range(start: influxql.minTime, stop: influxql.maxTime)\n\t\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t\t|> filter(fn: (r) => r._field == \"value\")\n\t\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t\t|> sum()\n\t\t|> map(fn: (r) => ({r with _time: influxql.epoch}))\n\t\t|> drop(columns: [\"_start\", \"_stop\", \"_field\"])",
									Start: ast.Position{
										Column: 11,
										Line:   95,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   102,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
											Start: ast.Position{
												Column: 11,
												Line:   102,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   102,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "columns: [\"_start\", \"_stop\", \"_field\"]",
												Start: ast.Position{
													Column: 11,
													Line:   102,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   102,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 11,
														Line:   102,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   102,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "[\"_start\", \"_stop\", \"_field\"]",
													Start: ast.Position{
														Column: 20,
														Line:   102,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   102,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 21,
															Line:   102,
														},
													},
												},
												Value: "_start",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   102,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_stop\"",
														Start: ast.Position{
															Column: 31,
															Line:   102,
														},
													},
												},
												Value: "_stop",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   102,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_field\"",
														Start: ast.Position{
															Column: 40,
															Line:   102,
														},
													},
												},
												Value: "_field",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   102,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "drop(columns: [\"_start\", \"_stop\", \"_field\"])",
										Start: ast.Position{
											Column: 6,
											Line:   102,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   102,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "drop",
											Start: ast.Position{
												Column: 6,
												Line:   102,
											},
										},
									},
									Name: "drop",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 4,
									Line:   106,
								},
								File:   "multiple_aggregates_test.flux",
								Source: "results = promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t})",
								Start: ast.Position{
									Column: 2,
									Line:   104,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   104,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "results",
									Start: ast.Position{
										Column: 2,
										Line:   104,
									},
								},
							},
							Name: "results",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 3,
											Line:   106,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t}",
										Start: ast.Position{
											Column: 24,
											Line:   104,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   104,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "left: field0",
											Start: ast.Position{
												Column: 24,
												Line:   104,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   104,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "left",
												Start: ast.Position{
													Column: 24,
													Line:   104,
												},
											},
										},
										Name: "left",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   104,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "field0",
												Start: ast.Position{
													Column: 30,
													Line:   104,
												},
											},
										},
										Name: "field0",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   104,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "right: field1",
											Start: ast.Position{
												Column: 38,
												Line:   104,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   104,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "right",
												Start: ast.Position{
													Column: 38,
													Line:   104,
												},
											},
										},
										Name: "right",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   104,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "field1",
												Start: ast.Position{
													Column: 45,
													Line:   104,
												},
											},
										},
										Name: "field1",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 3,
												Line:   106,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t}",
											Start: ast.Position{
												Column: 53,
												Line:   104,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   104,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 53,
													Line:   104,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 3,
													Line:   106,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "(left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t}",
												Start: ast.Position{
													Column: 57,
													Line:   104,
												},
											},
										},
										Body: &ast.Block{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 3,
														Line:   106,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "{\n\t\treturn {left with count: left._value, sum: right._value}\n\t}",
													Start: ast.Position{
														Column: 74,
														Line:   104,
													},
												},
											},
											Body: []ast.Statement{&ast.ReturnStatement{
												Argument: &ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   105,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "{left with count: left._value, sum: right._value}",
															Start: ast.Position{
																Column: 10,
																Line:   105,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   105,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "count: left._value",
																Start: ast.Position{
																	Column: 21,
																	Line:   105,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 26,
																		Line:   105,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "count",
																	Start: ast.Position{
																		Column: 21,
																		Line:   105,
																	},
																},
															},
															Name: "count",
														},
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   105,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "left._value",
																	Start: ast.Position{
																		Column: 28,
																		Line:   105,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   105,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "left",
																		Start: ast.Position{
																			Column: 28,
																			Line:   105,
																		},
																	},
																},
																Name: "left",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   105,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 33,
																			Line:   105,
																		},
																	},
																},
																Name: "_value",
															},
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   105,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "sum: right._value",
																Start: ast.Position{
																	Column: 41,
																	Line:   105,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   105,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "sum",
																	Start: ast.Position{
																		Column: 41,
																		Line:   105,
																	},
																},
															},
															Name: "sum",
														},
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 58,
																		Line:   105,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "right._value",
																	Start: ast.Position{
																		Column: 46,
																		Line:   105,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   105,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "right",
																		Start: ast.Position{
																			Column: 46,
																			Line:   105,
																		},
																	},
																},
																Name: "right",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 58,
																			Line:   105,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 52,
																			Line:   105,
																		},
																	},
																},
																Name: "_value",
															},
														},
													}},
													With: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   105,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "left",
																Start: ast.Position{
																	Column: 11,
																	Line:   105,
																},
															},
														},
														Name: "left",
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   105,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "return {left with count: left._value, sum: right._value}",
														Start: ast.Position{
															Column: 3,
															Line:   105,
														},
													},
												},
											}},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   104,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "left",
													Start: ast.Position{
														Column: 58,
														Line:   104,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   104,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "left",
														Start: ast.Position{
															Column: 58,
															Line:   104,
														},
													},
												},
												Name: "left",
											},
											Value: nil,
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   104,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "right",
													Start: ast.Position{
														Column: 64,
														Line:   104,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 69,
															Line:   104,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "right",
														Start: ast.Position{
															Column: 64,
															Line:   104,
														},
													},
												},
												Name: "right",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 4,
										Line:   106,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "promql.join(left: field0, right: field1, fn: (left, right) => {\n\t\treturn {left with count: left._value, sum: right._value}\n\t})",
									Start: ast.Position{
										Column: 12,
										Line:   104,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   104,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "promql.join",
										Start: ast.Position{
											Column: 12,
											Line:   104,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   104,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "promql",
											Start: ast.Position{
												Column: 12,
												Line:   104,
											},
										},
									},
									Name: "promql",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   104,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "join",
											Start: ast.Position{
												Column: 19,
												Line:   104,
											},
										},
									},
									Name: "join",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   107,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "results",
											Start: ast.Position{
												Column: 9,
												Line:   107,
											},
										},
									},
									Name: "results",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   108,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))",
										Start: ast.Position{
											Column: 9,
											Line:   107,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   108,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "fn: (r) => ({r with time: influxql.epoch})",
												Start: ast.Position{
													Column: 10,
													Line:   108,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 52,
														Line:   108,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "fn: (r) => ({r with time: influxql.epoch})",
													Start: ast.Position{
														Column: 10,
														Line:   108,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   108,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   108,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   108,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "(r) => ({r with time: influxql.epoch})",
														Start: ast.Position{
															Column: 14,
															Line:   108,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   108,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "({r with time: influxql.epoch})",
															Start: ast.Position{
																Column: 21,
																Line:   108,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 51,
																	Line:   108,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "{r with time: influxql.epoch}",
																Start: ast.Position{
																	Column: 22,
																	Line:   108,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   108,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "time: influxql.epoch",
																	Start: ast.Position{
																		Column: 30,
																		Line:   108,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   108,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "time",
																		Start: ast.Position{
																			Column: 30,
																			Line:   108,
																		},
																	},
																},
																Name: "time",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   108,
																		},
																		File:   "multiple_aggregates_test.flux",
																		Source: "influxql.epoch",
																		Start: ast.Position{
																			Column: 36,
																			Line:   108,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 44,
																				Line:   108,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "influxql",
																			Start: ast.Position{
																				Column: 36,
																				Line:   108,
																			},
																		},
																	},
																	Name: "influxql",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   108,
																			},
																			File:   "multiple_aggregates_test.flux",
																			Source: "epoch",
																			Start: ast.Position{
																				Column: 45,
																				Line:   108,
																			},
																		},
																	},
																	Name: "epoch",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   108,
																	},
																	File:   "multiple_aggregates_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 23,
																		Line:   108,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   108,
															},
															File:   "multiple_aggregates_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 15,
																Line:   108,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   108,
																},
																File:   "multiple_aggregates_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 15,
																	Line:   108,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   108,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "map(fn: (r) => ({r with time: influxql.epoch}))",
											Start: ast.Position{
												Column: 6,
												Line:   108,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   108,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "map",
												Start: ast.Position{
													Column: 6,
													Line:   108,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   109,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])",
									Start: ast.Position{
										Column: 9,
										Line:   107,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   109,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "columns: [\"_time\", \"_value\"]",
											Start: ast.Position{
												Column: 11,
												Line:   109,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   109,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "columns: [\"_time\", \"_value\"]",
												Start: ast.Position{
													Column: 11,
													Line:   109,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   109,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 11,
														Line:   109,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   109,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "[\"_time\", \"_value\"]",
													Start: ast.Position{
														Column: 20,
														Line:   109,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   109,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 21,
															Line:   109,
														},
													},
												},
												Value: "_time",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   109,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "\"_value\"",
														Start: ast.Position{
															Column: 30,
															Line:   109,
														},
													},
												},
												Value: "_value",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   109,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "drop(columns: [\"_time\", \"_value\"])",
										Start: ast.Position{
											Column: 6,
											Line:   109,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   109,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "drop",
											Start: ast.Position{
												Column: 6,
												Line:   109,
											},
										},
									},
									Name: "drop",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   109,
								},
								File:   "multiple_aggregates_test.flux",
								Source: "return results\n\t\t|> map(fn: (r) => ({r with time: influxql.epoch}))\n\t\t|> drop(columns: [\"_time\", \"_value\"])",
								Start: ast.Position{
									Column: 2,
									Line:   107,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   85,
							},
							File:   "multiple_aggregates_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 26,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   85,
								},
								File:   "multiple_aggregates_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 26,
									Line:   85,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   85,
							},
							File:   "multiple_aggregates_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 33,
								Line:   85,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   116,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "_multiple_aggregates = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_multiple_aggregates,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   112,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   112,
							},
							File:   "multiple_aggregates_test.flux",
							Source: "_multiple_aggregates",
							Start: ast.Position{
								Column: 6,
								Line:   112,
							},
						},
					},
					Name: "_multiple_aggregates",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   116,
							},
							File:   "multiple_aggregates_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_multiple_aggregates,\n})",
							Start: ast.Position{
								Column: 29,
								Line:   112,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   116,
								},
								File:   "multiple_aggregates_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_multiple_aggregates,\n})",
								Start: ast.Position{
									Column: 35,
									Line:   112,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   116,
									},
									File:   "multiple_aggregates_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_multiple_aggregates,\n}",
									Start: ast.Position{
										Column: 36,
										Line:   112,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   113,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   113,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   113,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   113,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   113,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   113,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   113,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   113,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   113,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   113,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   113,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   113,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   113,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   113,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   113,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   113,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   113,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   113,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   113,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   113,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   114,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   114,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   114,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   114,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   114,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   114,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   114,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   114,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   114,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   114,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   114,
														},
														File:   "multiple_aggregates_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   114,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   114,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   114,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   114,
												},
												File:   "multiple_aggregates_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   114,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   114,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   114,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   114,
													},
													File:   "multiple_aggregates_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   114,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   115,
										},
										File:   "multiple_aggregates_test.flux",
										Source: "fn: t_multiple_aggregates",
										Start: ast.Position{
											Column: 2,
											Line:   115,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   115,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   115,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   115,
											},
											File:   "multiple_aggregates_test.flux",
											Source: "t_multiple_aggregates",
											Start: ast.Position{
												Column: 6,
												Line:   115,
											},
										},
									},
									Name: "t_multiple_aggregates",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   116,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "test _multiple_aggregates = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_multiple_aggregates,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   112,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   5,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "import \"internal/promql\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   5,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "\"internal/promql\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "internal/promql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "multiple_aggregates_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "multiple_aggregates_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "multiple_aggregates_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 3,
					Line:   100,
				},
				File:   "selector_max_window_test.flux",
				Source: "package influxql_test\n\nimport \"testing\"\nimport \"internal/influxql\"\n\noption now = () => 2019-10-24T19:07:30Z\n\ninData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"\n\noutData = \"\n#datatype,string,long,string,dateTime:RFC3339,double\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,max\n,,0,cpu,2019-10-24T19:06:30Z,126.51192216762033\n,,0,cpu,2019-10-24T19:07:00Z,114.285955884979\n\"\n\n// SELECT count(\"value\") FROM cpu WHERE time >= now() - 1m GROUP BY time(30s)\nt_aggregate_count_window = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, max: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])\n\ntest _aggregate_count_window = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   6,
						},
						File:   "selector_max_window_test.flux",
						Source: "now = () => 2019-10-24T19:07:30Z",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   6,
							},
							File:   "selector_max_window_test.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   6,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   6,
							},
							File:   "selector_max_window_test.flux",
							Source: "() => 2019-10-24T19:07:30Z",
							Start: ast.Position{
								Column: 14,
								Line:   6,
							},
						},
					},
					Body: &ast.DateTimeLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   6,
								},
								File:   "selector_max_window_test.flux",
								Source: "2019-10-24T19:07:30Z",
								Start: ast.Position{
									Column: 20,
									Line:   6,
								},
							},
						},
						Value: parser.MustParseTime("2019-10-24T19:07:30Z"),
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   6,
					},
					File:   "selector_max_window_test.flux",
					Source: "option now = () => 2019-10-24T19:07:30Z",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   73,
					},
					File:   "selector_max_window_test.flux",
					Source: "inData = \"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   8,
						},
						File:   "selector_max_window_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   73,
						},
						File:   "selector_max_window_test.flux",
						Source: "\"\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,string,dateTime:RFC3339,double\n#group,false,false,true,true,true,false,false\n#default,_result,,,,,,\n,result,table,_measurement,_field,t0,_time,_value\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:30Z,-61.68790887989735\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:40Z,-6.3173755351186465\n,,0,cpu,value,Duzw4c,2019-10-24T19:06:50Z,-26.049728557657513\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:00Z,114.285955884979\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:10Z,16.140262630578995\n,,0,cpu,value,Duzw4c,2019-10-24T19:07:20Z,29.50336437998469\n,,1,cpu,value,EmU470,2019-10-24T19:06:30Z,49.48552101042658\n,,1,cpu,value,EmU470,2019-10-24T19:06:40Z,-30.761174263888247\n,,1,cpu,value,EmU470,2019-10-24T19:06:50Z,-71.75234610661141\n,,1,cpu,value,EmU470,2019-10-24T19:07:00Z,-107.57183413713223\n,,1,cpu,value,EmU470,2019-10-24T19:07:10Z,6.867518678667539\n,,1,cpu,value,EmU470,2019-10-24T19:07:20Z,22.14113135132833\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:30Z,126.51192216762033\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:40Z,18.551103465915904\n,,2,cpu,value,LbQrlPU,2019-10-24T19:06:50Z,-63.51213592477466\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:00Z,-108.9405569292533\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:10Z,-21.031390631066174\n,,2,cpu,value,LbQrlPU,2019-10-24T19:07:20Z,-42.87508368305759\n,,3,cpu,value,PHtSS,2019-10-24T19:06:30Z,-38.81066049368835\n,,3,cpu,value,PHtSS,2019-10-24T19:06:40Z,33.5971884838324\n,,3,cpu,value,PHtSS,2019-10-24T19:06:50Z,71.013974839444\n,,3,cpu,value,PHtSS,2019-10-24T19:07:00Z,-18.438923037368127\n,,3,cpu,value,PHtSS,2019-10-24T19:07:10Z,-16.52283812374848\n,,3,cpu,value,PHtSS,2019-10-24T19:07:20Z,-3.201704561305113\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:30Z,0.5003098992419464\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:40Z,-3.590624775919784\n,,4,cpu,value,b3C6Do,2019-10-24T19:06:50Z,-22.91564241031196\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:00Z,-108.34620004260354\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:10Z,-23.82287894830945\n,,4,cpu,value,b3C6Do,2019-10-24T19:07:20Z,-27.865458085515993\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:30Z,35.13751307810906\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:40Z,17.306944807744788\n,,5,cpu,value,n69gsUs,2019-10-24T19:06:50Z,-53.477270117651024\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:00Z,-41.66259545948701\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:10Z,16.514469280633087\n,,5,cpu,value,n69gsUs,2019-10-24T19:07:20Z,87.28708658889737\n,,6,cpu,value,pMA,2019-10-24T19:06:30Z,-41.92963812596751\n,,6,cpu,value,pMA,2019-10-24T19:06:40Z,5.071048992474987\n,,6,cpu,value,pMA,2019-10-24T19:06:50Z,-70.15463641868325\n,,6,cpu,value,pMA,2019-10-24T19:07:00Z,-116.32149276007675\n,,6,cpu,value,pMA,2019-10-24T19:07:10Z,48.71415819443108\n,,6,cpu,value,pMA,2019-10-24T19:07:20Z,12.330309153464318\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:30Z,64.94204237587171\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:40Z,26.367919652993084\n,,7,cpu,value,sDjZtMO,2019-10-24T19:06:50Z,36.622096290225656\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:00Z,-53.65899105443762\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:10Z,35.00604512199924\n,,7,cpu,value,sDjZtMO,2019-10-24T19:07:20Z,21.57653593480266\n,,8,cpu,value,unBUUi,2019-10-24T19:06:30Z,25.505805524300808\n,,8,cpu,value,unBUUi,2019-10-24T19:06:40Z,-23.606840424793397\n,,8,cpu,value,unBUUi,2019-10-24T19:06:50Z,12.57700220295746\n,,8,cpu,value,unBUUi,2019-10-24T19:07:00Z,-4.096873576678456\n,,8,cpu,value,unBUUi,2019-10-24T19:07:10Z,8.334535945914878\n,,8,cpu,value,unBUUi,2019-10-24T19:07:20Z,18.202255926527776\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:30Z,-52.5832648801972\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:40Z,-24.81736985563042\n,,9,cpu,value,wT37nhV,2019-10-24T19:06:50Z,-33.876177313156965\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:00Z,-94.85213297484836\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:10Z,-98.08189555424542\n,,9,cpu,value,wT37nhV,2019-10-24T19:07:20Z,-36.77222399347868\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   82,
					},
					File:   "selector_max_window_test.flux",
					Source: "outData = \"\n#datatype,string,long,string,dateTime:RFC3339,double\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,max\n,,0,cpu,2019-10-24T19:06:30Z,126.51192216762033\n,,0,cpu,2019-10-24T19:07:00Z,114.285955884979\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   75,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   75,
						},
						File:   "selector_max_window_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   75,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   82,
						},
						File:   "selector_max_window_test.flux",
						Source: "\"\n#datatype,string,long,string,dateTime:RFC3339,double\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,max\n,,0,cpu,2019-10-24T19:06:30Z,126.51192216762033\n,,0,cpu,2019-10-24T19:07:00Z,114.285955884979\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   75,
						},
					},
				},
				Value: "\n#datatype,string,long,string,dateTime:RFC3339,double\n#group,false,false,true,false,false\n#default,_result,,,,\n,result,table,_measurement,time,max\n,,0,cpu,2019-10-24T19:06:30Z,126.51192216762033\n,,0,cpu,2019-10-24T19:07:00Z,114.285955884979\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   94,
					},
					File:   "selector_max_window_test.flux",
					Source: "t_aggregate_count_window = (tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, max: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   85,
						},
						File:   "selector_max_window_test.flux",
						Source: "t_aggregate_count_window",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "t_aggregate_count_window",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   94,
						},
						File:   "selector_max_window_test.flux",
						Source: "(tables=<-) => tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, max: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
						Start: ast.Position{
							Column: 28,
							Line:   85,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   85,
														},
														File:   "selector_max_window_test.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 43,
															Line:   85,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   86,
													},
													File:   "selector_max_window_test.flux",
													Source: "tables\n\t|> range(start: -1m)",
													Start: ast.Position{
														Column: 43,
														Line:   85,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   86,
															},
															File:   "selector_max_window_test.flux",
															Source: "start: -1m",
															Start: ast.Position{
																Column: 11,
																Line:   86,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   86,
																},
																File:   "selector_max_window_test.flux",
																Source: "start: -1m",
																Start: ast.Position{
																	Column: 11,
																	Line:   86,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 16,
																		Line:   86,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "start",
																	Start: ast.Position{
																		Column: 11,
																		Line:   86,
																	},
																},
															},
															Name: "start",
														},
														Value: &ast.UnaryExpression{
															Argument: &ast.DurationLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   86,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "1m",
																		Start: ast.Position{
																			Column: 19,
																			Line:   86,
																		},
																	},
																},
																Values: []ast.Duration{ast.Duration{
																	Magnitude: int64(1),
																	Unit:      "m",
																}},
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   86,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "-1m",
																	Start: ast.Position{
																		Column: 18,
																		Line:   86,
																	},
																},
															},
															Operator: 6,
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   86,
														},
														File:   "selector_max_window_test.flux",
														Source: "range(start: -1m)",
														Start: ast.Position{
															Column: 5,
															Line:   86,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   86,
															},
															File:   "selector_max_window_test.flux",
															Source: "range",
															Start: ast.Position{
																Column: 5,
																Line:   86,
															},
														},
													},
													Name: "range",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   87,
												},
												File:   "selector_max_window_test.flux",
												Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")",
												Start: ast.Position{
													Column: 43,
													Line:   85,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   87,
														},
														File:   "selector_max_window_test.flux",
														Source: "fn: (r) => r._measurement == \"cpu\"",
														Start: ast.Position{
															Column: 12,
															Line:   87,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   87,
															},
															File:   "selector_max_window_test.flux",
															Source: "fn: (r) => r._measurement == \"cpu\"",
															Start: ast.Position{
																Column: 12,
																Line:   87,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   87,
																},
																File:   "selector_max_window_test.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 12,
																	Line:   87,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   87,
																},
																File:   "selector_max_window_test.flux",
																Source: "(r) => r._measurement == \"cpu\"",
																Start: ast.Position{
																	Column: 16,
																	Line:   87,
																},
															},
														},
														Body: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   87,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "r._measurement == \"cpu\"",
																	Start: ast.Position{
																		Column: 23,
																		Line:   87,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   87,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 23,
																			Line:   87,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   87,
																			},
																			File:   "selector_max_window_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 23,
																				Line:   87,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   87,
																			},
																			File:   "selector_max_window_test.flux",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 25,
																				Line:   87,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
															Operator: 17,
															Right: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   87,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "\"cpu\"",
																		Start: ast.Position{
																			Column: 41,
																			Line:   87,
																		},
																	},
																},
																Value: "cpu",
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   87,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   87,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   87,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 17,
																			Line:   87,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   87,
													},
													File:   "selector_max_window_test.flux",
													Source: "filter(fn: (r) => r._measurement == \"cpu\")",
													Start: ast.Position{
														Column: 5,
														Line:   87,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   87,
														},
														File:   "selector_max_window_test.flux",
														Source: "filter",
														Start: ast.Position{
															Column: 5,
															Line:   87,
														},
													},
												},
												Name: "filter",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   88,
											},
											File:   "selector_max_window_test.flux",
											Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")",
											Start: ast.Position{
												Column: 43,
												Line:   85,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   88,
													},
													File:   "selector_max_window_test.flux",
													Source: "fn: (r) => r._field == \"value\"",
													Start: ast.Position{
														Column: 12,
														Line:   88,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   88,
														},
														File:   "selector_max_window_test.flux",
														Source: "fn: (r) => r._field == \"value\"",
														Start: ast.Position{
															Column: 12,
															Line:   88,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   88,
															},
															File:   "selector_max_window_test.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 12,
																Line:   88,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   88,
															},
															File:   "selector_max_window_test.flux",
															Source: "(r) => r._field == \"value\"",
															Start: ast.Position{
																Column: 16,
																Line:   88,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   88,
																},
																File:   "selector_max_window_test.flux",
																Source: "r._field == \"value\"",
																Start: ast.Position{
																	Column: 23,
																	Line:   88,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   88,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "r._field",
																	Start: ast.Position{
																		Column: 23,
																		Line:   88,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   88,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 23,
																			Line:   88,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   88,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 25,
																			Line:   88,
																		},
																	},
																},
																Name: "_field",
															},
														},
														Operator: 17,
														Right: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   88,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "\"value\"",
																	Start: ast.Position{
																		Column: 35,
																		Line:   88,
																	},
																},
															},
															Value: "value",
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   88,
																},
																File:   "selector_max_window_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   88,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   88,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 17,
																		Line:   88,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   88,
												},
												File:   "selector_max_window_test.flux",
												Source: "filter(fn: (r) => r._field == \"value\")",
												Start: ast.Position{
													Column: 5,
													Line:   88,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   88,
													},
													File:   "selector_max_window_test.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 5,
														Line:   88,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   89,
										},
										File:   "selector_max_window_test.flux",
										Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
										Start: ast.Position{
											Column: 43,
											Line:   85,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   89,
												},
												File:   "selector_max_window_test.flux",
												Source: "columns: [\"_measurement\", \"_field\"], mode: \"by\"",
												Start: ast.Position{
													Column: 11,
													Line:   89,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   89,
													},
													File:   "selector_max_window_test.flux",
													Source: "columns: [\"_measurement\", \"_field\"]",
													Start: ast.Position{
														Column: 11,
														Line:   89,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   89,
														},
														File:   "selector_max_window_test.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 11,
															Line:   89,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   89,
														},
														File:   "selector_max_window_test.flux",
														Source: "[\"_measurement\", \"_field\"]",
														Start: ast.Position{
															Column: 20,
															Line:   89,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   89,
															},
															File:   "selector_max_window_test.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 21,
																Line:   89,
															},
														},
													},
													Value: "_measurement",
												}, &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   89,
															},
															File:   "selector_max_window_test.flux",
															Source: "\"_field\"",
															Start: ast.Position{
																Column: 37,
																Line:   89,
															},
														},
													},
													Value: "_field",
												}},
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   89,
													},
													File:   "selector_max_window_test.flux",
													Source: "mode: \"by\"",
													Start: ast.Position{
														Column: 48,
														Line:   89,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   89,
														},
														File:   "selector_max_window_test.flux",
														Source: "mode",
														Start: ast.Position{
															Column: 48,
															Line:   89,
														},
													},
												},
												Name: "mode",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   89,
														},
														File:   "selector_max_window_test.flux",
														Source: "\"by\"",
														Start: ast.Position{
															Column: 54,
															Line:   89,
														},
													},
												},
												Value: "by",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   89,
											},
											File:   "selector_max_window_test.flux",
											Source: "group(columns: [\"_measurement\", \"_field\"], mode: \"by\")",
											Start: ast.Position{
												Column: 5,
												Line:   89,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   89,
												},
												File:   "selector_max_window_test.flux",
												Source: "group",
												Start: ast.Position{
													Column: 5,
													Line:   89,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   92,
									},
									File:   "selector_max_window_test.flux",
									Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\")",
									Start: ast.Position{
										Column: 43,
										Line:   85,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   92,
											},
											File:   "selector_max_window_test.flux",
											Source: "every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\"",
											Start: ast.Position{
												Column: 21,
												Line:   90,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   90,
												},
												File:   "selector_max_window_test.flux",
												Source: "every: 30s",
												Start: ast.Position{
													Column: 21,
													Line:   90,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   90,
													},
													File:   "selector_max_window_test.flux",
													Source: "every",
													Start: ast.Position{
														Column: 21,
														Line:   90,
													},
												},
											},
											Name: "every",
										},
										Value: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   90,
													},
													File:   "selector_max_window_test.flux",
													Source: "30s",
													Start: ast.Position{
														Column: 28,
														Line:   90,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(30),
												Unit:      "s",
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 3,
													Line:   92,
												},
												File:   "selector_max_window_test.flux",
												Source: "fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}",
												Start: ast.Position{
													Column: 33,
													Line:   90,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   90,
													},
													File:   "selector_max_window_test.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 33,
														Line:   90,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 3,
														Line:   92,
													},
													File:   "selector_max_window_test.flux",
													Source: "(tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}",
													Start: ast.Position{
														Column: 37,
														Line:   90,
													},
												},
											},
											Body: &ast.Block{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 3,
															Line:   92,
														},
														File:   "selector_max_window_test.flux",
														Source: "{\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}",
														Start: ast.Position{
															Column: 60,
															Line:   90,
														},
													},
												},
												Body: []ast.Statement{&ast.ReturnStatement{
													Argument: &ast.PipeExpression{
														Argument: &ast.PipeExpression{
															Argument: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 16,
																			Line:   91,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "tables",
																		Start: ast.Position{
																			Column: 10,
																			Line:   91,
																		},
																	},
																},
																Name: "tables",
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 90,
																		Line:   91,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"])",
																	Start: ast.Position{
																		Column: 10,
																		Line:   91,
																	},
																},
															},
															Call: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 89,
																				Line:   91,
																			},
																			File:   "selector_max_window_test.flux",
																			Source: "columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]",
																			Start: ast.Position{
																				Column: 25,
																				Line:   91,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 89,
																					Line:   91,
																				},
																				File:   "selector_max_window_test.flux",
																				Source: "columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]",
																				Start: ast.Position{
																					Column: 25,
																					Line:   91,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 32,
																						Line:   91,
																					},
																					File:   "selector_max_window_test.flux",
																					Source: "columns",
																					Start: ast.Position{
																						Column: 25,
																						Line:   91,
																					},
																				},
																			},
																			Name: "columns",
																		},
																		Value: &ast.ArrayExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 89,
																						Line:   91,
																					},
																					File:   "selector_max_window_test.flux",
																					Source: "[\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]",
																					Start: ast.Position{
																						Column: 34,
																						Line:   91,
																					},
																				},
																			},
																			Elements: []ast.Expression{&ast.StringLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 49,
																							Line:   91,
																						},
																						File:   "selector_max_window_test.flux",
																						Source: "\"_measurement\"",
																						Start: ast.Position{
																							Column: 35,
																							Line:   91,
																						},
																					},
																				},
																				Value: "_measurement",
																			}, &ast.StringLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 59,
																							Line:   91,
																						},
																						File:   "selector_max_window_test.flux",
																						Source: "\"_field\"",
																						Start: ast.Position{
																							Column: 51,
																							Line:   91,
																						},
																					},
																				},
																				Value: "_field",
																			}, &ast.StringLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 69,
																							Line:   91,
																						},
																						File:   "selector_max_window_test.flux",
																						Source: "\"_start\"",
																						Start: ast.Position{
																							Column: 61,
																							Line:   91,
																						},
																					},
																				},
																				Value: "_start",
																			}, &ast.StringLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 78,
																							Line:   91,
																						},
																						File:   "selector_max_window_test.flux",
																						Source: "\"_stop\"",
																						Start: ast.Position{
																							Column: 71,
																							Line:   91,
																						},
																					},
																				},
																				Value: "_stop",
																			}, &ast.StringLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 88,
																							Line:   91,
																						},
																						File:   "selector_max_window_test.flux",
																						Source: "\"_value\"",
																						Start: ast.Position{
																							Column: 80,
																							Line:   91,
																						},
																					},
																				},
																				Value: "_value",
																			}},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 90,
																			Line:   91,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"])",
																		Start: ast.Position{
																			Column: 20,
																			Line:   91,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   91,
																			},
																			File:   "selector_max_window_test.flux",
																			Source: "keep",
																			Start: ast.Position{
																				Column: 20,
																				Line:   91,
																			},
																		},
																	},
																	Name: "keep",
																},
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 113,
																	Line:   91,
																},
																File:   "selector_max_window_test.flux",
																Source: "tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)",
																Start: ast.Position{
																	Column: 10,
																	Line:   91,
																},
															},
														},
														Call: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 112,
																			Line:   91,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "column: column",
																		Start: ast.Position{
																			Column: 98,
																			Line:   91,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 112,
																				Line:   91,
																			},
																			File:   "selector_max_window_test.flux",
																			Source: "column: column",
																			Start: ast.Position{
																				Column: 98,
																				Line:   91,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 104,
																					Line:   91,
																				},
																				File:   "selector_max_window_test.flux",
																				Source: "column",
																				Start: ast.Position{
																					Column: 98,
																					Line:   91,
																				},
																			},
																		},
																		Name: "column",
																	},
																	Value: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 112,
																					Line:   91,
																				},
																				File:   "selector_max_window_test.flux",
																				Source: "column",
																				Start: ast.Position{
																					Column: 106,
																					Line:   91,
																				},
																			},
																		},
																		Name: "column",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 113,
																		Line:   91,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "max(column: column)",
																	Start: ast.Position{
																		Column: 94,
																		Line:   91,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 97,
																			Line:   91,
																		},
																		File:   "selector_max_window_test.flux",
																		Source: "max",
																		Start: ast.Position{
																			Column: 94,
																			Line:   91,
																		},
																	},
																},
																Name: "max",
															},
														},
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 113,
																Line:   91,
															},
															File:   "selector_max_window_test.flux",
															Source: "return tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)",
															Start: ast.Position{
																Column: 3,
																Line:   91,
															},
														},
													},
												}},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   90,
														},
														File:   "selector_max_window_test.flux",
														Source: "tables=<-",
														Start: ast.Position{
															Column: 38,
															Line:   90,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   90,
															},
															File:   "selector_max_window_test.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 38,
																Line:   90,
															},
														},
													},
													Name: "tables",
												},
												Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   90,
														},
														File:   "selector_max_window_test.flux",
														Source: "<-",
														Start: ast.Position{
															Column: 45,
															Line:   90,
														},
													},
												}},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   90,
														},
														File:   "selector_max_window_test.flux",
														Source: "column",
														Start: ast.Position{
															Column: 49,
															Line:   90,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   90,
															},
															File:   "selector_max_window_test.flux",
															Source: "column",
															Start: ast.Position{
																Column: 49,
																Line:   90,
															},
														},
													},
													Name: "column",
												},
												Value: nil,
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   92,
												},
												File:   "selector_max_window_test.flux",
												Source: "timeSrc: \"_start\"",
												Start: ast.Position{
													Column: 5,
													Line:   92,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 12,
														Line:   92,
													},
													File:   "selector_max_window_test.flux",
													Source: "timeSrc",
													Start: ast.Position{
														Column: 5,
														Line:   92,
													},
												},
											},
											Name: "timeSrc",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   92,
													},
													File:   "selector_max_window_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 14,
														Line:   92,
													},
												},
											},
											Value: "_start",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   92,
										},
										File:   "selector_max_window_test.flux",
										Source: "aggregateWindow(every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\")",
										Start: ast.Position{
											Column: 5,
											Line:   90,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   90,
											},
											File:   "selector_max_window_test.flux",
											Source: "aggregateWindow",
											Start: ast.Position{
												Column: 5,
												Line:   90,
											},
										},
									},
									Name: "aggregateWindow",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   93,
								},
								File:   "selector_max_window_test.flux",
								Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, max: r._value}))",
								Start: ast.Position{
									Column: 43,
									Line:   85,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   93,
										},
										File:   "selector_max_window_test.flux",
										Source: "fn: (r) => ({r with time: r._time, max: r._value})",
										Start: ast.Position{
											Column: 9,
											Line:   93,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   93,
											},
											File:   "selector_max_window_test.flux",
											Source: "fn: (r) => ({r with time: r._time, max: r._value})",
											Start: ast.Position{
												Column: 9,
												Line:   93,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   93,
												},
												File:   "selector_max_window_test.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 9,
													Line:   93,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   93,
												},
												File:   "selector_max_window_test.flux",
												Source: "(r) => ({r with time: r._time, max: r._value})",
												Start: ast.Position{
													Column: 13,
													Line:   93,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   93,
													},
													File:   "selector_max_window_test.flux",
													Source: "({r with time: r._time, max: r._value})",
													Start: ast.Position{
														Column: 20,
														Line:   93,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   93,
														},
														File:   "selector_max_window_test.flux",
														Source: "{r with time: r._time, max: r._value}",
														Start: ast.Position{
															Column: 21,
															Line:   93,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   93,
															},
															File:   "selector_max_window_test.flux",
															Source: "time: r._time",
															Start: ast.Position{
																Column: 29,
																Line:   93,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   93,
																},
																File:   "selector_max_window_test.flux",
																Source: "time",
																Start: ast.Position{
																	Column: 29,
																	Line:   93,
																},
															},
														},
														Name: "time",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   93,
																},
																File:   "selector_max_window_test.flux",
																Source: "r._time",
																Start: ast.Position{
																	Column: 35,
																	Line:   93,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   93,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 35,
																		Line:   93,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   93,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "_time",
																	Start: ast.Position{
																		Column: 37,
																		Line:   93,
																	},
																},
															},
															Name: "_time",
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 57,
																Line:   93,
															},
															File:   "selector_max_window_test.flux",
															Source: "max: r._value",
															Start: ast.Position{
																Column: 44,
																Line:   93,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   93,
																},
																File:   "selector_max_window_test.flux",
																Source: "max",
																Start: ast.Position{
																	Column: 44,
																	Line:   93,
																},
															},
														},
														Name: "max",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   93,
																},
																File:   "selector_max_window_test.flux",
																Source: "r._value",
																Start: ast.Position{
																	Column: 49,
																	Line:   93,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   93,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 49,
																		Line:   93,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 57,
																		Line:   93,
																	},
																	File:   "selector_max_window_test.flux",
																	Source: "_value",
																	Start: ast.Position{
																		Column: 51,
																		Line:   93,
																	},
																},
															},
															Name: "_value",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   93,
															},
															File:   "selector_max_window_test.flux",
															Source: "r",
															Start: ast.Position{
																Column: 22,
																Line:   93,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   93,
													},
													File:   "selector_max_window_test.flux",
													Source: "r",
													Start: ast.Position{
														Column: 14,
														Line:   93,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   93,
														},
														File:   "selector_max_window_test.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   93,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   93,
									},
									File:   "selector_max_window_test.flux",
									Source: "map(fn: (r) => ({r with time: r._time, max: r._value}))",
									Start: ast.Position{
										Column: 5,
										Line:   93,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   93,
										},
										File:   "selector_max_window_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 5,
											Line:   93,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   94,
							},
							File:   "selector_max_window_test.flux",
							Source: "tables\n\t|> range(start: -1m)\n\t|> filter(fn: (r) => r._measurement == \"cpu\")\n\t|> filter(fn: (r) => r._field == \"value\")\n\t|> group(columns: [\"_measurement\", \"_field\"], mode: \"by\")\n\t|> aggregateWindow(every: 30s, fn: (tables=<-, column) => {\n\t\treturn tables |> keep(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"_value\"]) |> max(column: column)\n\t}, timeSrc: \"_start\")\n\t|> map(fn: (r) => ({r with time: r._time, max: r._value}))\n\t|> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
							Start: ast.Position{
								Column: 43,
								Line:   85,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   94,
									},
									File:   "selector_max_window_test.flux",
									Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
									Start: ast.Position{
										Column: 10,
										Line:   94,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   94,
										},
										File:   "selector_max_window_test.flux",
										Source: "columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
										Start: ast.Position{
											Column: 10,
											Line:   94,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   94,
											},
											File:   "selector_max_window_test.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 10,
												Line:   94,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   94,
											},
											File:   "selector_max_window_test.flux",
											Source: "[\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"]",
											Start: ast.Position{
												Column: 19,
												Line:   94,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   94,
												},
												File:   "selector_max_window_test.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   94,
												},
											},
										},
										Value: "_time",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   94,
												},
												File:   "selector_max_window_test.flux",
												Source: "\"_start\"",
												Start: ast.Position{
													Column: 29,
													Line:   94,
												},
											},
										},
										Value: "_start",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   94,
												},
												File:   "selector_max_window_test.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 39,
													Line:   94,
												},
											},
										},
										Value: "_stop",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   94,
												},
												File:   "selector_max_window_test.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 48,
													Line:   94,
												},
											},
										},
										Value: "_field",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   94,
												},
												File:   "selector_max_window_test.flux",
												Source: "\"_value\"",
												Start: ast.Position{
													Column: 58,
													Line:   94,
												},
											},
										},
										Value: "_value",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   94,
								},
								File:   "selector_max_window_test.flux",
								Source: "drop(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"])",
								Start: ast.Position{
									Column: 5,
									Line:   94,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   94,
									},
									File:   "selector_max_window_test.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 5,
										Line:   94,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   85,
							},
							File:   "selector_max_window_test.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 29,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   85,
								},
								File:   "selector_max_window_test.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   85,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   85,
							},
							File:   "selector_max_window_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 36,
								Line:   85,
							},
						},
					}},
				}},
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   100,
						},
						File:   "selector_max_window_test.flux",
						Source: "_aggregate_count_window = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
						Start: ast.Position{
							Column: 6,
							Line:   96,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   96,
							},
							File:   "selector_max_window_test.flux",
							Source: "_aggregate_count_window",
							Start: ast.Position{
								Column: 6,
								Line:   96,
							},
						},
					},
					Name: "_aggregate_count_window",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   100,
							},
							File:   "selector_max_window_test.flux",
							Source: "() => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
							Start: ast.Position{
								Column: 32,
								Line:   96,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   100,
								},
								File:   "selector_max_window_test.flux",
								Source: "({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
								Start: ast.Position{
									Column: 38,
									Line:   96,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 2,
										Line:   100,
									},
									File:   "selector_max_window_test.flux",
									Source: "{\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n}",
									Start: ast.Position{
										Column: 39,
										Line:   96,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   97,
										},
										File:   "selector_max_window_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 2,
											Line:   97,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   97,
											},
											File:   "selector_max_window_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 2,
												Line:   97,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   97,
												},
												File:   "selector_max_window_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 29,
													Line:   97,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   97,
													},
													File:   "selector_max_window_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 29,
														Line:   97,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   97,
														},
														File:   "selector_max_window_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 29,
															Line:   97,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   97,
														},
														File:   "selector_max_window_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 34,
															Line:   97,
														},
													},
												},
												Name: "inData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   97,
											},
											File:   "selector_max_window_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 9,
												Line:   97,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   97,
												},
												File:   "selector_max_window_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 9,
													Line:   97,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   97,
													},
													File:   "selector_max_window_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 9,
														Line:   97,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   97,
													},
													File:   "selector_max_window_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 17,
														Line:   97,
													},
												},
											},
											Name: "loadStorage",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   98,
										},
										File:   "selector_max_window_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 2,
											Line:   98,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   98,
											},
											File:   "selector_max_window_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 2,
												Line:   98,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   98,
												},
												File:   "selector_max_window_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 24,
													Line:   98,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   98,
													},
													File:   "selector_max_window_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 24,
														Line:   98,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   98,
														},
														File:   "selector_max_window_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 24,
															Line:   98,
														},
													},
												},
												Name: "csv",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   98,
														},
														File:   "selector_max_window_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 29,
															Line:   98,
														},
													},
												},
												Name: "outData",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   98,
											},
											File:   "selector_max_window_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 8,
												Line:   98,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   98,
												},
												File:   "selector_max_window_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 8,
													Line:   98,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   98,
													},
													File:   "selector_max_window_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 8,
														Line:   98,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   98,
													},
													File:   "selector_max_window_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 16,
														Line:   98,
													},
												},
											},
											Name: "loadMem",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   99,
										},
										File:   "selector_max_window_test.flux",
										Source: "fn: t_aggregate_count_window",
										Start: ast.Position{
											Column: 2,
											Line:   99,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 4,
												Line:   99,
											},
											File:   "selector_max_window_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 2,
												Line:   99,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   99,
											},
											File:   "selector_max_window_test.flux",
											Source: "t_aggregate_count_window",
											Start: ast.Position{
												Column: 6,
												Line:   99,
											},
										},
									},
									Name: "t_aggregate_count_window",
								},
							}},
							With: nil,
						},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   100,
					},
					File:   "selector_max_window_test.flux",
					Source: "test _aggregate_count_window = () => ({\n\tinput: testing.loadStorage(csv: inData),\n\twant: testing.loadMem(csv: outData),\n\tfn: t_aggregate_count_window,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   96,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "selector_max_window_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "selector_max_window_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   4,
					},
					File:   "selector_max_window_test.flux",
					Source: "import \"internal/influxql\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   4,
						},
						File:   "selector_max_window_test.flux",
						Source: "\"internal/influxql\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "internal/influxql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "selector_max_window_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "selector_max_window_test.flux",
					Source: "package influxql_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "selector_max_window_test.flux",
						Source: "influxql_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql_test",
			},
		},
	}},
	Package: "influxql_test",
	Path:    "testing/influxql",
}}
