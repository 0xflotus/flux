// DO NOT EDIT: This file is autogenerated via the builtin command.

package ledger

import ast "github.com/influxdata/flux/ast"

var FluxTestPackages = []*ast.Package{&ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   71,
				},
				File:   "ledger_test.flux",
				Source: "package ledger_test\n\nimport \"testing\"\nimport \"ledger\"\n\ninData = \"\n; A sample journal file.\n;\n; Sets up this account tree:\n; assets\n;   bank\n;     checking\n;     saving\n;   cash\n; expenses\n;   food\n;   supplies\n; income\n;   gifts\n;   salary\n; liabilities\n;   debts\n\n2008/01/01 income\n    assets:bank:checking  $1\n    income:salary\n\n2008/06/01 gift\n    assets:bank:checking  $2\n    income:gifts\n\n2008/06/02 ! save\n    assets:bank:saving  $1\n    assets:bank:checking\n\n2008/06/03 * eat & shop\n    expenses:food      $1\n    expenses:supplies  $3\n    assets:cash\n\n2008/12/31 * pay off\n    liabilities:debts  $1\n    assets:bank:checking\n\n\n;final comment\n\"\n\noutData = \"\n#datatype,string,long,dateTime:RFC3339,string,string,boolean,boolean,string,string,string,double\n#group,false,false,true,true,true,false,false,false,false,false,false\n#default,_result,,,,,,,,,,\n,result,table,_time,commodity,tx,cleared,pending,l0,l1,l2,_value\n,,0,2008-01-01T00:00:00Z,$,income,false,false,assets,bank,checking,1\n,,0,2008-01-01T00:00:00Z,$,income,false,false,income,salary,,-1\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,assets,bank,checking,2\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,income,gifts,,-2\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,saving,1\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,checking,-1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,food,,1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,supplies,,3\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,assets,cash,,-4\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,liabilities,debts,,1\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,assets,bank,checking,-1\n\"\n\ntest from = () => ({\n    input: ledger.from(raw: inData),\n    want: testing.loadMem(csv: outData),\n    fn: (tables=<-) => tables\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   47,
					},
					File:   "ledger_test.flux",
					Source: "inData = \"\n; A sample journal file.\n;\n; Sets up this account tree:\n; assets\n;   bank\n;     checking\n;     saving\n;   cash\n; expenses\n;   food\n;   supplies\n; income\n;   gifts\n;   salary\n; liabilities\n;   debts\n\n2008/01/01 income\n    assets:bank:checking  $1\n    income:salary\n\n2008/06/01 gift\n    assets:bank:checking  $2\n    income:gifts\n\n2008/06/02 ! save\n    assets:bank:saving  $1\n    assets:bank:checking\n\n2008/06/03 * eat & shop\n    expenses:food      $1\n    expenses:supplies  $3\n    assets:cash\n\n2008/12/31 * pay off\n    liabilities:debts  $1\n    assets:bank:checking\n\n\n;final comment\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   6,
						},
						File:   "ledger_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   47,
						},
						File:   "ledger_test.flux",
						Source: "\"\n; A sample journal file.\n;\n; Sets up this account tree:\n; assets\n;   bank\n;     checking\n;     saving\n;   cash\n; expenses\n;   food\n;   supplies\n; income\n;   gifts\n;   salary\n; liabilities\n;   debts\n\n2008/01/01 income\n    assets:bank:checking  $1\n    income:salary\n\n2008/06/01 gift\n    assets:bank:checking  $2\n    income:gifts\n\n2008/06/02 ! save\n    assets:bank:saving  $1\n    assets:bank:checking\n\n2008/06/03 * eat & shop\n    expenses:food      $1\n    expenses:supplies  $3\n    assets:cash\n\n2008/12/31 * pay off\n    liabilities:debts  $1\n    assets:bank:checking\n\n\n;final comment\n\"",
						Start: ast.Position{
							Column: 10,
							Line:   6,
						},
					},
				},
				Value: "\n; A sample journal file.\n;\n; Sets up this account tree:\n; assets\n;   bank\n;     checking\n;     saving\n;   cash\n; expenses\n;   food\n;   supplies\n; income\n;   gifts\n;   salary\n; liabilities\n;   debts\n\n2008/01/01 income\n    assets:bank:checking  $1\n    income:salary\n\n2008/06/01 gift\n    assets:bank:checking  $2\n    income:gifts\n\n2008/06/02 ! save\n    assets:bank:saving  $1\n    assets:bank:checking\n\n2008/06/03 * eat & shop\n    expenses:food      $1\n    expenses:supplies  $3\n    assets:cash\n\n2008/12/31 * pay off\n    liabilities:debts  $1\n    assets:bank:checking\n\n\n;final comment\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   65,
					},
					File:   "ledger_test.flux",
					Source: "outData = \"\n#datatype,string,long,dateTime:RFC3339,string,string,boolean,boolean,string,string,string,double\n#group,false,false,true,true,true,false,false,false,false,false,false\n#default,_result,,,,,,,,,,\n,result,table,_time,commodity,tx,cleared,pending,l0,l1,l2,_value\n,,0,2008-01-01T00:00:00Z,$,income,false,false,assets,bank,checking,1\n,,0,2008-01-01T00:00:00Z,$,income,false,false,income,salary,,-1\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,assets,bank,checking,2\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,income,gifts,,-2\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,saving,1\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,checking,-1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,food,,1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,supplies,,3\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,assets,cash,,-4\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,liabilities,debts,,1\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,assets,bank,checking,-1\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   49,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   49,
						},
						File:   "ledger_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   49,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   65,
						},
						File:   "ledger_test.flux",
						Source: "\"\n#datatype,string,long,dateTime:RFC3339,string,string,boolean,boolean,string,string,string,double\n#group,false,false,true,true,true,false,false,false,false,false,false\n#default,_result,,,,,,,,,,\n,result,table,_time,commodity,tx,cleared,pending,l0,l1,l2,_value\n,,0,2008-01-01T00:00:00Z,$,income,false,false,assets,bank,checking,1\n,,0,2008-01-01T00:00:00Z,$,income,false,false,income,salary,,-1\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,assets,bank,checking,2\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,income,gifts,,-2\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,saving,1\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,checking,-1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,food,,1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,supplies,,3\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,assets,cash,,-4\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,liabilities,debts,,1\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,assets,bank,checking,-1\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   49,
						},
					},
				},
				Value: "\n#datatype,string,long,dateTime:RFC3339,string,string,boolean,boolean,string,string,string,double\n#group,false,false,true,true,true,false,false,false,false,false,false\n#default,_result,,,,,,,,,,\n,result,table,_time,commodity,tx,cleared,pending,l0,l1,l2,_value\n,,0,2008-01-01T00:00:00Z,$,income,false,false,assets,bank,checking,1\n,,0,2008-01-01T00:00:00Z,$,income,false,false,income,salary,,-1\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,assets,bank,checking,2\n,,1,2008-06-01T00:00:00Z,$,gift,false,false,income,gifts,,-2\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,saving,1\n,,2,2008-06-02T00:00:00Z,$,save,false,true,assets,bank,checking,-1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,food,,1\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,expenses,supplies,,3\n,,3,2008-06-03T00:00:00Z,$,eat & shop,true,false,assets,cash,,-4\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,liabilities,debts,,1\n,,4,2008-12-31T00:00:00Z,$,pay off,true,false,assets,bank,checking,-1\n",
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   71,
						},
						File:   "ledger_test.flux",
						Source: "from = () => ({\n    input: ledger.from(raw: inData),\n    want: testing.loadMem(csv: outData),\n    fn: (tables=<-) => tables\n}",
						Start: ast.Position{
							Column: 6,
							Line:   67,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   67,
							},
							File:   "ledger_test.flux",
							Source: "from",
							Start: ast.Position{
								Column: 6,
								Line:   67,
							},
						},
					},
					Name: "from",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   71,
							},
							File:   "ledger_test.flux",
							Source: "() => ({\n    input: ledger.from(raw: inData),\n    want: testing.loadMem(csv: outData),\n    fn: (tables=<-) => tables\n}",
							Start: ast.Position{
								Column: 13,
								Line:   67,
							},
						},
					},
					Body: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 2,
									Line:   71,
								},
								File:   "ledger_test.flux",
								Source: "{\n    input: ledger.from(raw: inData),\n    want: testing.loadMem(csv: outData),\n    fn: (tables=<-) => tables\n}",
								Start: ast.Position{
									Column: 20,
									Line:   67,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   68,
									},
									File:   "ledger_test.flux",
									Source: "input: ledger.from(raw: inData)",
									Start: ast.Position{
										Column: 5,
										Line:   68,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   68,
										},
										File:   "ledger_test.flux",
										Source: "input",
										Start: ast.Position{
											Column: 5,
											Line:   68,
										},
									},
								},
								Name: "input",
							},
							Value: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   68,
											},
											File:   "ledger_test.flux",
											Source: "raw: inData",
											Start: ast.Position{
												Column: 24,
												Line:   68,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   68,
												},
												File:   "ledger_test.flux",
												Source: "raw: inData",
												Start: ast.Position{
													Column: 24,
													Line:   68,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   68,
													},
													File:   "ledger_test.flux",
													Source: "raw",
													Start: ast.Position{
														Column: 24,
														Line:   68,
													},
												},
											},
											Name: "raw",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   68,
													},
													File:   "ledger_test.flux",
													Source: "inData",
													Start: ast.Position{
														Column: 29,
														Line:   68,
													},
												},
											},
											Name: "inData",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   68,
										},
										File:   "ledger_test.flux",
										Source: "ledger.from(raw: inData)",
										Start: ast.Position{
											Column: 12,
											Line:   68,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   68,
											},
											File:   "ledger_test.flux",
											Source: "ledger.from",
											Start: ast.Position{
												Column: 12,
												Line:   68,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   68,
												},
												File:   "ledger_test.flux",
												Source: "ledger",
												Start: ast.Position{
													Column: 12,
													Line:   68,
												},
											},
										},
										Name: "ledger",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   68,
												},
												File:   "ledger_test.flux",
												Source: "from",
												Start: ast.Position{
													Column: 19,
													Line:   68,
												},
											},
										},
										Name: "from",
									},
								},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   69,
									},
									File:   "ledger_test.flux",
									Source: "want: testing.loadMem(csv: outData)",
									Start: ast.Position{
										Column: 5,
										Line:   69,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   69,
										},
										File:   "ledger_test.flux",
										Source: "want",
										Start: ast.Position{
											Column: 5,
											Line:   69,
										},
									},
								},
								Name: "want",
							},
							Value: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   69,
											},
											File:   "ledger_test.flux",
											Source: "csv: outData",
											Start: ast.Position{
												Column: 27,
												Line:   69,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   69,
												},
												File:   "ledger_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 27,
													Line:   69,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   69,
													},
													File:   "ledger_test.flux",
													Source: "csv",
													Start: ast.Position{
														Column: 27,
														Line:   69,
													},
												},
											},
											Name: "csv",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   69,
													},
													File:   "ledger_test.flux",
													Source: "outData",
													Start: ast.Position{
														Column: 32,
														Line:   69,
													},
												},
											},
											Name: "outData",
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   69,
										},
										File:   "ledger_test.flux",
										Source: "testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 11,
											Line:   69,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   69,
											},
											File:   "ledger_test.flux",
											Source: "testing.loadMem",
											Start: ast.Position{
												Column: 11,
												Line:   69,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   69,
												},
												File:   "ledger_test.flux",
												Source: "testing",
												Start: ast.Position{
													Column: 11,
													Line:   69,
												},
											},
										},
										Name: "testing",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   69,
												},
												File:   "ledger_test.flux",
												Source: "loadMem",
												Start: ast.Position{
													Column: 19,
													Line:   69,
												},
											},
										},
										Name: "loadMem",
									},
								},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   70,
									},
									File:   "ledger_test.flux",
									Source: "fn: (tables=<-) => tables",
									Start: ast.Position{
										Column: 5,
										Line:   70,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 7,
											Line:   70,
										},
										File:   "ledger_test.flux",
										Source: "fn",
										Start: ast.Position{
											Column: 5,
											Line:   70,
										},
									},
								},
								Name: "fn",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   70,
										},
										File:   "ledger_test.flux",
										Source: "(tables=<-) => tables",
										Start: ast.Position{
											Column: 9,
											Line:   70,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   70,
											},
											File:   "ledger_test.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 24,
												Line:   70,
											},
										},
									},
									Name: "tables",
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   70,
											},
											File:   "ledger_test.flux",
											Source: "tables=<-",
											Start: ast.Position{
												Column: 10,
												Line:   70,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   70,
												},
												File:   "ledger_test.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 10,
													Line:   70,
												},
											},
										},
										Name: "tables",
									},
									Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   70,
											},
											File:   "ledger_test.flux",
											Source: "<-",
											Start: ast.Position{
												Column: 17,
												Line:   70,
											},
										},
									}},
								}},
							},
						}},
					},
					Params: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   71,
					},
					File:   "ledger_test.flux",
					Source: "test from = () => ({\n    input: ledger.from(raw: inData),\n    want: testing.loadMem(csv: outData),\n    fn: (tables=<-) => tables\n}",
					Start: ast.Position{
						Column: 1,
						Line:   67,
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "ledger_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "ledger_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   4,
					},
					File:   "ledger_test.flux",
					Source: "import \"ledger\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   4,
						},
						File:   "ledger_test.flux",
						Source: "\"ledger\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "ledger",
			},
		}},
		Name: "ledger_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   1,
					},
					File:   "ledger_test.flux",
					Source: "package ledger_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   1,
						},
						File:   "ledger_test.flux",
						Source: "ledger_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "main",
			},
		},
	}},
	Package: "main",
	Path:    "",
}}
