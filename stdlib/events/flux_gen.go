// DO NOT EDIT: This file is autogenerated via the builtin command.

package events

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 21,
					Line:   5,
				},
				File:   "events.flux",
				Source: "package events\n\n\n// StateChanges filters out records where the state column is the same as the previous record.\nbuiltin stateChanges",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					File:   "events.flux",
					Source: "builtin stateChanges",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						File:   "events.flux",
						Source: "stateChanges",
						Start: ast.Position{
							Column: 9,
							Line:   5,
						},
					},
				},
				Name: "stateChanges",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 94,
							Line:   5,
						},
						File:   "events.flux",
						Source: "(<-tables: [{A with state: B}]) => [{A with state: B}] where A: Record",
						Start: ast.Position{
							Column: 24,
							Line:   5,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 94,
								Line:   5,
							},
							File:   "events.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 85,
								Line:   5,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   5,
								},
								File:   "events.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 88,
									Line:   5,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   5,
								},
								File:   "events.flux",
								Source: "A",
								Start: ast.Position{
									Column: 85,
									Line:   5,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 78,
								Line:   5,
							},
							File:   "events.flux",
							Source: "(<-tables: [{A with state: B}]) => [{A with state: B}]",
							Start: ast.Position{
								Column: 24,
								Line:   5,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   5,
								},
								File:   "events.flux",
								Source: "<-tables: [{A with state: B}]",
								Start: ast.Position{
									Column: 25,
									Line:   5,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   5,
									},
									File:   "events.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 27,
										Line:   5,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   5,
									},
									File:   "events.flux",
									Source: "[{A with state: B}]",
									Start: ast.Position{
										Column: 35,
										Line:   5,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   5,
										},
										File:   "events.flux",
										Source: "{A with state: B}",
										Start: ast.Position{
											Column: 36,
											Line:   5,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   5,
											},
											File:   "events.flux",
											Source: "state: B",
											Start: ast.Position{
												Column: 44,
												Line:   5,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   5,
												},
												File:   "events.flux",
												Source: "state",
												Start: ast.Position{
													Column: 44,
													Line:   5,
												},
											},
										},
										Name: "state",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   5,
												},
												File:   "events.flux",
												Source: "B",
												Start: ast.Position{
													Column: 51,
													Line:   5,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 52,
														Line:   5,
													},
													File:   "events.flux",
													Source: "B",
													Start: ast.Position{
														Column: 51,
														Line:   5,
													},
												},
											},
											Name: "B",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   5,
											},
											File:   "events.flux",
											Source: "A",
											Start: ast.Position{
												Column: 37,
												Line:   5,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   5,
								},
								File:   "events.flux",
								Source: "[{A with state: B}]",
								Start: ast.Position{
									Column: 59,
									Line:   5,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   5,
									},
									File:   "events.flux",
									Source: "{A with state: B}",
									Start: ast.Position{
										Column: 60,
										Line:   5,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   5,
										},
										File:   "events.flux",
										Source: "state: B",
										Start: ast.Position{
											Column: 68,
											Line:   5,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   5,
											},
											File:   "events.flux",
											Source: "state",
											Start: ast.Position{
												Column: 68,
												Line:   5,
											},
										},
									},
									Name: "state",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   5,
											},
											File:   "events.flux",
											Source: "B",
											Start: ast.Position{
												Column: 75,
												Line:   5,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 76,
													Line:   5,
												},
												File:   "events.flux",
												Source: "B",
												Start: ast.Position{
													Column: 75,
													Line:   5,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   5,
										},
										File:   "events.flux",
										Source: "A",
										Start: ast.Position{
											Column: 61,
											Line:   5,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "events.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   1,
					},
					File:   "events.flux",
					Source: "package events",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   1,
						},
						File:   "events.flux",
						Source: "events",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "events",
			},
		},
	}},
	Package: "events",
	Path:    "events",
}
