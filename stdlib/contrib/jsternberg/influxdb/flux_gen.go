// DO NOT EDIT: This file is autogenerated via the builtin command.

package influxdb

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   34,
				},
				File:   "influxdb.flux",
				Source: "package influxdb\n\nimport \"influxdata/influxdb\"\nimport \"influxdata/influxdb/v1\"\n\n// select will select data from an influxdb instance within\n// the range between `start` and `stop` from the bucket specified by\n// the `from` parameter. It will select the specific measurement\n// and it will only include fields that are included in the list of\n// `fields`.\n//\n// In order to filter by tags, the `where` function can be used to further\n// limit the amount of data selected.\nselect = (from, start, stop=now(), m, fields, where=(r) => true) => {\n    tables = influxdb.from(bucket: from)\n        |> range(start, stop)\n        |> filter(fn: (r) => r._measurement == m)\n        |> filter(fn: where)\n\n    nfields = length(arr: fields)\n    filtered = if nfields == 1 then\n            tables |> filter(fn: (r) => r._field == fields[0])\n        else if nfields == 2 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])\n        else if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))\n    return filtered |> v1.fieldsAsCols()\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   34,
					},
					File:   "influxdb.flux",
					Source: "select = (from, start, stop=now(), m, fields, where=(r) => true) => {\n    tables = influxdb.from(bucket: from)\n        |> range(start, stop)\n        |> filter(fn: (r) => r._measurement == m)\n        |> filter(fn: where)\n\n    nfields = length(arr: fields)\n    filtered = if nfields == 1 then\n            tables |> filter(fn: (r) => r._field == fields[0])\n        else if nfields == 2 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])\n        else if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))\n    return filtered |> v1.fieldsAsCols()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   14,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   14,
						},
						File:   "influxdb.flux",
						Source: "select",
						Start: ast.Position{
							Column: 1,
							Line:   14,
						},
					},
				},
				Name: "select",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   34,
						},
						File:   "influxdb.flux",
						Source: "(from, start, stop=now(), m, fields, where=(r) => true) => {\n    tables = influxdb.from(bucket: from)\n        |> range(start, stop)\n        |> filter(fn: (r) => r._measurement == m)\n        |> filter(fn: where)\n\n    nfields = length(arr: fields)\n    filtered = if nfields == 1 then\n            tables |> filter(fn: (r) => r._field == fields[0])\n        else if nfields == 2 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])\n        else if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))\n    return filtered |> v1.fieldsAsCols()\n}",
						Start: ast.Position{
							Column: 10,
							Line:   14,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   34,
							},
							File:   "influxdb.flux",
							Source: "{\n    tables = influxdb.from(bucket: from)\n        |> range(start, stop)\n        |> filter(fn: (r) => r._measurement == m)\n        |> filter(fn: where)\n\n    nfields = length(arr: fields)\n    filtered = if nfields == 1 then\n            tables |> filter(fn: (r) => r._field == fields[0])\n        else if nfields == 2 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])\n        else if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))\n    return filtered |> v1.fieldsAsCols()\n}",
							Start: ast.Position{
								Column: 69,
								Line:   14,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   18,
								},
								File:   "influxdb.flux",
								Source: "tables = influxdb.from(bucket: from)\n        |> range(start, stop)\n        |> filter(fn: (r) => r._measurement == m)\n        |> filter(fn: where)",
								Start: ast.Position{
									Column: 5,
									Line:   15,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   15,
									},
									File:   "influxdb.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 5,
										Line:   15,
									},
								},
							},
							Name: "tables",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   15,
													},
													File:   "influxdb.flux",
													Source: "bucket: from",
													Start: ast.Position{
														Column: 28,
														Line:   15,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   15,
														},
														File:   "influxdb.flux",
														Source: "bucket: from",
														Start: ast.Position{
															Column: 28,
															Line:   15,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   15,
															},
															File:   "influxdb.flux",
															Source: "bucket",
															Start: ast.Position{
																Column: 28,
																Line:   15,
															},
														},
													},
													Name: "bucket",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   15,
															},
															File:   "influxdb.flux",
															Source: "from",
															Start: ast.Position{
																Column: 36,
																Line:   15,
															},
														},
													},
													Name: "from",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   15,
												},
												File:   "influxdb.flux",
												Source: "influxdb.from(bucket: from)",
												Start: ast.Position{
													Column: 14,
													Line:   15,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   15,
													},
													File:   "influxdb.flux",
													Source: "influxdb.from",
													Start: ast.Position{
														Column: 14,
														Line:   15,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   15,
														},
														File:   "influxdb.flux",
														Source: "influxdb",
														Start: ast.Position{
															Column: 14,
															Line:   15,
														},
													},
												},
												Name: "influxdb",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   15,
														},
														File:   "influxdb.flux",
														Source: "from",
														Start: ast.Position{
															Column: 23,
															Line:   15,
														},
													},
												},
												Name: "from",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   16,
											},
											File:   "influxdb.flux",
											Source: "influxdb.from(bucket: from)\n        |> range(start, stop)",
											Start: ast.Position{
												Column: 14,
												Line:   15,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   16,
													},
													File:   "influxdb.flux",
													Source: "start, stop",
													Start: ast.Position{
														Column: 18,
														Line:   16,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   16,
														},
														File:   "influxdb.flux",
														Source: "start",
														Start: ast.Position{
															Column: 18,
															Line:   16,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   16,
															},
															File:   "influxdb.flux",
															Source: "start",
															Start: ast.Position{
																Column: 18,
																Line:   16,
															},
														},
													},
													Name: "start",
												},
												Value: nil,
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   16,
														},
														File:   "influxdb.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 25,
															Line:   16,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   16,
															},
															File:   "influxdb.flux",
															Source: "stop",
															Start: ast.Position{
																Column: 25,
																Line:   16,
															},
														},
													},
													Name: "stop",
												},
												Value: nil,
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   16,
												},
												File:   "influxdb.flux",
												Source: "range(start, stop)",
												Start: ast.Position{
													Column: 12,
													Line:   16,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   16,
													},
													File:   "influxdb.flux",
													Source: "range",
													Start: ast.Position{
														Column: 12,
														Line:   16,
													},
												},
											},
											Name: "range",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   17,
										},
										File:   "influxdb.flux",
										Source: "influxdb.from(bucket: from)\n        |> range(start, stop)\n        |> filter(fn: (r) => r._measurement == m)",
										Start: ast.Position{
											Column: 14,
											Line:   15,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   17,
												},
												File:   "influxdb.flux",
												Source: "fn: (r) => r._measurement == m",
												Start: ast.Position{
													Column: 19,
													Line:   17,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   17,
													},
													File:   "influxdb.flux",
													Source: "fn: (r) => r._measurement == m",
													Start: ast.Position{
														Column: 19,
														Line:   17,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   17,
														},
														File:   "influxdb.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 19,
															Line:   17,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   17,
														},
														File:   "influxdb.flux",
														Source: "(r) => r._measurement == m",
														Start: ast.Position{
															Column: 23,
															Line:   17,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   17,
															},
															File:   "influxdb.flux",
															Source: "r._measurement == m",
															Start: ast.Position{
																Column: 30,
																Line:   17,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   17,
																},
																File:   "influxdb.flux",
																Source: "r._measurement",
																Start: ast.Position{
																	Column: 30,
																	Line:   17,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   17,
																	},
																	File:   "influxdb.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 30,
																		Line:   17,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   17,
																	},
																	File:   "influxdb.flux",
																	Source: "_measurement",
																	Start: ast.Position{
																		Column: 32,
																		Line:   17,
																	},
																},
															},
															Name: "_measurement",
														},
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   17,
																},
																File:   "influxdb.flux",
																Source: "m",
																Start: ast.Position{
																	Column: 48,
																	Line:   17,
																},
															},
														},
														Name: "m",
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   17,
															},
															File:   "influxdb.flux",
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   17,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   17,
																},
																File:   "influxdb.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   17,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   17,
											},
											File:   "influxdb.flux",
											Source: "filter(fn: (r) => r._measurement == m)",
											Start: ast.Position{
												Column: 12,
												Line:   17,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   17,
												},
												File:   "influxdb.flux",
												Source: "filter",
												Start: ast.Position{
													Column: 12,
													Line:   17,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   18,
									},
									File:   "influxdb.flux",
									Source: "influxdb.from(bucket: from)\n        |> range(start, stop)\n        |> filter(fn: (r) => r._measurement == m)\n        |> filter(fn: where)",
									Start: ast.Position{
										Column: 14,
										Line:   15,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   18,
											},
											File:   "influxdb.flux",
											Source: "fn: where",
											Start: ast.Position{
												Column: 19,
												Line:   18,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   18,
												},
												File:   "influxdb.flux",
												Source: "fn: where",
												Start: ast.Position{
													Column: 19,
													Line:   18,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   18,
													},
													File:   "influxdb.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   18,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   18,
													},
													File:   "influxdb.flux",
													Source: "where",
													Start: ast.Position{
														Column: 23,
														Line:   18,
													},
												},
											},
											Name: "where",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   18,
										},
										File:   "influxdb.flux",
										Source: "filter(fn: where)",
										Start: ast.Position{
											Column: 12,
											Line:   18,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   18,
											},
											File:   "influxdb.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 12,
												Line:   18,
											},
										},
									},
									Name: "filter",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   20,
								},
								File:   "influxdb.flux",
								Source: "nfields = length(arr: fields)",
								Start: ast.Position{
									Column: 5,
									Line:   20,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   20,
									},
									File:   "influxdb.flux",
									Source: "nfields",
									Start: ast.Position{
										Column: 5,
										Line:   20,
									},
								},
							},
							Name: "nfields",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   20,
										},
										File:   "influxdb.flux",
										Source: "arr: fields",
										Start: ast.Position{
											Column: 22,
											Line:   20,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   20,
											},
											File:   "influxdb.flux",
											Source: "arr: fields",
											Start: ast.Position{
												Column: 22,
												Line:   20,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   20,
												},
												File:   "influxdb.flux",
												Source: "arr",
												Start: ast.Position{
													Column: 22,
													Line:   20,
												},
											},
										},
										Name: "arr",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   20,
												},
												File:   "influxdb.flux",
												Source: "fields",
												Start: ast.Position{
													Column: 27,
													Line:   20,
												},
											},
										},
										Name: "fields",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   20,
									},
									File:   "influxdb.flux",
									Source: "length(arr: fields)",
									Start: ast.Position{
										Column: 15,
										Line:   20,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   20,
										},
										File:   "influxdb.flux",
										Source: "length",
										Start: ast.Position{
											Column: 15,
											Line:   20,
										},
									},
								},
								Name: "length",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   32,
								},
								File:   "influxdb.flux",
								Source: "filtered = if nfields == 1 then\n            tables |> filter(fn: (r) => r._field == fields[0])\n        else if nfields == 2 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])\n        else if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))",
								Start: ast.Position{
									Column: 5,
									Line:   21,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   21,
									},
									File:   "influxdb.flux",
									Source: "filtered",
									Start: ast.Position{
										Column: 5,
										Line:   21,
									},
								},
							},
							Name: "filtered",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.ConditionalExpression{
								Alternate: &ast.ConditionalExpression{
									Alternate: &ast.ConditionalExpression{
										Alternate: &ast.ConditionalExpression{
											Alternate: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   32,
															},
															File:   "influxdb.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 13,
																Line:   32,
															},
														},
													},
													Name: "tables",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 80,
															Line:   32,
														},
														File:   "influxdb.flux",
														Source: "tables |> filter(fn: (r) => contains(value: r._field, set: fields))",
														Start: ast.Position{
															Column: 13,
															Line:   32,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 79,
																	Line:   32,
																},
																File:   "influxdb.flux",
																Source: "fn: (r) => contains(value: r._field, set: fields)",
																Start: ast.Position{
																	Column: 30,
																	Line:   32,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 79,
																		Line:   32,
																	},
																	File:   "influxdb.flux",
																	Source: "fn: (r) => contains(value: r._field, set: fields)",
																	Start: ast.Position{
																		Column: 30,
																		Line:   32,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   32,
																		},
																		File:   "influxdb.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 30,
																			Line:   32,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 79,
																			Line:   32,
																		},
																		File:   "influxdb.flux",
																		Source: "(r) => contains(value: r._field, set: fields)",
																		Start: ast.Position{
																			Column: 34,
																			Line:   32,
																		},
																	},
																},
																Body: &ast.CallExpression{
																	Arguments: []ast.Expression{&ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 78,
																					Line:   32,
																				},
																				File:   "influxdb.flux",
																				Source: "value: r._field, set: fields",
																				Start: ast.Position{
																					Column: 50,
																					Line:   32,
																				},
																			},
																		},
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 65,
																						Line:   32,
																					},
																					File:   "influxdb.flux",
																					Source: "value: r._field",
																					Start: ast.Position{
																						Column: 50,
																						Line:   32,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 55,
																							Line:   32,
																						},
																						File:   "influxdb.flux",
																						Source: "value",
																						Start: ast.Position{
																							Column: 50,
																							Line:   32,
																						},
																					},
																				},
																				Name: "value",
																			},
																			Value: &ast.MemberExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 65,
																							Line:   32,
																						},
																						File:   "influxdb.flux",
																						Source: "r._field",
																						Start: ast.Position{
																							Column: 57,
																							Line:   32,
																						},
																					},
																				},
																				Object: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 58,
																								Line:   32,
																							},
																							File:   "influxdb.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 57,
																								Line:   32,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Property: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 65,
																								Line:   32,
																							},
																							File:   "influxdb.flux",
																							Source: "_field",
																							Start: ast.Position{
																								Column: 59,
																								Line:   32,
																							},
																						},
																					},
																					Name: "_field",
																				},
																			},
																		}, &ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 78,
																						Line:   32,
																					},
																					File:   "influxdb.flux",
																					Source: "set: fields",
																					Start: ast.Position{
																						Column: 67,
																						Line:   32,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 70,
																							Line:   32,
																						},
																						File:   "influxdb.flux",
																						Source: "set",
																						Start: ast.Position{
																							Column: 67,
																							Line:   32,
																						},
																					},
																				},
																				Name: "set",
																			},
																			Value: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 78,
																							Line:   32,
																						},
																						File:   "influxdb.flux",
																						Source: "fields",
																						Start: ast.Position{
																							Column: 72,
																							Line:   32,
																						},
																					},
																				},
																				Name: "fields",
																			},
																		}},
																		With: nil,
																	}},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 79,
																				Line:   32,
																			},
																			File:   "influxdb.flux",
																			Source: "contains(value: r._field, set: fields)",
																			Start: ast.Position{
																				Column: 41,
																				Line:   32,
																			},
																		},
																	},
																	Callee: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   32,
																				},
																				File:   "influxdb.flux",
																				Source: "contains",
																				Start: ast.Position{
																					Column: 41,
																					Line:   32,
																				},
																			},
																		},
																		Name: "contains",
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 36,
																				Line:   32,
																			},
																			File:   "influxdb.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 35,
																				Line:   32,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 36,
																					Line:   32,
																				},
																				File:   "influxdb.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 35,
																					Line:   32,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 80,
																Line:   32,
															},
															File:   "influxdb.flux",
															Source: "filter(fn: (r) => contains(value: r._field, set: fields))",
															Start: ast.Position{
																Column: 23,
																Line:   32,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   32,
																},
																File:   "influxdb.flux",
																Source: "filter",
																Start: ast.Position{
																	Column: 23,
																	Line:   32,
																},
															},
														},
														Name: "filter",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 80,
														Line:   32,
													},
													File:   "influxdb.flux",
													Source: "if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))",
													Start: ast.Position{
														Column: 14,
														Line:   29,
													},
												},
											},
											Consequent: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   30,
															},
															File:   "influxdb.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 13,
																Line:   30,
															},
														},
													},
													Name: "tables",
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 163,
															Line:   30,
														},
														File:   "influxdb.flux",
														Source: "tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])",
														Start: ast.Position{
															Column: 13,
															Line:   30,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 162,
																	Line:   30,
																},
																File:   "influxdb.flux",
																Source: "fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4]",
																Start: ast.Position{
																	Column: 30,
																	Line:   30,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 162,
																		Line:   30,
																	},
																	File:   "influxdb.flux",
																	Source: "fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4]",
																	Start: ast.Position{
																		Column: 30,
																		Line:   30,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   30,
																		},
																		File:   "influxdb.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 30,
																			Line:   30,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 162,
																			Line:   30,
																		},
																		File:   "influxdb.flux",
																		Source: "(r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4]",
																		Start: ast.Position{
																			Column: 34,
																			Line:   30,
																		},
																	},
																},
																Body: &ast.LogicalExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 162,
																				Line:   30,
																			},
																			File:   "influxdb.flux",
																			Source: "r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4]",
																			Start: ast.Position{
																				Column: 41,
																				Line:   30,
																			},
																		},
																	},
																	Left: &ast.LogicalExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 137,
																					Line:   30,
																				},
																				File:   "influxdb.flux",
																				Source: "r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3]",
																				Start: ast.Position{
																					Column: 41,
																					Line:   30,
																				},
																			},
																		},
																		Left: &ast.LogicalExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 112,
																						Line:   30,
																					},
																					File:   "influxdb.flux",
																					Source: "r._field == fields[0] or r._field == fields[1] or r._field == fields[2]",
																					Start: ast.Position{
																						Column: 41,
																						Line:   30,
																					},
																				},
																			},
																			Left: &ast.LogicalExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 87,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "r._field == fields[0] or r._field == fields[1]",
																						Start: ast.Position{
																							Column: 41,
																							Line:   30,
																						},
																					},
																				},
																				Left: &ast.BinaryExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 62,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "r._field == fields[0]",
																							Start: ast.Position{
																								Column: 41,
																								Line:   30,
																							},
																						},
																					},
																					Left: &ast.MemberExpression{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 49,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "r._field",
																								Start: ast.Position{
																									Column: 41,
																									Line:   30,
																								},
																							},
																						},
																						Object: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 42,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 41,
																										Line:   30,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Property: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 49,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "_field",
																									Start: ast.Position{
																										Column: 43,
																										Line:   30,
																									},
																								},
																							},
																							Name: "_field",
																						},
																					},
																					Operator: 17,
																					Right: &ast.IndexExpression{
																						Array: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 59,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "fields",
																									Start: ast.Position{
																										Column: 53,
																										Line:   30,
																									},
																								},
																							},
																							Name: "fields",
																						},
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 62,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "fields[0]",
																								Start: ast.Position{
																									Column: 53,
																									Line:   30,
																								},
																							},
																						},
																						Index: &ast.IntegerLiteral{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 61,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "0",
																									Start: ast.Position{
																										Column: 60,
																										Line:   30,
																									},
																								},
																							},
																							Value: int64(0),
																						},
																					},
																				},
																				Operator: 2,
																				Right: &ast.BinaryExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 87,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "r._field == fields[1]",
																							Start: ast.Position{
																								Column: 66,
																								Line:   30,
																							},
																						},
																					},
																					Left: &ast.MemberExpression{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 74,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "r._field",
																								Start: ast.Position{
																									Column: 66,
																									Line:   30,
																								},
																							},
																						},
																						Object: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 67,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 66,
																										Line:   30,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Property: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 74,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "_field",
																									Start: ast.Position{
																										Column: 68,
																										Line:   30,
																									},
																								},
																							},
																							Name: "_field",
																						},
																					},
																					Operator: 17,
																					Right: &ast.IndexExpression{
																						Array: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 84,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "fields",
																									Start: ast.Position{
																										Column: 78,
																										Line:   30,
																									},
																								},
																							},
																							Name: "fields",
																						},
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 87,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "fields[1]",
																								Start: ast.Position{
																									Column: 78,
																									Line:   30,
																								},
																							},
																						},
																						Index: &ast.IntegerLiteral{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 86,
																										Line:   30,
																									},
																									File:   "influxdb.flux",
																									Source: "1",
																									Start: ast.Position{
																										Column: 85,
																										Line:   30,
																									},
																								},
																							},
																							Value: int64(1),
																						},
																					},
																				},
																			},
																			Operator: 2,
																			Right: &ast.BinaryExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 112,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "r._field == fields[2]",
																						Start: ast.Position{
																							Column: 91,
																							Line:   30,
																						},
																					},
																				},
																				Left: &ast.MemberExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 99,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "r._field",
																							Start: ast.Position{
																								Column: 91,
																								Line:   30,
																							},
																						},
																					},
																					Object: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 92,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 91,
																									Line:   30,
																								},
																							},
																						},
																						Name: "r",
																					},
																					Property: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 99,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "_field",
																								Start: ast.Position{
																									Column: 93,
																									Line:   30,
																								},
																							},
																						},
																						Name: "_field",
																					},
																				},
																				Operator: 17,
																				Right: &ast.IndexExpression{
																					Array: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 109,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "fields",
																								Start: ast.Position{
																									Column: 103,
																									Line:   30,
																								},
																							},
																						},
																						Name: "fields",
																					},
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 112,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "fields[2]",
																							Start: ast.Position{
																								Column: 103,
																								Line:   30,
																							},
																						},
																					},
																					Index: &ast.IntegerLiteral{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 111,
																									Line:   30,
																								},
																								File:   "influxdb.flux",
																								Source: "2",
																								Start: ast.Position{
																									Column: 110,
																									Line:   30,
																								},
																							},
																						},
																						Value: int64(2),
																					},
																				},
																			},
																		},
																		Operator: 2,
																		Right: &ast.BinaryExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 137,
																						Line:   30,
																					},
																					File:   "influxdb.flux",
																					Source: "r._field == fields[3]",
																					Start: ast.Position{
																						Column: 116,
																						Line:   30,
																					},
																				},
																			},
																			Left: &ast.MemberExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 124,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "r._field",
																						Start: ast.Position{
																							Column: 116,
																							Line:   30,
																						},
																					},
																				},
																				Object: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 117,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 116,
																								Line:   30,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Property: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 124,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "_field",
																							Start: ast.Position{
																								Column: 118,
																								Line:   30,
																							},
																						},
																					},
																					Name: "_field",
																				},
																			},
																			Operator: 17,
																			Right: &ast.IndexExpression{
																				Array: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 134,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "fields",
																							Start: ast.Position{
																								Column: 128,
																								Line:   30,
																							},
																						},
																					},
																					Name: "fields",
																				},
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 137,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "fields[3]",
																						Start: ast.Position{
																							Column: 128,
																							Line:   30,
																						},
																					},
																				},
																				Index: &ast.IntegerLiteral{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 136,
																								Line:   30,
																							},
																							File:   "influxdb.flux",
																							Source: "3",
																							Start: ast.Position{
																								Column: 135,
																								Line:   30,
																							},
																						},
																					},
																					Value: int64(3),
																				},
																			},
																		},
																	},
																	Operator: 2,
																	Right: &ast.BinaryExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 162,
																					Line:   30,
																				},
																				File:   "influxdb.flux",
																				Source: "r._field == fields[4]",
																				Start: ast.Position{
																					Column: 141,
																					Line:   30,
																				},
																			},
																		},
																		Left: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 149,
																						Line:   30,
																					},
																					File:   "influxdb.flux",
																					Source: "r._field",
																					Start: ast.Position{
																						Column: 141,
																						Line:   30,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 142,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 141,
																							Line:   30,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 149,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "_field",
																						Start: ast.Position{
																							Column: 143,
																							Line:   30,
																						},
																					},
																				},
																				Name: "_field",
																			},
																		},
																		Operator: 17,
																		Right: &ast.IndexExpression{
																			Array: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 159,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "fields",
																						Start: ast.Position{
																							Column: 153,
																							Line:   30,
																						},
																					},
																				},
																				Name: "fields",
																			},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 162,
																						Line:   30,
																					},
																					File:   "influxdb.flux",
																					Source: "fields[4]",
																					Start: ast.Position{
																						Column: 153,
																						Line:   30,
																					},
																				},
																			},
																			Index: &ast.IntegerLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 161,
																							Line:   30,
																						},
																						File:   "influxdb.flux",
																						Source: "4",
																						Start: ast.Position{
																							Column: 160,
																							Line:   30,
																						},
																					},
																				},
																				Value: int64(4),
																			},
																		},
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 36,
																				Line:   30,
																			},
																			File:   "influxdb.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 35,
																				Line:   30,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 36,
																					Line:   30,
																				},
																				File:   "influxdb.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 35,
																					Line:   30,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 163,
																Line:   30,
															},
															File:   "influxdb.flux",
															Source: "filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])",
															Start: ast.Position{
																Column: 23,
																Line:   30,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   30,
																},
																File:   "influxdb.flux",
																Source: "filter",
																Start: ast.Position{
																	Column: 23,
																	Line:   30,
																},
															},
														},
														Name: "filter",
													},
												},
											},
											Test: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   29,
														},
														File:   "influxdb.flux",
														Source: "nfields == 5",
														Start: ast.Position{
															Column: 17,
															Line:   29,
														},
													},
												},
												Left: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   29,
															},
															File:   "influxdb.flux",
															Source: "nfields",
															Start: ast.Position{
																Column: 17,
																Line:   29,
															},
														},
													},
													Name: "nfields",
												},
												Operator: 17,
												Right: &ast.IntegerLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   29,
															},
															File:   "influxdb.flux",
															Source: "5",
															Start: ast.Position{
																Column: 28,
																Line:   29,
															},
														},
													},
													Value: int64(5),
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 80,
													Line:   32,
												},
												File:   "influxdb.flux",
												Source: "if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))",
												Start: ast.Position{
													Column: 14,
													Line:   27,
												},
											},
										},
										Consequent: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   28,
														},
														File:   "influxdb.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 13,
															Line:   28,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 138,
														Line:   28,
													},
													File:   "influxdb.flux",
													Source: "tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])",
													Start: ast.Position{
														Column: 13,
														Line:   28,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 137,
																Line:   28,
															},
															File:   "influxdb.flux",
															Source: "fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3]",
															Start: ast.Position{
																Column: 30,
																Line:   28,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 137,
																	Line:   28,
																},
																File:   "influxdb.flux",
																Source: "fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3]",
																Start: ast.Position{
																	Column: 30,
																	Line:   28,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 32,
																		Line:   28,
																	},
																	File:   "influxdb.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 30,
																		Line:   28,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 137,
																		Line:   28,
																	},
																	File:   "influxdb.flux",
																	Source: "(r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3]",
																	Start: ast.Position{
																		Column: 34,
																		Line:   28,
																	},
																},
															},
															Body: &ast.LogicalExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 137,
																			Line:   28,
																		},
																		File:   "influxdb.flux",
																		Source: "r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3]",
																		Start: ast.Position{
																			Column: 41,
																			Line:   28,
																		},
																	},
																},
																Left: &ast.LogicalExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 112,
																				Line:   28,
																			},
																			File:   "influxdb.flux",
																			Source: "r._field == fields[0] or r._field == fields[1] or r._field == fields[2]",
																			Start: ast.Position{
																				Column: 41,
																				Line:   28,
																			},
																		},
																	},
																	Left: &ast.LogicalExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 87,
																					Line:   28,
																				},
																				File:   "influxdb.flux",
																				Source: "r._field == fields[0] or r._field == fields[1]",
																				Start: ast.Position{
																					Column: 41,
																					Line:   28,
																				},
																			},
																		},
																		Left: &ast.BinaryExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 62,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "r._field == fields[0]",
																					Start: ast.Position{
																						Column: 41,
																						Line:   28,
																					},
																				},
																			},
																			Left: &ast.MemberExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 49,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "r._field",
																						Start: ast.Position{
																							Column: 41,
																							Line:   28,
																						},
																					},
																				},
																				Object: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 42,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 41,
																								Line:   28,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Property: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 49,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "_field",
																							Start: ast.Position{
																								Column: 43,
																								Line:   28,
																							},
																						},
																					},
																					Name: "_field",
																				},
																			},
																			Operator: 17,
																			Right: &ast.IndexExpression{
																				Array: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 59,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "fields",
																							Start: ast.Position{
																								Column: 53,
																								Line:   28,
																							},
																						},
																					},
																					Name: "fields",
																				},
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 62,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "fields[0]",
																						Start: ast.Position{
																							Column: 53,
																							Line:   28,
																						},
																					},
																				},
																				Index: &ast.IntegerLiteral{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 61,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "0",
																							Start: ast.Position{
																								Column: 60,
																								Line:   28,
																							},
																						},
																					},
																					Value: int64(0),
																				},
																			},
																		},
																		Operator: 2,
																		Right: &ast.BinaryExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 87,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "r._field == fields[1]",
																					Start: ast.Position{
																						Column: 66,
																						Line:   28,
																					},
																				},
																			},
																			Left: &ast.MemberExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 74,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "r._field",
																						Start: ast.Position{
																							Column: 66,
																							Line:   28,
																						},
																					},
																				},
																				Object: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 67,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 66,
																								Line:   28,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Property: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 74,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "_field",
																							Start: ast.Position{
																								Column: 68,
																								Line:   28,
																							},
																						},
																					},
																					Name: "_field",
																				},
																			},
																			Operator: 17,
																			Right: &ast.IndexExpression{
																				Array: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 84,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "fields",
																							Start: ast.Position{
																								Column: 78,
																								Line:   28,
																							},
																						},
																					},
																					Name: "fields",
																				},
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 87,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "fields[1]",
																						Start: ast.Position{
																							Column: 78,
																							Line:   28,
																						},
																					},
																				},
																				Index: &ast.IntegerLiteral{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 86,
																								Line:   28,
																							},
																							File:   "influxdb.flux",
																							Source: "1",
																							Start: ast.Position{
																								Column: 85,
																								Line:   28,
																							},
																						},
																					},
																					Value: int64(1),
																				},
																			},
																		},
																	},
																	Operator: 2,
																	Right: &ast.BinaryExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 112,
																					Line:   28,
																				},
																				File:   "influxdb.flux",
																				Source: "r._field == fields[2]",
																				Start: ast.Position{
																					Column: 91,
																					Line:   28,
																				},
																			},
																		},
																		Left: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 99,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "r._field",
																					Start: ast.Position{
																						Column: 91,
																						Line:   28,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 92,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 91,
																							Line:   28,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 99,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "_field",
																						Start: ast.Position{
																							Column: 93,
																							Line:   28,
																						},
																					},
																				},
																				Name: "_field",
																			},
																		},
																		Operator: 17,
																		Right: &ast.IndexExpression{
																			Array: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 109,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "fields",
																						Start: ast.Position{
																							Column: 103,
																							Line:   28,
																						},
																					},
																				},
																				Name: "fields",
																			},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 112,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "fields[2]",
																					Start: ast.Position{
																						Column: 103,
																						Line:   28,
																					},
																				},
																			},
																			Index: &ast.IntegerLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 111,
																							Line:   28,
																						},
																						File:   "influxdb.flux",
																						Source: "2",
																						Start: ast.Position{
																							Column: 110,
																							Line:   28,
																						},
																					},
																				},
																				Value: int64(2),
																			},
																		},
																	},
																},
																Operator: 2,
																Right: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 137,
																				Line:   28,
																			},
																			File:   "influxdb.flux",
																			Source: "r._field == fields[3]",
																			Start: ast.Position{
																				Column: 116,
																				Line:   28,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 124,
																					Line:   28,
																				},
																				File:   "influxdb.flux",
																				Source: "r._field",
																				Start: ast.Position{
																					Column: 116,
																					Line:   28,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 117,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 116,
																						Line:   28,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 124,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "_field",
																					Start: ast.Position{
																						Column: 118,
																						Line:   28,
																					},
																				},
																			},
																			Name: "_field",
																		},
																	},
																	Operator: 17,
																	Right: &ast.IndexExpression{
																		Array: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 134,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "fields",
																					Start: ast.Position{
																						Column: 128,
																						Line:   28,
																					},
																				},
																			},
																			Name: "fields",
																		},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 137,
																					Line:   28,
																				},
																				File:   "influxdb.flux",
																				Source: "fields[3]",
																				Start: ast.Position{
																					Column: 128,
																					Line:   28,
																				},
																			},
																		},
																		Index: &ast.IntegerLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 136,
																						Line:   28,
																					},
																					File:   "influxdb.flux",
																					Source: "3",
																					Start: ast.Position{
																						Column: 135,
																						Line:   28,
																					},
																				},
																			},
																			Value: int64(3),
																		},
																	},
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   28,
																		},
																		File:   "influxdb.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 35,
																			Line:   28,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 36,
																				Line:   28,
																			},
																			File:   "influxdb.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 35,
																				Line:   28,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 138,
															Line:   28,
														},
														File:   "influxdb.flux",
														Source: "filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])",
														Start: ast.Position{
															Column: 23,
															Line:   28,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   28,
															},
															File:   "influxdb.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 23,
																Line:   28,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										Test: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   27,
													},
													File:   "influxdb.flux",
													Source: "nfields == 4",
													Start: ast.Position{
														Column: 17,
														Line:   27,
													},
												},
											},
											Left: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   27,
														},
														File:   "influxdb.flux",
														Source: "nfields",
														Start: ast.Position{
															Column: 17,
															Line:   27,
														},
													},
												},
												Name: "nfields",
											},
											Operator: 17,
											Right: &ast.IntegerLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   27,
														},
														File:   "influxdb.flux",
														Source: "4",
														Start: ast.Position{
															Column: 28,
															Line:   27,
														},
													},
												},
												Value: int64(4),
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 80,
												Line:   32,
											},
											File:   "influxdb.flux",
											Source: "if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))",
											Start: ast.Position{
												Column: 14,
												Line:   25,
											},
										},
									},
									Consequent: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   26,
													},
													File:   "influxdb.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 13,
														Line:   26,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 113,
													Line:   26,
												},
												File:   "influxdb.flux",
												Source: "tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])",
												Start: ast.Position{
													Column: 13,
													Line:   26,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 112,
															Line:   26,
														},
														File:   "influxdb.flux",
														Source: "fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2]",
														Start: ast.Position{
															Column: 30,
															Line:   26,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 112,
																Line:   26,
															},
															File:   "influxdb.flux",
															Source: "fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2]",
															Start: ast.Position{
																Column: 30,
																Line:   26,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 32,
																	Line:   26,
																},
																File:   "influxdb.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 30,
																	Line:   26,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 112,
																	Line:   26,
																},
																File:   "influxdb.flux",
																Source: "(r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2]",
																Start: ast.Position{
																	Column: 34,
																	Line:   26,
																},
															},
														},
														Body: &ast.LogicalExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 112,
																		Line:   26,
																	},
																	File:   "influxdb.flux",
																	Source: "r._field == fields[0] or r._field == fields[1] or r._field == fields[2]",
																	Start: ast.Position{
																		Column: 41,
																		Line:   26,
																	},
																},
															},
															Left: &ast.LogicalExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 87,
																			Line:   26,
																		},
																		File:   "influxdb.flux",
																		Source: "r._field == fields[0] or r._field == fields[1]",
																		Start: ast.Position{
																			Column: 41,
																			Line:   26,
																		},
																	},
																},
																Left: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 62,
																				Line:   26,
																			},
																			File:   "influxdb.flux",
																			Source: "r._field == fields[0]",
																			Start: ast.Position{
																				Column: 41,
																				Line:   26,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "r._field",
																				Start: ast.Position{
																					Column: 41,
																					Line:   26,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 42,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 41,
																						Line:   26,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 49,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "_field",
																					Start: ast.Position{
																						Column: 43,
																						Line:   26,
																					},
																				},
																			},
																			Name: "_field",
																		},
																	},
																	Operator: 17,
																	Right: &ast.IndexExpression{
																		Array: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 59,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "fields",
																					Start: ast.Position{
																						Column: 53,
																						Line:   26,
																					},
																				},
																			},
																			Name: "fields",
																		},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 62,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "fields[0]",
																				Start: ast.Position{
																					Column: 53,
																					Line:   26,
																				},
																			},
																		},
																		Index: &ast.IntegerLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 61,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "0",
																					Start: ast.Position{
																						Column: 60,
																						Line:   26,
																					},
																				},
																			},
																			Value: int64(0),
																		},
																	},
																},
																Operator: 2,
																Right: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 87,
																				Line:   26,
																			},
																			File:   "influxdb.flux",
																			Source: "r._field == fields[1]",
																			Start: ast.Position{
																				Column: 66,
																				Line:   26,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 74,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "r._field",
																				Start: ast.Position{
																					Column: 66,
																					Line:   26,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 67,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 66,
																						Line:   26,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 74,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "_field",
																					Start: ast.Position{
																						Column: 68,
																						Line:   26,
																					},
																				},
																			},
																			Name: "_field",
																		},
																	},
																	Operator: 17,
																	Right: &ast.IndexExpression{
																		Array: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 84,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "fields",
																					Start: ast.Position{
																						Column: 78,
																						Line:   26,
																					},
																				},
																			},
																			Name: "fields",
																		},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 87,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "fields[1]",
																				Start: ast.Position{
																					Column: 78,
																					Line:   26,
																				},
																			},
																		},
																		Index: &ast.IntegerLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 86,
																						Line:   26,
																					},
																					File:   "influxdb.flux",
																					Source: "1",
																					Start: ast.Position{
																						Column: 85,
																						Line:   26,
																					},
																				},
																			},
																			Value: int64(1),
																		},
																	},
																},
															},
															Operator: 2,
															Right: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 112,
																			Line:   26,
																		},
																		File:   "influxdb.flux",
																		Source: "r._field == fields[2]",
																		Start: ast.Position{
																			Column: 91,
																			Line:   26,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 99,
																				Line:   26,
																			},
																			File:   "influxdb.flux",
																			Source: "r._field",
																			Start: ast.Position{
																				Column: 91,
																				Line:   26,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 92,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 91,
																					Line:   26,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 99,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 93,
																					Line:   26,
																				},
																			},
																		},
																		Name: "_field",
																	},
																},
																Operator: 17,
																Right: &ast.IndexExpression{
																	Array: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 109,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "fields",
																				Start: ast.Position{
																					Column: 103,
																					Line:   26,
																				},
																			},
																		},
																		Name: "fields",
																	},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 112,
																				Line:   26,
																			},
																			File:   "influxdb.flux",
																			Source: "fields[2]",
																			Start: ast.Position{
																				Column: 103,
																				Line:   26,
																			},
																		},
																	},
																	Index: &ast.IntegerLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 111,
																					Line:   26,
																				},
																				File:   "influxdb.flux",
																				Source: "2",
																				Start: ast.Position{
																					Column: 110,
																					Line:   26,
																				},
																			},
																		},
																		Value: int64(2),
																	},
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   26,
																	},
																	File:   "influxdb.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 35,
																		Line:   26,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   26,
																		},
																		File:   "influxdb.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 35,
																			Line:   26,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 113,
														Line:   26,
													},
													File:   "influxdb.flux",
													Source: "filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])",
													Start: ast.Position{
														Column: 23,
														Line:   26,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   26,
														},
														File:   "influxdb.flux",
														Source: "filter",
														Start: ast.Position{
															Column: 23,
															Line:   26,
														},
													},
												},
												Name: "filter",
											},
										},
									},
									Test: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   25,
												},
												File:   "influxdb.flux",
												Source: "nfields == 3",
												Start: ast.Position{
													Column: 17,
													Line:   25,
												},
											},
										},
										Left: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   25,
													},
													File:   "influxdb.flux",
													Source: "nfields",
													Start: ast.Position{
														Column: 17,
														Line:   25,
													},
												},
											},
											Name: "nfields",
										},
										Operator: 17,
										Right: &ast.IntegerLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   25,
													},
													File:   "influxdb.flux",
													Source: "3",
													Start: ast.Position{
														Column: 28,
														Line:   25,
													},
												},
											},
											Value: int64(3),
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 80,
											Line:   32,
										},
										File:   "influxdb.flux",
										Source: "if nfields == 2 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])\n        else if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))",
										Start: ast.Position{
											Column: 14,
											Line:   23,
										},
									},
								},
								Consequent: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   24,
												},
												File:   "influxdb.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 13,
													Line:   24,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   24,
											},
											File:   "influxdb.flux",
											Source: "tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])",
											Start: ast.Position{
												Column: 13,
												Line:   24,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   24,
													},
													File:   "influxdb.flux",
													Source: "fn: (r) => r._field == fields[0] or r._field == fields[1]",
													Start: ast.Position{
														Column: 30,
														Line:   24,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   24,
														},
														File:   "influxdb.flux",
														Source: "fn: (r) => r._field == fields[0] or r._field == fields[1]",
														Start: ast.Position{
															Column: 30,
															Line:   24,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   24,
															},
															File:   "influxdb.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 30,
																Line:   24,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 87,
																Line:   24,
															},
															File:   "influxdb.flux",
															Source: "(r) => r._field == fields[0] or r._field == fields[1]",
															Start: ast.Position{
																Column: 34,
																Line:   24,
															},
														},
													},
													Body: &ast.LogicalExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 87,
																	Line:   24,
																},
																File:   "influxdb.flux",
																Source: "r._field == fields[0] or r._field == fields[1]",
																Start: ast.Position{
																	Column: 41,
																	Line:   24,
																},
															},
														},
														Left: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 62,
																		Line:   24,
																	},
																	File:   "influxdb.flux",
																	Source: "r._field == fields[0]",
																	Start: ast.Position{
																		Column: 41,
																		Line:   24,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 49,
																			Line:   24,
																		},
																		File:   "influxdb.flux",
																		Source: "r._field",
																		Start: ast.Position{
																			Column: 41,
																			Line:   24,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 42,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 41,
																				Line:   24,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 49,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "_field",
																			Start: ast.Position{
																				Column: 43,
																				Line:   24,
																			},
																		},
																	},
																	Name: "_field",
																},
															},
															Operator: 17,
															Right: &ast.IndexExpression{
																Array: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 59,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "fields",
																			Start: ast.Position{
																				Column: 53,
																				Line:   24,
																			},
																		},
																	},
																	Name: "fields",
																},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 62,
																			Line:   24,
																		},
																		File:   "influxdb.flux",
																		Source: "fields[0]",
																		Start: ast.Position{
																			Column: 53,
																			Line:   24,
																		},
																	},
																},
																Index: &ast.IntegerLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 61,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "0",
																			Start: ast.Position{
																				Column: 60,
																				Line:   24,
																			},
																		},
																	},
																	Value: int64(0),
																},
															},
														},
														Operator: 2,
														Right: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 87,
																		Line:   24,
																	},
																	File:   "influxdb.flux",
																	Source: "r._field == fields[1]",
																	Start: ast.Position{
																		Column: 66,
																		Line:   24,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 74,
																			Line:   24,
																		},
																		File:   "influxdb.flux",
																		Source: "r._field",
																		Start: ast.Position{
																			Column: 66,
																			Line:   24,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 67,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 66,
																				Line:   24,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 74,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "_field",
																			Start: ast.Position{
																				Column: 68,
																				Line:   24,
																			},
																		},
																	},
																	Name: "_field",
																},
															},
															Operator: 17,
															Right: &ast.IndexExpression{
																Array: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 84,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "fields",
																			Start: ast.Position{
																				Column: 78,
																				Line:   24,
																			},
																		},
																	},
																	Name: "fields",
																},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 87,
																			Line:   24,
																		},
																		File:   "influxdb.flux",
																		Source: "fields[1]",
																		Start: ast.Position{
																			Column: 78,
																			Line:   24,
																		},
																	},
																},
																Index: &ast.IntegerLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 86,
																				Line:   24,
																			},
																			File:   "influxdb.flux",
																			Source: "1",
																			Start: ast.Position{
																				Column: 85,
																				Line:   24,
																			},
																		},
																	},
																	Value: int64(1),
																},
															},
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   24,
																},
																File:   "influxdb.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 35,
																	Line:   24,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   24,
																	},
																	File:   "influxdb.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 35,
																		Line:   24,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 88,
													Line:   24,
												},
												File:   "influxdb.flux",
												Source: "filter(fn: (r) => r._field == fields[0] or r._field == fields[1])",
												Start: ast.Position{
													Column: 23,
													Line:   24,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   24,
													},
													File:   "influxdb.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 23,
														Line:   24,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								Test: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   23,
											},
											File:   "influxdb.flux",
											Source: "nfields == 2",
											Start: ast.Position{
												Column: 17,
												Line:   23,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   23,
												},
												File:   "influxdb.flux",
												Source: "nfields",
												Start: ast.Position{
													Column: 17,
													Line:   23,
												},
											},
										},
										Name: "nfields",
									},
									Operator: 17,
									Right: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   23,
												},
												File:   "influxdb.flux",
												Source: "2",
												Start: ast.Position{
													Column: 28,
													Line:   23,
												},
											},
										},
										Value: int64(2),
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   32,
									},
									File:   "influxdb.flux",
									Source: "if nfields == 1 then\n            tables |> filter(fn: (r) => r._field == fields[0])\n        else if nfields == 2 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1])\n        else if nfields == 3 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2])\n        else if nfields == 4 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3])\n        else if nfields == 5 then\n            tables |> filter(fn: (r) => r._field == fields[0] or r._field == fields[1] or r._field == fields[2] or r._field == fields[3] or r._field == fields[4])\n        else\n            tables |> filter(fn: (r) => contains(value: r._field, set: fields))",
									Start: ast.Position{
										Column: 16,
										Line:   21,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   22,
											},
											File:   "influxdb.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 13,
												Line:   22,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   22,
										},
										File:   "influxdb.flux",
										Source: "tables |> filter(fn: (r) => r._field == fields[0])",
										Start: ast.Position{
											Column: 13,
											Line:   22,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   22,
												},
												File:   "influxdb.flux",
												Source: "fn: (r) => r._field == fields[0]",
												Start: ast.Position{
													Column: 30,
													Line:   22,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   22,
													},
													File:   "influxdb.flux",
													Source: "fn: (r) => r._field == fields[0]",
													Start: ast.Position{
														Column: 30,
														Line:   22,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   22,
														},
														File:   "influxdb.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 30,
															Line:   22,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   22,
														},
														File:   "influxdb.flux",
														Source: "(r) => r._field == fields[0]",
														Start: ast.Position{
															Column: 34,
															Line:   22,
														},
													},
												},
												Body: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 62,
																Line:   22,
															},
															File:   "influxdb.flux",
															Source: "r._field == fields[0]",
															Start: ast.Position{
																Column: 41,
																Line:   22,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   22,
																},
																File:   "influxdb.flux",
																Source: "r._field",
																Start: ast.Position{
																	Column: 41,
																	Line:   22,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   22,
																	},
																	File:   "influxdb.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 41,
																		Line:   22,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   22,
																	},
																	File:   "influxdb.flux",
																	Source: "_field",
																	Start: ast.Position{
																		Column: 43,
																		Line:   22,
																	},
																},
															},
															Name: "_field",
														},
													},
													Operator: 17,
													Right: &ast.IndexExpression{
														Array: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   22,
																	},
																	File:   "influxdb.flux",
																	Source: "fields",
																	Start: ast.Position{
																		Column: 53,
																		Line:   22,
																	},
																},
															},
															Name: "fields",
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 62,
																	Line:   22,
																},
																File:   "influxdb.flux",
																Source: "fields[0]",
																Start: ast.Position{
																	Column: 53,
																	Line:   22,
																},
															},
														},
														Index: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 61,
																		Line:   22,
																	},
																	File:   "influxdb.flux",
																	Source: "0",
																	Start: ast.Position{
																		Column: 60,
																		Line:   22,
																	},
																},
															},
															Value: int64(0),
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   22,
															},
															File:   "influxdb.flux",
															Source: "r",
															Start: ast.Position{
																Column: 35,
																Line:   22,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   22,
																},
																File:   "influxdb.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 35,
																	Line:   22,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   22,
											},
											File:   "influxdb.flux",
											Source: "filter(fn: (r) => r._field == fields[0])",
											Start: ast.Position{
												Column: 23,
												Line:   22,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   22,
												},
												File:   "influxdb.flux",
												Source: "filter",
												Start: ast.Position{
													Column: 23,
													Line:   22,
												},
											},
										},
										Name: "filter",
									},
								},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   21,
										},
										File:   "influxdb.flux",
										Source: "nfields == 1",
										Start: ast.Position{
											Column: 19,
											Line:   21,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   21,
											},
											File:   "influxdb.flux",
											Source: "nfields",
											Start: ast.Position{
												Column: 19,
												Line:   21,
											},
										},
									},
									Name: "nfields",
								},
								Operator: 17,
								Right: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   21,
											},
											File:   "influxdb.flux",
											Source: "1",
											Start: ast.Position{
												Column: 30,
												Line:   21,
											},
										},
									},
									Value: int64(1),
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   33,
										},
										File:   "influxdb.flux",
										Source: "filtered",
										Start: ast.Position{
											Column: 12,
											Line:   33,
										},
									},
								},
								Name: "filtered",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   33,
									},
									File:   "influxdb.flux",
									Source: "filtered |> v1.fieldsAsCols()",
									Start: ast.Position{
										Column: 12,
										Line:   33,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   33,
										},
										File:   "influxdb.flux",
										Source: "v1.fieldsAsCols()",
										Start: ast.Position{
											Column: 24,
											Line:   33,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   33,
											},
											File:   "influxdb.flux",
											Source: "v1.fieldsAsCols",
											Start: ast.Position{
												Column: 24,
												Line:   33,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   33,
												},
												File:   "influxdb.flux",
												Source: "v1",
												Start: ast.Position{
													Column: 24,
													Line:   33,
												},
											},
										},
										Name: "v1",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   33,
												},
												File:   "influxdb.flux",
												Source: "fieldsAsCols",
												Start: ast.Position{
													Column: 27,
													Line:   33,
												},
											},
										},
										Name: "fieldsAsCols",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   33,
								},
								File:   "influxdb.flux",
								Source: "return filtered |> v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 5,
									Line:   33,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   14,
							},
							File:   "influxdb.flux",
							Source: "from",
							Start: ast.Position{
								Column: 11,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "from",
								Start: ast.Position{
									Column: 11,
									Line:   14,
								},
							},
						},
						Name: "from",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   14,
							},
							File:   "influxdb.flux",
							Source: "start",
							Start: ast.Position{
								Column: 17,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "start",
								Start: ast.Position{
									Column: 17,
									Line:   14,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   14,
							},
							File:   "influxdb.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 24,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 24,
									Line:   14,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 29,
									Line:   14,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   14,
									},
									File:   "influxdb.flux",
									Source: "now",
									Start: ast.Position{
										Column: 29,
										Line:   14,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   14,
							},
							File:   "influxdb.flux",
							Source: "m",
							Start: ast.Position{
								Column: 36,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "m",
								Start: ast.Position{
									Column: 36,
									Line:   14,
								},
							},
						},
						Name: "m",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 45,
								Line:   14,
							},
							File:   "influxdb.flux",
							Source: "fields",
							Start: ast.Position{
								Column: 39,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "fields",
								Start: ast.Position{
									Column: 39,
									Line:   14,
								},
							},
						},
						Name: "fields",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   14,
							},
							File:   "influxdb.flux",
							Source: "where=(r) => true",
							Start: ast.Position{
								Column: 47,
								Line:   14,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "where",
								Start: ast.Position{
									Column: 47,
									Line:   14,
								},
							},
						},
						Name: "where",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   14,
								},
								File:   "influxdb.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 53,
									Line:   14,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   14,
									},
									File:   "influxdb.flux",
									Source: "true",
									Start: ast.Position{
										Column: 60,
										Line:   14,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   14,
									},
									File:   "influxdb.flux",
									Source: "r",
									Start: ast.Position{
										Column: 54,
										Line:   14,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   14,
										},
										File:   "influxdb.flux",
										Source: "r",
										Start: ast.Position{
											Column: 54,
											Line:   14,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   3,
					},
					File:   "influxdb.flux",
					Source: "import \"influxdata/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   3,
						},
						File:   "influxdb.flux",
						Source: "\"influxdata/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "influxdata/influxdb",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   4,
					},
					File:   "influxdb.flux",
					Source: "import \"influxdata/influxdb/v1\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   4,
						},
						File:   "influxdb.flux",
						Source: "\"influxdata/influxdb/v1\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "influxdata/influxdb/v1",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "influxdb.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   1,
					},
					File:   "influxdb.flux",
					Source: "package influxdb",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						File:   "influxdb.flux",
						Source: "influxdb",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxdb",
			},
		},
	}},
	Package: "influxdb",
	Path:    "contrib/jsternberg/influxdb",
}
