// DO NOT EDIT: This file is autogenerated via the builtin command.

package aggregate

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   65,
				},
				File:   "aggregate.flux",
				Source: "package aggregate\n\nimport \"contrib/jsternberg/math\"\n\n// table will aggregate columns and create tables with a single\n// row containing the aggregated value.\n//\n// This function takes a single parameter of `columns`. The parameter\n// is an array of objects. Each object must have three attributes:\n//     column = string\n//         The column name for the input.\n//     with = {init, reduce, compute}\n//         The aggregate as defined below.\n//     as = string\n//         The name of the output column.\n//\n// The `with` attribute is also an object. It contains at least the\n// following attributes:\n//     init = (values) -> state\n//         An initial function to compute the initial state of the\n//         output. This can return either the final aggregate or a\n//         temporary state object that can be used to compute the\n//         final aggregate. The values parameter will always be a\n//         non-empty array of values from the specified column.\n//     reduce = (values, state) -> state\n//         A function that takes in another buffer of values\n//         and the current state of the aggregate and computes\n//         the updated state.\n//     compute = (state) -> value\n//         A function that takes the state and computes the final\n//         aggregate.\n//\n// An example of usage is:\n//     tables |> aggregate.table(columns: [\n//         {column: \"bottom_degrees\", with: aggregate.min, as: \"min_bottom_degrees\"},\n//     ])\nbuiltin table\n\n_make_selector = (fn) => ({\n\tinit: fn,\n    reduce: (values, state) => {\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    },\n    compute: (state) => state,\n})\n\nmin = _make_selector(fn: math.min)\nmax = _make_selector(fn: math.max)\n\nsum = {\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n}\n\ncount = {\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   37,
					},
					File:   "aggregate.flux",
					Source: "builtin table",
					Start: ast.Position{
						Column: 1,
						Line:   37,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   37,
						},
						File:   "aggregate.flux",
						Source: "table",
						Start: ast.Position{
							Column: 9,
							Line:   37,
						},
					},
				},
				Name: "table",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 3,
						Line:   46,
					},
					File:   "aggregate.flux",
					Source: "_make_selector = (fn) => ({\n\tinit: fn,\n    reduce: (values, state) => {\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    },\n    compute: (state) => state,\n})",
					Start: ast.Position{
						Column: 1,
						Line:   39,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   39,
						},
						File:   "aggregate.flux",
						Source: "_make_selector",
						Start: ast.Position{
							Column: 1,
							Line:   39,
						},
					},
				},
				Name: "_make_selector",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 3,
							Line:   46,
						},
						File:   "aggregate.flux",
						Source: "(fn) => ({\n\tinit: fn,\n    reduce: (values, state) => {\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    },\n    compute: (state) => state,\n})",
						Start: ast.Position{
							Column: 18,
							Line:   39,
						},
					},
				},
				Body: &ast.ParenExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   46,
							},
							File:   "aggregate.flux",
							Source: "({\n\tinit: fn,\n    reduce: (values, state) => {\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    },\n    compute: (state) => state,\n})",
							Start: ast.Position{
								Column: 26,
								Line:   39,
							},
						},
					},
					Expression: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 2,
									Line:   46,
								},
								File:   "aggregate.flux",
								Source: "{\n\tinit: fn,\n    reduce: (values, state) => {\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    },\n    compute: (state) => state,\n}",
								Start: ast.Position{
									Column: 27,
									Line:   39,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   40,
									},
									File:   "aggregate.flux",
									Source: "init: fn",
									Start: ast.Position{
										Column: 2,
										Line:   40,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   40,
										},
										File:   "aggregate.flux",
										Source: "init",
										Start: ast.Position{
											Column: 2,
											Line:   40,
										},
									},
								},
								Name: "init",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   40,
										},
										File:   "aggregate.flux",
										Source: "fn",
										Start: ast.Position{
											Column: 8,
											Line:   40,
										},
									},
								},
								Name: "fn",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   44,
									},
									File:   "aggregate.flux",
									Source: "reduce: (values, state) => {\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    }",
									Start: ast.Position{
										Column: 5,
										Line:   41,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   41,
										},
										File:   "aggregate.flux",
										Source: "reduce",
										Start: ast.Position{
											Column: 5,
											Line:   41,
										},
									},
								},
								Name: "reduce",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   44,
										},
										File:   "aggregate.flux",
										Source: "(values, state) => {\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    }",
										Start: ast.Position{
											Column: 13,
											Line:   41,
										},
									},
								},
								Body: &ast.Block{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   44,
											},
											File:   "aggregate.flux",
											Source: "{\n    \tv = fn(values)\n    \treturn fn(values: [state, v])\n    }",
											Start: ast.Position{
												Column: 32,
												Line:   41,
											},
										},
									},
									Body: []ast.Statement{&ast.VariableAssignment{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   42,
												},
												File:   "aggregate.flux",
												Source: "v = fn(values)",
												Start: ast.Position{
													Column: 6,
													Line:   42,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 7,
														Line:   42,
													},
													File:   "aggregate.flux",
													Source: "v",
													Start: ast.Position{
														Column: 6,
														Line:   42,
													},
												},
											},
											Name: "v",
										},
										Init: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   42,
														},
														File:   "aggregate.flux",
														Source: "values",
														Start: ast.Position{
															Column: 13,
															Line:   42,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   42,
															},
															File:   "aggregate.flux",
															Source: "values",
															Start: ast.Position{
																Column: 13,
																Line:   42,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   42,
																},
																File:   "aggregate.flux",
																Source: "values",
																Start: ast.Position{
																	Column: 13,
																	Line:   42,
																},
															},
														},
														Name: "values",
													},
													Value: nil,
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   42,
													},
													File:   "aggregate.flux",
													Source: "fn(values)",
													Start: ast.Position{
														Column: 10,
														Line:   42,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 12,
															Line:   42,
														},
														File:   "aggregate.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 10,
															Line:   42,
														},
													},
												},
												Name: "fn",
											},
										},
									}, &ast.ReturnStatement{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   43,
														},
														File:   "aggregate.flux",
														Source: "values: [state, v]",
														Start: ast.Position{
															Column: 16,
															Line:   43,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   43,
															},
															File:   "aggregate.flux",
															Source: "values: [state, v]",
															Start: ast.Position{
																Column: 16,
																Line:   43,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   43,
																},
																File:   "aggregate.flux",
																Source: "values",
																Start: ast.Position{
																	Column: 16,
																	Line:   43,
																},
															},
														},
														Name: "values",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 34,
																	Line:   43,
																},
																File:   "aggregate.flux",
																Source: "[state, v]",
																Start: ast.Position{
																	Column: 24,
																	Line:   43,
																},
															},
														},
														Elements: []ast.Expression{&ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   43,
																	},
																	File:   "aggregate.flux",
																	Source: "state",
																	Start: ast.Position{
																		Column: 25,
																		Line:   43,
																	},
																},
															},
															Name: "state",
														}, &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 33,
																		Line:   43,
																	},
																	File:   "aggregate.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 32,
																		Line:   43,
																	},
																},
															},
															Name: "v",
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   43,
													},
													File:   "aggregate.flux",
													Source: "fn(values: [state, v])",
													Start: ast.Position{
														Column: 13,
														Line:   43,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   43,
														},
														File:   "aggregate.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 13,
															Line:   43,
														},
													},
												},
												Name: "fn",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   43,
												},
												File:   "aggregate.flux",
												Source: "return fn(values: [state, v])",
												Start: ast.Position{
													Column: 6,
													Line:   43,
												},
											},
										},
									}},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   41,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 14,
												Line:   41,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   41,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 14,
													Line:   41,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   41,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 22,
												Line:   41,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   41,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 22,
													Line:   41,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   45,
									},
									File:   "aggregate.flux",
									Source: "compute: (state) => state",
									Start: ast.Position{
										Column: 5,
										Line:   45,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   45,
										},
										File:   "aggregate.flux",
										Source: "compute",
										Start: ast.Position{
											Column: 5,
											Line:   45,
										},
									},
								},
								Name: "compute",
							},
							Value: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   45,
										},
										File:   "aggregate.flux",
										Source: "(state) => state",
										Start: ast.Position{
											Column: 14,
											Line:   45,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   45,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 25,
												Line:   45,
											},
										},
									},
									Name: "state",
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   45,
											},
											File:   "aggregate.flux",
											Source: "state",
											Start: ast.Position{
												Column: 15,
												Line:   45,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   45,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 15,
													Line:   45,
												},
											},
										},
										Name: "state",
									},
									Value: nil,
								}},
							},
						}},
						With: nil,
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   39,
							},
							File:   "aggregate.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 19,
								Line:   39,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   39,
								},
								File:   "aggregate.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 19,
									Line:   39,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   48,
					},
					File:   "aggregate.flux",
					Source: "min = _make_selector(fn: math.min)",
					Start: ast.Position{
						Column: 1,
						Line:   48,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   48,
						},
						File:   "aggregate.flux",
						Source: "min",
						Start: ast.Position{
							Column: 1,
							Line:   48,
						},
					},
				},
				Name: "min",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   48,
							},
							File:   "aggregate.flux",
							Source: "fn: math.min",
							Start: ast.Position{
								Column: 22,
								Line:   48,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   48,
								},
								File:   "aggregate.flux",
								Source: "fn: math.min",
								Start: ast.Position{
									Column: 22,
									Line:   48,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   48,
									},
									File:   "aggregate.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 22,
										Line:   48,
									},
								},
							},
							Name: "fn",
						},
						Value: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   48,
									},
									File:   "aggregate.flux",
									Source: "math.min",
									Start: ast.Position{
										Column: 26,
										Line:   48,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   48,
										},
										File:   "aggregate.flux",
										Source: "math",
										Start: ast.Position{
											Column: 26,
											Line:   48,
										},
									},
								},
								Name: "math",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   48,
										},
										File:   "aggregate.flux",
										Source: "min",
										Start: ast.Position{
											Column: 31,
											Line:   48,
										},
									},
								},
								Name: "min",
							},
						},
					}},
					With: nil,
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   48,
						},
						File:   "aggregate.flux",
						Source: "_make_selector(fn: math.min)",
						Start: ast.Position{
							Column: 7,
							Line:   48,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   48,
							},
							File:   "aggregate.flux",
							Source: "_make_selector",
							Start: ast.Position{
								Column: 7,
								Line:   48,
							},
						},
					},
					Name: "_make_selector",
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   49,
					},
					File:   "aggregate.flux",
					Source: "max = _make_selector(fn: math.max)",
					Start: ast.Position{
						Column: 1,
						Line:   49,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   49,
						},
						File:   "aggregate.flux",
						Source: "max",
						Start: ast.Position{
							Column: 1,
							Line:   49,
						},
					},
				},
				Name: "max",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   49,
							},
							File:   "aggregate.flux",
							Source: "fn: math.max",
							Start: ast.Position{
								Column: 22,
								Line:   49,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   49,
								},
								File:   "aggregate.flux",
								Source: "fn: math.max",
								Start: ast.Position{
									Column: 22,
									Line:   49,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   49,
									},
									File:   "aggregate.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 22,
										Line:   49,
									},
								},
							},
							Name: "fn",
						},
						Value: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   49,
									},
									File:   "aggregate.flux",
									Source: "math.max",
									Start: ast.Position{
										Column: 26,
										Line:   49,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   49,
										},
										File:   "aggregate.flux",
										Source: "math",
										Start: ast.Position{
											Column: 26,
											Line:   49,
										},
									},
								},
								Name: "math",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   49,
										},
										File:   "aggregate.flux",
										Source: "max",
										Start: ast.Position{
											Column: 31,
											Line:   49,
										},
									},
								},
								Name: "max",
							},
						},
					}},
					With: nil,
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   49,
						},
						File:   "aggregate.flux",
						Source: "_make_selector(fn: math.max)",
						Start: ast.Position{
							Column: 7,
							Line:   49,
						},
					},
				},
				Callee: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   49,
							},
							File:   "aggregate.flux",
							Source: "_make_selector",
							Start: ast.Position{
								Column: 7,
								Line:   49,
							},
						},
					},
					Name: "_make_selector",
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   57,
					},
					File:   "aggregate.flux",
					Source: "sum = {\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n}",
					Start: ast.Position{
						Column: 1,
						Line:   51,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   51,
						},
						File:   "aggregate.flux",
						Source: "sum",
						Start: ast.Position{
							Column: 1,
							Line:   51,
						},
					},
				},
				Name: "sum",
			},
			Init: &ast.ObjectExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   57,
						},
						File:   "aggregate.flux",
						Source: "{\n\tinit: (values) => math.sum(values),\n\treduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t},\n\tcompute: (state) => state,\n}",
						Start: ast.Position{
							Column: 7,
							Line:   51,
						},
					},
				},
				Properties: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   52,
							},
							File:   "aggregate.flux",
							Source: "init: (values) => math.sum(values)",
							Start: ast.Position{
								Column: 2,
								Line:   52,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   52,
								},
								File:   "aggregate.flux",
								Source: "init",
								Start: ast.Position{
									Column: 2,
									Line:   52,
								},
							},
						},
						Name: "init",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   52,
								},
								File:   "aggregate.flux",
								Source: "(values) => math.sum(values)",
								Start: ast.Position{
									Column: 8,
									Line:   52,
								},
							},
						},
						Body: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   52,
										},
										File:   "aggregate.flux",
										Source: "values",
										Start: ast.Position{
											Column: 29,
											Line:   52,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   52,
											},
											File:   "aggregate.flux",
											Source: "values",
											Start: ast.Position{
												Column: 29,
												Line:   52,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   52,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 29,
													Line:   52,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   52,
									},
									File:   "aggregate.flux",
									Source: "math.sum(values)",
									Start: ast.Position{
										Column: 20,
										Line:   52,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   52,
										},
										File:   "aggregate.flux",
										Source: "math.sum",
										Start: ast.Position{
											Column: 20,
											Line:   52,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   52,
											},
											File:   "aggregate.flux",
											Source: "math",
											Start: ast.Position{
												Column: 20,
												Line:   52,
											},
										},
									},
									Name: "math",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   52,
											},
											File:   "aggregate.flux",
											Source: "sum",
											Start: ast.Position{
												Column: 25,
												Line:   52,
											},
										},
									},
									Name: "sum",
								},
							},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   52,
									},
									File:   "aggregate.flux",
									Source: "values",
									Start: ast.Position{
										Column: 9,
										Line:   52,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   52,
										},
										File:   "aggregate.flux",
										Source: "values",
										Start: ast.Position{
											Column: 9,
											Line:   52,
										},
									},
								},
								Name: "values",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   55,
							},
							File:   "aggregate.flux",
							Source: "reduce: (values, state) => {\n\t\treturn state + math.sum(values)\n\t}",
							Start: ast.Position{
								Column: 2,
								Line:   53,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   53,
								},
								File:   "aggregate.flux",
								Source: "reduce",
								Start: ast.Position{
									Column: 2,
									Line:   53,
								},
							},
						},
						Name: "reduce",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   55,
								},
								File:   "aggregate.flux",
								Source: "(values, state) => {\n\t\treturn state + math.sum(values)\n\t}",
								Start: ast.Position{
									Column: 10,
									Line:   53,
								},
							},
						},
						Body: &ast.Block{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   55,
									},
									File:   "aggregate.flux",
									Source: "{\n\t\treturn state + math.sum(values)\n\t}",
									Start: ast.Position{
										Column: 29,
										Line:   53,
									},
								},
							},
							Body: []ast.Statement{&ast.ReturnStatement{
								Argument: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   54,
											},
											File:   "aggregate.flux",
											Source: "state + math.sum(values)",
											Start: ast.Position{
												Column: 10,
												Line:   54,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   54,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 10,
													Line:   54,
												},
											},
										},
										Name: "state",
									},
									Operator: 5,
									Right: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   54,
													},
													File:   "aggregate.flux",
													Source: "values",
													Start: ast.Position{
														Column: 27,
														Line:   54,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   54,
														},
														File:   "aggregate.flux",
														Source: "values",
														Start: ast.Position{
															Column: 27,
															Line:   54,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   54,
															},
															File:   "aggregate.flux",
															Source: "values",
															Start: ast.Position{
																Column: 27,
																Line:   54,
															},
														},
													},
													Name: "values",
												},
												Value: nil,
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   54,
												},
												File:   "aggregate.flux",
												Source: "math.sum(values)",
												Start: ast.Position{
													Column: 18,
													Line:   54,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   54,
													},
													File:   "aggregate.flux",
													Source: "math.sum",
													Start: ast.Position{
														Column: 18,
														Line:   54,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   54,
														},
														File:   "aggregate.flux",
														Source: "math",
														Start: ast.Position{
															Column: 18,
															Line:   54,
														},
													},
												},
												Name: "math",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   54,
														},
														File:   "aggregate.flux",
														Source: "sum",
														Start: ast.Position{
															Column: 23,
															Line:   54,
														},
													},
												},
												Name: "sum",
											},
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   54,
										},
										File:   "aggregate.flux",
										Source: "return state + math.sum(values)",
										Start: ast.Position{
											Column: 3,
											Line:   54,
										},
									},
								},
							}},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   53,
									},
									File:   "aggregate.flux",
									Source: "values",
									Start: ast.Position{
										Column: 11,
										Line:   53,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   53,
										},
										File:   "aggregate.flux",
										Source: "values",
										Start: ast.Position{
											Column: 11,
											Line:   53,
										},
									},
								},
								Name: "values",
							},
							Value: nil,
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   53,
									},
									File:   "aggregate.flux",
									Source: "state",
									Start: ast.Position{
										Column: 19,
										Line:   53,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   53,
										},
										File:   "aggregate.flux",
										Source: "state",
										Start: ast.Position{
											Column: 19,
											Line:   53,
										},
									},
								},
								Name: "state",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   56,
							},
							File:   "aggregate.flux",
							Source: "compute: (state) => state",
							Start: ast.Position{
								Column: 2,
								Line:   56,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   56,
								},
								File:   "aggregate.flux",
								Source: "compute",
								Start: ast.Position{
									Column: 2,
									Line:   56,
								},
							},
						},
						Name: "compute",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   56,
								},
								File:   "aggregate.flux",
								Source: "(state) => state",
								Start: ast.Position{
									Column: 11,
									Line:   56,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   56,
									},
									File:   "aggregate.flux",
									Source: "state",
									Start: ast.Position{
										Column: 22,
										Line:   56,
									},
								},
							},
							Name: "state",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   56,
									},
									File:   "aggregate.flux",
									Source: "state",
									Start: ast.Position{
										Column: 12,
										Line:   56,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   56,
										},
										File:   "aggregate.flux",
										Source: "state",
										Start: ast.Position{
											Column: 12,
											Line:   56,
										},
									},
								},
								Name: "state",
							},
							Value: nil,
						}},
					},
				}},
				With: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   65,
					},
					File:   "aggregate.flux",
					Source: "count = {\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n}",
					Start: ast.Position{
						Column: 1,
						Line:   59,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   59,
						},
						File:   "aggregate.flux",
						Source: "count",
						Start: ast.Position{
							Column: 1,
							Line:   59,
						},
					},
				},
				Name: "count",
			},
			Init: &ast.ObjectExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   65,
						},
						File:   "aggregate.flux",
						Source: "{\n\tinit: (values) => length(arr: values),\n\treduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t},\n\tcompute: (state) => state,\n}",
						Start: ast.Position{
							Column: 9,
							Line:   59,
						},
					},
				},
				Properties: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   60,
							},
							File:   "aggregate.flux",
							Source: "init: (values) => length(arr: values)",
							Start: ast.Position{
								Column: 2,
								Line:   60,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   60,
								},
								File:   "aggregate.flux",
								Source: "init",
								Start: ast.Position{
									Column: 2,
									Line:   60,
								},
							},
						},
						Name: "init",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   60,
								},
								File:   "aggregate.flux",
								Source: "(values) => length(arr: values)",
								Start: ast.Position{
									Column: 8,
									Line:   60,
								},
							},
						},
						Body: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   60,
										},
										File:   "aggregate.flux",
										Source: "arr: values",
										Start: ast.Position{
											Column: 27,
											Line:   60,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   60,
											},
											File:   "aggregate.flux",
											Source: "arr: values",
											Start: ast.Position{
												Column: 27,
												Line:   60,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   60,
												},
												File:   "aggregate.flux",
												Source: "arr",
												Start: ast.Position{
													Column: 27,
													Line:   60,
												},
											},
										},
										Name: "arr",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   60,
												},
												File:   "aggregate.flux",
												Source: "values",
												Start: ast.Position{
													Column: 32,
													Line:   60,
												},
											},
										},
										Name: "values",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   60,
									},
									File:   "aggregate.flux",
									Source: "length(arr: values)",
									Start: ast.Position{
										Column: 20,
										Line:   60,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   60,
										},
										File:   "aggregate.flux",
										Source: "length",
										Start: ast.Position{
											Column: 20,
											Line:   60,
										},
									},
								},
								Name: "length",
							},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   60,
									},
									File:   "aggregate.flux",
									Source: "values",
									Start: ast.Position{
										Column: 9,
										Line:   60,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   60,
										},
										File:   "aggregate.flux",
										Source: "values",
										Start: ast.Position{
											Column: 9,
											Line:   60,
										},
									},
								},
								Name: "values",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   63,
							},
							File:   "aggregate.flux",
							Source: "reduce: (values, state) => {\n\t\treturn state + length(arr: values)\n\t}",
							Start: ast.Position{
								Column: 2,
								Line:   61,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   61,
								},
								File:   "aggregate.flux",
								Source: "reduce",
								Start: ast.Position{
									Column: 2,
									Line:   61,
								},
							},
						},
						Name: "reduce",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   63,
								},
								File:   "aggregate.flux",
								Source: "(values, state) => {\n\t\treturn state + length(arr: values)\n\t}",
								Start: ast.Position{
									Column: 10,
									Line:   61,
								},
							},
						},
						Body: &ast.Block{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   63,
									},
									File:   "aggregate.flux",
									Source: "{\n\t\treturn state + length(arr: values)\n\t}",
									Start: ast.Position{
										Column: 29,
										Line:   61,
									},
								},
							},
							Body: []ast.Statement{&ast.ReturnStatement{
								Argument: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   62,
											},
											File:   "aggregate.flux",
											Source: "state + length(arr: values)",
											Start: ast.Position{
												Column: 10,
												Line:   62,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   62,
												},
												File:   "aggregate.flux",
												Source: "state",
												Start: ast.Position{
													Column: 10,
													Line:   62,
												},
											},
										},
										Name: "state",
									},
									Operator: 5,
									Right: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   62,
													},
													File:   "aggregate.flux",
													Source: "arr: values",
													Start: ast.Position{
														Column: 25,
														Line:   62,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   62,
														},
														File:   "aggregate.flux",
														Source: "arr: values",
														Start: ast.Position{
															Column: 25,
															Line:   62,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   62,
															},
															File:   "aggregate.flux",
															Source: "arr",
															Start: ast.Position{
																Column: 25,
																Line:   62,
															},
														},
													},
													Name: "arr",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   62,
															},
															File:   "aggregate.flux",
															Source: "values",
															Start: ast.Position{
																Column: 30,
																Line:   62,
															},
														},
													},
													Name: "values",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   62,
												},
												File:   "aggregate.flux",
												Source: "length(arr: values)",
												Start: ast.Position{
													Column: 18,
													Line:   62,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   62,
													},
													File:   "aggregate.flux",
													Source: "length",
													Start: ast.Position{
														Column: 18,
														Line:   62,
													},
												},
											},
											Name: "length",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   62,
										},
										File:   "aggregate.flux",
										Source: "return state + length(arr: values)",
										Start: ast.Position{
											Column: 3,
											Line:   62,
										},
									},
								},
							}},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   61,
									},
									File:   "aggregate.flux",
									Source: "values",
									Start: ast.Position{
										Column: 11,
										Line:   61,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   61,
										},
										File:   "aggregate.flux",
										Source: "values",
										Start: ast.Position{
											Column: 11,
											Line:   61,
										},
									},
								},
								Name: "values",
							},
							Value: nil,
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   61,
									},
									File:   "aggregate.flux",
									Source: "state",
									Start: ast.Position{
										Column: 19,
										Line:   61,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   61,
										},
										File:   "aggregate.flux",
										Source: "state",
										Start: ast.Position{
											Column: 19,
											Line:   61,
										},
									},
								},
								Name: "state",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   64,
							},
							File:   "aggregate.flux",
							Source: "compute: (state) => state",
							Start: ast.Position{
								Column: 2,
								Line:   64,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   64,
								},
								File:   "aggregate.flux",
								Source: "compute",
								Start: ast.Position{
									Column: 2,
									Line:   64,
								},
							},
						},
						Name: "compute",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   64,
								},
								File:   "aggregate.flux",
								Source: "(state) => state",
								Start: ast.Position{
									Column: 11,
									Line:   64,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   64,
									},
									File:   "aggregate.flux",
									Source: "state",
									Start: ast.Position{
										Column: 22,
										Line:   64,
									},
								},
							},
							Name: "state",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   64,
									},
									File:   "aggregate.flux",
									Source: "state",
									Start: ast.Position{
										Column: 12,
										Line:   64,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   64,
										},
										File:   "aggregate.flux",
										Source: "state",
										Start: ast.Position{
											Column: 12,
											Line:   64,
										},
									},
								},
								Name: "state",
							},
							Value: nil,
						}},
					},
				}},
				With: nil,
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 33,
						Line:   3,
					},
					File:   "aggregate.flux",
					Source: "import \"contrib/jsternberg/math\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   3,
						},
						File:   "aggregate.flux",
						Source: "\"contrib/jsternberg/math\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "contrib/jsternberg/math",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "aggregate.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   1,
					},
					File:   "aggregate.flux",
					Source: "package aggregate",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						File:   "aggregate.flux",
						Source: "aggregate",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "aggregate",
			},
		},
	}},
	Package: "aggregate",
	Path:    "contrib/jsternberg/aggregate",
}
