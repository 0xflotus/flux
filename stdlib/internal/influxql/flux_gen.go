// DO NOT EDIT: This file is autogenerated via the builtin command.

package influxql

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
	parser "github.com/influxdata/flux/internal/parser"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 49,
					Line:   8,
				},
				File:   "constants.flux",
				Source: "package influxql\n\nepoch = 1970-01-01T00:00:00Z\nminTime = 1677-09-21T00:12:43.145224194Z\nmaxTime = 2262-04-11T23:47:16.854775806Z\n\nsetTime = (tables=<-,time) =>\n\ttables |> map(fn: (r) => ({r with time: time}))",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   3,
					},
					File:   "constants.flux",
					Source: "epoch = 1970-01-01T00:00:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   3,
						},
						File:   "constants.flux",
						Source: "epoch",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "epoch",
			},
			Init: &ast.DateTimeLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   3,
						},
						File:   "constants.flux",
						Source: "1970-01-01T00:00:00Z",
						Start: ast.Position{
							Column: 9,
							Line:   3,
						},
					},
				},
				Value: parser.MustParseTime("1970-01-01T00:00:00Z"),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   4,
					},
					File:   "constants.flux",
					Source: "minTime = 1677-09-21T00:12:43.145224194Z",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   4,
						},
						File:   "constants.flux",
						Source: "minTime",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Name: "minTime",
			},
			Init: &ast.DateTimeLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   4,
						},
						File:   "constants.flux",
						Source: "1677-09-21T00:12:43.145224194Z",
						Start: ast.Position{
							Column: 11,
							Line:   4,
						},
					},
				},
				Value: parser.MustParseTime("1677-09-21T00:12:43.145224194Z"),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "constants.flux",
					Source: "maxTime = 2262-04-11T23:47:16.854775806Z",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   5,
						},
						File:   "constants.flux",
						Source: "maxTime",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Name: "maxTime",
			},
			Init: &ast.DateTimeLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "constants.flux",
						Source: "2262-04-11T23:47:16.854775806Z",
						Start: ast.Position{
							Column: 11,
							Line:   5,
						},
					},
				},
				Value: parser.MustParseTime("2262-04-11T23:47:16.854775806Z"),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   8,
					},
					File:   "constants.flux",
					Source: "setTime = (tables=<-,time) =>\n\ttables |> map(fn: (r) => ({r with time: time}))",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   7,
						},
						File:   "constants.flux",
						Source: "setTime",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "setTime",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   8,
						},
						File:   "constants.flux",
						Source: "(tables=<-,time) =>\n\ttables |> map(fn: (r) => ({r with time: time}))",
						Start: ast.Position{
							Column: 11,
							Line:   7,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   8,
								},
								File:   "constants.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 2,
									Line:   8,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   8,
							},
							File:   "constants.flux",
							Source: "tables |> map(fn: (r) => ({r with time: time}))",
							Start: ast.Position{
								Column: 2,
								Line:   8,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   8,
									},
									File:   "constants.flux",
									Source: "fn: (r) => ({r with time: time})",
									Start: ast.Position{
										Column: 16,
										Line:   8,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   8,
										},
										File:   "constants.flux",
										Source: "fn: (r) => ({r with time: time})",
										Start: ast.Position{
											Column: 16,
											Line:   8,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   8,
											},
											File:   "constants.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 16,
												Line:   8,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   8,
											},
											File:   "constants.flux",
											Source: "(r) => ({r with time: time})",
											Start: ast.Position{
												Column: 20,
												Line:   8,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   8,
												},
												File:   "constants.flux",
												Source: "({r with time: time})",
												Start: ast.Position{
													Column: 27,
													Line:   8,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   8,
													},
													File:   "constants.flux",
													Source: "{r with time: time}",
													Start: ast.Position{
														Column: 28,
														Line:   8,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   8,
														},
														File:   "constants.flux",
														Source: "time: time",
														Start: ast.Position{
															Column: 36,
															Line:   8,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   8,
															},
															File:   "constants.flux",
															Source: "time",
															Start: ast.Position{
																Column: 36,
																Line:   8,
															},
														},
													},
													Name: "time",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   8,
															},
															File:   "constants.flux",
															Source: "time",
															Start: ast.Position{
																Column: 42,
																Line:   8,
															},
														},
													},
													Name: "time",
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   8,
														},
														File:   "constants.flux",
														Source: "r",
														Start: ast.Position{
															Column: 29,
															Line:   8,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   8,
												},
												File:   "constants.flux",
												Source: "r",
												Start: ast.Position{
													Column: 21,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   8,
													},
													File:   "constants.flux",
													Source: "r",
													Start: ast.Position{
														Column: 21,
														Line:   8,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   8,
								},
								File:   "constants.flux",
								Source: "map(fn: (r) => ({r with time: time}))",
								Start: ast.Position{
									Column: 12,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   8,
									},
									File:   "constants.flux",
									Source: "map",
									Start: ast.Position{
										Column: 12,
										Line:   8,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							File:   "constants.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 12,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   7,
								},
								File:   "constants.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 12,
									Line:   7,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   7,
							},
							File:   "constants.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 19,
								Line:   7,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   7,
							},
							File:   "constants.flux",
							Source: "time",
							Start: ast.Position{
								Column: 22,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   7,
								},
								File:   "constants.flux",
								Source: "time",
								Start: ast.Position{
									Column: 22,
									Line:   7,
								},
							},
						},
						Name: "time",
					},
					Value: nil,
				}},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=go",
		Name:     "constants.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   1,
					},
					File:   "constants.flux",
					Source: "package influxql",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						File:   "constants.flux",
						Source: "influxql",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 19,
					Line:   5,
				},
				File:   "functions.flux",
				Source: "package influxql\n\nimport \"internal/promql\"\n\njoin = promql.join",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   5,
					},
					File:   "functions.flux",
					Source: "join = promql.join",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   5,
						},
						File:   "functions.flux",
						Source: "join",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Name: "join",
			},
			Init: &ast.MemberExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   5,
						},
						File:   "functions.flux",
						Source: "promql.join",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Object: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   5,
							},
							File:   "functions.flux",
							Source: "promql",
							Start: ast.Position{
								Column: 8,
								Line:   5,
							},
						},
					},
					Name: "promql",
				},
				Property: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   5,
							},
							File:   "functions.flux",
							Source: "join",
							Start: ast.Position{
								Column: 15,
								Line:   5,
							},
						},
					},
					Name: "join",
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   3,
					},
					File:   "functions.flux",
					Source: "import \"internal/promql\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   3,
						},
						File:   "functions.flux",
						Source: "\"internal/promql\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "internal/promql",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "functions.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   1,
					},
					File:   "functions.flux",
					Source: "package influxql",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						File:   "functions.flux",
						Source: "influxql",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "influxql",
			},
		},
	}},
	Package: "influxql",
	Path:    "internal/influxql",
}
